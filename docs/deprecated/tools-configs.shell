#!/usr/bin/env bash

## File: scripts/tools-configs.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__TOOLS_CONFIGS_SOURCED:-}" ]]; then return 0; fi;
readonly __TOOLS_CONFIGS_SOURCED=1;

#### ---------------------------------------------------------------------------
# Purpose:
#   Assembles structured per-IP JSON output from previously matched config blocks.
#   Groups all object entries per config file under their respective site/device.
#
# Inputs:
#   $1 = Target IP address (used for labeling and filtering)
#   $2 = Output JSON path (e.g., ./targets/<ip>.json)
#
# Behavior:
#   - Iterates over `matched_configs_order[@]`, which lists config files associated with $1
#   - Uses `matched_blocks_byfile[<cfg>]` to retrieve all matching config blocks for each file
#   - Splits each config block on blank lines (logical object boundaries)
#   - Sends each block to `process_blocks()` for extraction (as structured JSON)
#   - Wraps each set of objects under:
#       {
#         config: { site: "<site>", device: "<filename>" },
#         objects: [ ... ]
#       }
#   - Aggregates all config blocks into:
#       {
#         target: "<ip_address>",
#         configs: [ ... ]
#       }
#
# Output:
#   Writes a complete JSON report for the IP to the file path in $2
#
# Notes:
#   - This is the final step in per-IP processing.
#   - Depends on upstream structures: `matched_configs_order[]` and `matched_blocks_byfile[]`.
#   - Each logical config block is expected to be newline-delimited.
#   - Uses `relative_configpath()` to resolve site/device context.

function generate_objects () {
    local ip_address="${1}";
    local outfile="${2}";
    local -a configs=();
    ## Iterate over config files matched in memory
    for cfg_file in "${matched_configs_order[@]}"; do
      local blocks="${matched_blocks_byfile[${cfg_file}]}";
      local -a objects=();
      local current_block="";
      ## Split config file content into logical blocks
      while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ -z "${line//[[:space:]]/}" ]]; then
                if [[ -n "$current_block" ]]; then
                  process_blocks "$ip_address" "$cfg_file" "$current_block" objects;
                  current_block="";
                fi;
          else  current_block+="${line}"$'\n';
        fi;
      done <<< "$blocks";
      ## Handle the last block if no newline at EOF
      [[ -n "$current_block" ]] && \
        process_blocks "$ip_address" "$cfg_file" "$current_block" objects;
      ## Create JSON for this config file
      local objs_json="[]";
      if (( ${#objects[@]} > 0 )); then
        objs_json="$(
          jq --slurp . <<< "${objects[*]}"
        )";
      fi;

      relative_cfg="$(
        relative_configpath "${cfg_file}"
      )";
      site="${relative_cfg%%/*}";
      device="${relative_cfg#*/}";

      configs+=("$(
        jq -n \
           --arg site "${site}" \
           --arg device "${device}" \
           --argjson objs "${objs_json}" \
           '{ config: { site: $site, device: $device }, objects: $objs }'
      )");

    done;
    ## Final output JSON structure
    local cfgs_json="[]";
    if (( ${#configs[@]} > 0 )); then
      cfgs_json="$( jq --slurp . <<< "${configs[*]}" )";
    fi;
    jq -n --arg ip "${ip_address}" \
          --argjson cfgs "${cfgs_json}" \
      '{ target: $ip, configs: $cfgs }' > "${outfile}";
    return 0;
}; alias generate-objects='generate_objects';

#### -----------------------------------------------------------------------
# Purpose:
#   Parses a single configuration block and extracts minimal metadata
#   used to populate a simplified JSON object for summary views.
#
# Inputs:
#   $1 = Target IP address (used to locate the key matching line)
#   $2 = Full path to the config file (context only)
#   $3 = Raw configuration block (newline-delimited string)
#   $4 = Name of array variable (passed by name, Bash nameref)
#
# Behavior:
#   - Strips empty lines from the block.
#   - Captures:
#       - `object`   → the first line of the block (header)
#       - `entry`    → the first line that contains the IP
#       - `desc`     → the first line starting with `description` (if any)
#       - `group`    → classification group from matrix.json if classification is enabled
#   - If only one line exists, disables `entry` to avoid false positives.
#   - Appends a minimal JSON object into the provided array (via name reference).
#
# Output JSON format:
#   {
#     "object": "object-group network SOMENAME",
#     "entry": "network-object host 10.0.0.1",
#     "description": "Some optional label",
#     "group": "Business-Unit-X"
#   }
#
# Notes:
#   - Used internally by `generate_objects()` to distill block summaries.
#   - Classification prioritizes object key; falls back to description match.

function process_blocks () {
    local ip="${1}";
    local cfg="${2}";
    local block="${3}";
    local -n obj_array="${4}";
    ## Split block into non-empty lines
    mapfile -t lines < <(
      sed '/^[[:space:]]*$/d' <<< "${block}"
    );
    [[ ${#lines[@]} -eq 0 ]] && return;
    local object_val="$(
      sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//' <<< "${lines[0]}"
    )";
    ## Try to find the exact line that references the IP
    local entry_val="";
    for line in "${lines[@]}"; do
      if grep -q -wF "${ip}" <<< "$line"; then
        entry_val="$(
          sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//' <<< "$line"
        )";
        break;
      fi;
    done;
    [[ -z "${entry_val}" ]] && return;
    ## Attempt to extract an optional description from the block
    local desc_val="false";
    for line in "${lines[@]}"; do
      if [[ "${line,,}" =~ ^[[:space:]]*description ]]; then
        desc_val="$(
          sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//' <<< "$line"
        )";
        [[ -z "$desc_val" ]] && desc_val="false";
        break;
      fi;
    done;
    ## Classification group (default = Unclassified unless --classify is set)
    local group_val="Unclassified";
    if [[ "${classify_targets:-false}" == true ]]; then
      ## Extract object key (usually last token in object definition)
      local object_key="$(
        awk '{print $NF}' <<< "${object_val}" | \
        sed -E 's/[[:punct:]]*$//'
      )";
      ## Attempt classification by object key
      group_val="$(
        jq -r --arg key "${object_key}" \
        'map(select(.match[]? | contains($key))) | .[0].group' <<< "${matrix_configs}"
      )";
      ## Fallback to classification by description value
      if [[ -z "${group_val}" || "${group_val}" == "null" ]]; then
        group_val="$(
          jq -r --arg desc "${desc_val}" \
          'map(select(.match[]? == $desc)) | .[0].group' <<< "${matrix_configs}"
        )";
      fi;
      ## Default to "Unclassified" if no match found
      [[ -z "${group_val}" || "${group_val}" == "null" ]] && group_val="Unclassified";
    fi;

    #### -----------------------------------------------------------------------
    ## If only 1 line in block, the entry is not valid
    local entry_out="${entry_val}"
    [[ ${#lines[@]} -eq 1 ]] && entry_out=""

    #### -----------------------------------------------------------------------
    ## Build and append object JSON structure
    obj_array+=("$(
      jq -n \
        --arg object "${object_val}" \
        --arg entry "${entry_out}" \
        --arg desc "${desc_val}" \
        --arg group "${group_val}" \
        '{
          object: $object,
          entry: $entry,
          description: ($desc | select(. != "" and . != "null") // false),
          group: $group
        }'
    )");

    return 0;
}; alias process-blocks='process_blocks';

#------------------------------------------------------------------------------#
