#!/usr/bin/env bash

## -------------------------------------------------------------------------- ##
## File: scripts/network-configs.shell
##
## Purpose:
##   Top-level dispatcher for pre-processing multi-vendor network configurations.
##   Extracts relevant sections (e.g., ACLs, objects, addresses) based on a
##   user-defined search pattern (typically IP addresses), reducing massive
##   configuration files into targeted, minimal artifacts for faster analysis.
##
## Description:
##   - Accepts a list of IPs (--configs), device names (--search), or a full
##     directory scan (--location). Prompts interactively if missing.
##   - Automatically detects platform type (Cisco, Fortinet, or unknown).
##   - Delegates to `network-extract.shell` for vendor-specific reduction.
##   - Only configuration files containing matching IPs are extracted.
##   - Extracted outputs mirror the original structure under the --extract path
##     or default to `./resources/` if unspecified.
##
## Input Prioritization:
##   - Priority: --location is required when using --search or --configs
##   - --search: filters device names/patterns inside the --location directory
##   - --configs: list of IPs to search (file or inline)
##
## Extraction Logic:
##   - Cisco: matches 'interface', 'object', 'access-list', etc.
##   - Fortinet: matches 'config', 'edit', 'next', 'end'
##   - Unrecognized configs are skipped with a warning.
##
## Usage:
##   bash ./scripts/network-configs.shell \
##     --search=devices.list \
##     --configs=ips.list \
##     --location=./configs \
##     --extract=.cache/resources \
##     --verbose
##
## Exit Codes:
##   Use --help to display detailed exit code descriptions.
##
## -------------------------------------------------------------------------- ##

set -euo pipefail  ## Strict mode: exit on error, undefined var use, and pipeline failure
# set -x;          ## Enable for execution tracing/debugging

## POSIX locale standard
export LC_ALL=C   ## Ensure consistent sorting and character handling (POSIX-compliant)

# Create a secure, temporary working directory (auto-cleaned at script exit)
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

export nl="\n";

#------------------------------------------------------------------------------#

# Load common utility functions (logging, platform detection, etc.)
source ./scripts/devops-resources.shell;

## Load common or function-based helping modules
source ./scripts/devops-helpers.shell;

#------------------------------------------------------------------------------#

function main () {
## ... Ensure the main function is not re-sourced
}; alias network-configs='main';

#------------------------------------------------------------------------------#

[[ -z "${script_name+x}" ]] && export script_name="${0}";

export logs_location="logs";
mkdir -p ${logs_location} 2>/dev/null || true;

script_filename="${BASH_SOURCE[0]##*/}";
script_filename="${script_filename%.*}";

export network_configs__console="${console_location}/${script_filename}.console";
touch "${network_configs__console}" || {
  warning "Failed to create console log file: ${network_configs__console}";
  network_configs__console="/dev/null";
};

#------------------------------------------------------------------------------#

if [[ ${#@} -eq 0 || "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  newline;
        main "${@}";
        result=${?}; exit ${result};
        ## newline; message "Done."; newline;
fi;

#------------------------------------------------------------------------------#
