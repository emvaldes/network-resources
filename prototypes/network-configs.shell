#!/usr/bin/env bash

## -------------------------------------------------------------------------- ##
## File: scripts/network-configs.shell
##
## Purpose:
##   Top-level dispatcher for pre-processing multi-vendor network configurations.
##   Extracts relevant sections (e.g., ACLs, objects, addresses) based on a
##   user-defined search pattern (typically IP addresses), reducing massive
##   configuration files into targeted, minimal artifacts for faster analysis.
##
## Description:
##   - Accepts a list of IPs (--configs), device names (--search), or a full
##     directory scan (--location). Prompts interactively if missing.
##   - Automatically detects platform type (Cisco, Fortinet, or unknown).
##   - Delegates to `network-extract.shell` for vendor-specific reduction.
##   - Only configuration files containing matching IPs are extracted.
##   - Extracted outputs mirror the original structure under the --extract path
##     or default to `./resources/` if unspecified.
##
## Input Prioritization:
##   - Priority: --location is required when using --search or --configs
##   - --search: filters device names/patterns inside the --location directory
##   - --configs: list of IPs to search (file or inline)
##
## Extraction Logic:
##   - Cisco: matches 'interface', 'object', 'access-list', etc.
##   - Fortinet: matches 'config', 'edit', 'next', 'end'
##   - Unrecognized configs are skipped with a warning.
##
## Usage:
##   bash ./scripts/network-configs.shell \
##     --search=devices.list \
##     --configs=ips.list \
##     --location=./configs \
##     --extract=.cache/resources \
##     --verbose
##
## Exit Codes:
##   Use --help to display detailed exit code descriptions.
##
## -------------------------------------------------------------------------- ##

set -euo pipefail  ## Strict mode: exit on error, undefined var use, and pipeline failure
# set -x;          ## Enable for execution tracing/debugging

## POSIX locale standard
export LC_ALL=C   ## Ensure consistent sorting and character handling (POSIX-compliant)

# Create a secure, temporary working directory (auto-cleaned at script exit)
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

export nl="\n";

#------------------------------------------------------------------------------#

# Load common utility functions (logging, platform detection, etc.)
source ./scripts/devops-resources.shell;

## Load common or function-based helping modules
source ./scripts/devops-helpers.shell;

#------------------------------------------------------------------------------#

function main () {

    ## tracking_process ${FUNCNAME} "${@}";
    oIFS="${IFS}";

    ## Process command-line arguments and map them to local variables
    for xitem in "${@}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";

      #### ---------------------------------------------------------------------
      ## Match accepted arguments
      [[ $key =~ ^(cache|e)$ ]] && local cache_location="${value}";
      [[ $key =~ ^(configs|c)$ ]] && local search_configs="${value}";
      [[ $key =~ ^(extract|x)$ ]] && local extract_location="${value}";
      [[ $key =~ ^(location|l)$ ]] && local search_location="${value}";
      [[ $key =~ ^(search|s)$ ]] && local search_pattern="${value}";
      [[ $key =~ ^(update|u)$ ]] && local update_sources="${value}";
      [[ $key =~ ^(logger|o)$ ]] && local target_logfile="${value}";

      #### ---------------------------------------------------------------------
      ## Special options
      [[ $key == "help" ]] && local script_helper=true;
      [[ $key == "debug" ]] && local debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true;

    done; IFS="${oIFS}";

    #### -----------------------------------------------------------------------
    ## Set default values if not supplied
    [[ -z ${debug:-} ]] && debug=false;
    [[ -z ${dry_run:-} ]] && dry_run=false;
    [[ -z ${verbose:-} ]] && verbose=false;

    #### -----------------------------------------------------------------------
    [[ -z "${cache_location:-}" ]] && export cache_location="./.cache";
    [[ -z "${extract_location:-}" ]] && export extract_location="./resources";
    [[ -z "${search_pattern:-}" ]] && export search_pattern=;
    [[ -z "${search_configs:-}" ]] && export search_configs=;
    [[ -z "${search_location:-}" ]] && export search_location=;
    [[ -z "${update_sources:-}" ]] && local update_sources=false;

    if [[ -z "${target_logfile:-}" ]]; then
      local target_logfile="${logs_location}/console/${script_filename}.console";
      touch "${target_logfile}";
    fi;
    # touchh "${target_logfile}";  ## Clear the log file if it exists

    #### -----------------------------------------------------------------------
    ## Display usage help if requested
    [[ -z ${script_helper:-} ]] && local script_helper=false;
    if [[ ${script_helper:-} == true ]]; then
      network_configs__helper;
      exit 0;
    fi;

    #### -----------------------------------------------------------------------
    ## Ensure required directories exist
    if [[ ! -d "${cache_location}" ]]; then
      warning "Cache location is not set or does not exist!";
      mkdir -p "${cache_location}" 2>/dev/null || {
        warning "Failed to create ${cache_location} directory.";
        return 4;
      };
    fi;

    #### -----------------------------------------------------------------------
    ## Application's cache-related components
    if [[ "${update_sources}" == true ]]; then
            export active_ips_file="${cache_location}/ips.list";
            export active_configs_file="${cache_location}/configs.list";
      else  ## Use existing cache files if available
            export active_ips_file="${TMP_DIR}/network-configs--ips.list";
            export active_configs_file="${TMP_DIR}/network-configs--configs.list";
    fi;

    ## Always reset before use to avoid stale data
    touch "${active_ips_file}" 2>/dev/null;      ## || rm -f "${active_ips_file}" 2>/dev/null;
    touch "${active_configs_file}" 2>/dev/null;  ## || rm -f "${active_configs_file}" 2>/dev/null;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        message "Updating IPS listings in: [ ${active_ips_file} ] ("${update_sources}")";
        message "Updating Configs List in: [ ${active_configs_file} ] ("${update_sources}")";
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Prompt for search pattern if not provided
    local prompt_message="Enter search pattern (IP address, CIDR, etc.): ";
    while [[ -z "${search_pattern}" ]]; do
      newline;
      read -e -p "${prompt_message}" search_pattern;
      if [[ "${search_pattern// /}" == "" ]]; then
        warning "Search pattern is required.";
        search_pattern=false;
        return 1;
      fi;
    done;

    #### -----------------------------------------------------------------------
    ## Normalize search pattern input into search_terms[]
    declare -a search_terms=();

    if [[ -f "${search_pattern}" && "${search_pattern}" != *,* ]]; then
            ## Read IPs from file
            mapfile -t search_terms < <(
              tr -d '\r' < "${search_pattern}" | \
              grep -v '^\s*$' | grep -v '^#'
            );
      else  ## Inline string â€” preserve full IPs and split only on clear delimiters
            IFS=$'\n' read -r -d '' -a search_terms <<< "$(
              echo "${search_pattern}" | \
              sed 's/[][|;:]/ /g' | tr ', ' '\n\n' | \
              grep -v '^\s*$'
            )" || true;
            ## Write to temp file
            search_pattern="${active_ips_file}";
            printf "%s\n" "${search_terms[@]}" > "${search_pattern}";
    fi;

    #### -----------------------------------------------------------------------
    ## Prompt for source configuration files if not provided
    local prompt_message="Enter configuration file(s) or search path (comma-separated): ";
    while [[ -z "${search_configs}" && -z "${search_location}" ]]; do
      newline;
      read -e -p "${prompt_message}" search_configs;
      if [[ "${search_configs// /}" == "" ]]; then
        warning "Either --configs or --location must be provided.";
        search_configs="";
        continue;
      fi;
      # Check if it's a single file (no commas), and verify it exists and is readable
      if [[ "${search_configs}" != *,* ]]; then
        if [[ ! -f "${search_configs}" || ! -r "${search_configs}" ]]; then
          warning "Provided file [ ${search_configs} ] does not exist or is not readable.";
          search_configs="";
          continue;
        fi;
      fi;
    done;

    #### -----------------------------------------------------------------------
    ## Prompt for search location if not provided
    local prompt_message="Enter base directory to search configuration files: ";
    while [[ -z "${search_location}" ]]; do
      newline;
      read -e -p "${prompt_message}" search_location;
      if [[ "${search_location// /}" == "" ]]; then
        warning "Search location is required.";
        search_location="";
        continue;
      fi;
      if [[ ! -d "${search_location}" || ! -r "${search_location}" ]]; then
        warning "Directory [ ${search_location} ] does not exist or is not readable.";
        search_location="";
        continue;
      fi;
    done;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        message "Search Patterns File: [ ${search_pattern} ]";
        local count=${#search_terms[@]};
        if (( count == 0 )); then
                warning "No search terms provided or extracted.";
          else  message "Search Patterns (${count}): ";
                newline;
                for ((i = 0; i < count && i < 25; i++)); do
                  message "  - ${search_terms[$i]}";
                done | cat -n;
        fi;
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;
    
    #### -----------------------------------------------------------------------
    ## Resolve config files into configs_listing[]
    declare -a configs_listing=();
    if [[ -n "${search_configs}" ]]; then

          declare -a raw_paths=();
          if [[ -f "${search_configs}" && "${search_configs}" != *,* ]]; then
                    ## Case 1: File input â†’ read device names or config keywords
                    while IFS= read -r line || [[ -n "${line}" ]]; do
                      clean="$(
                        echo "${line}" | \
                        sed 's/\r//' | \
                        sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
                      )";
                      [[ -z "${clean}" || "${clean}" =~ ^#.*$ ]] && continue;
                      raw_paths+=( "${clean}" );
                    done < "${search_configs}";
              else  ## Case 2: Inline input â†’ tokenize using common delimiters
                    IFS=$'\n' read -r -d '' -a raw_paths <<< "$(
                      echo "${search_configs}" | \
                      tr -s '[:space:]+|;:,.' '\n' | \
                      grep -v '^\s*$'
                    )" || true;
            fi;

            if [[ ${#raw_paths[@]} -gt 0 ]]; then
                    mapfile -t configs_listing < <(
                      find "${search_location}" -type f 2>/dev/null | \
                      egrep "$(IFS='|'; echo "${raw_paths[*]}")" | \
                      sed 's|^\./||' | \
                      sort -u
                    );
              else  configs_listing=();
            fi;

            ## Persist resolved configs to disk in one shot for downstream reuse
            search_configs="${TMP_DIR}/configs.list";
            printf "%s\n" "${configs_listing[@]}" > "${search_configs}";

      elif  [[ -n "${search_location}" ]]; then
            if [[ ! -d "${search_location}" ]]; then
              warning "Search location path does not exist: [ ${search_location} ]"
              newline
              return 5;
            fi;
            mapfile -t configs_listing < <(
              find "${search_location}" -type f 2>/dev/null
            );
    fi;

    #### -----------------------------------------------------------------------
    ## Cross-filtering IPs and Configs based on actual matches

    declare -a matched_ips=();
    declare -a matched_configs=();

    local matched=;
    for cfg in "${configs_listing[@]}"; do
      [[ ! -f "${cfg}" ]] && continue;
      matched=false;
      for ip in "${search_terms[@]}"; do
        if grep -qF "${ip}" "${cfg}"; then
          matched_configs+=( "${cfg}" );
          matched_ips+=( "${ip}" );
          matched=true;
        fi;
      done;
    done;

    #### -----------------------------------------------------------------------
    ## Deduplicate and sanitize search-patterns (e.g.: ips) and configs list
    readarray -t matched_ips < <(
      printf "%s\n" "${matched_ips[@]}" | \
      grep -v '^\s*$' | \
      sort -u
    );

    #### -----------------------------------------------------------------------
    ## Abort early if no valid IPs or configs matched
    if [[ ${#matched_ips[@]} -eq 0 ]]; then

            if [[ "${verbose}" == true ]]; then
              {
                warning "No matching IPs or valid configuration files were found.";
                if (( ${#search_terms[@]} == 0 )); then
                  warning "Matched-IPs yielded no Search Patterns to evaluate.";
                fi;
                newline;
                message "Skip processing Search Patterns â€” no valid correlation between IPs and configurations.";
              } >> "${target_logfile:-/dev/null}";
            fi;
            return 6;

      elif  [[ "${verbose}" == true ]]; then
              {
                message "Processed Patterns: [ ${#matched_ips[@]} ]";
                # newline;
                # for ip in "${search_terms[@]}"; do
                #   message "- ${ip}";
                # done | cat -n;
              } >> "${target_logfile:-/dev/null}";

    fi;

    #### -----------------------------------------------------------------------
    ## Deduplicate and sanitize Network Configurations (e.g.: devices)
    readarray -t configs_listing < <(
      printf "%s\n" "${matched_configs[@]}" | \
      grep -v '^\s*$' | \
      sort -u
    );

    #### -----------------------------------------------------------------------
    ## Abort early if no valid IPs or configs matched
    if [[ ${#configs_listing[@]} -eq 0 ]]; then

            if [[ "${verbose}" == true ]]; then
              {
                warning "No config files were retained after filtering.";
                if (( ${#configs_listing[@]} == 0 )); then
                  warning "Configs-Listing yielded no Network Configurations to evaluate.";
                fi;
                newline;
                message "Skip processing Network Configurations â€” no valid correlation between IPs and configurations.";
              } >> "${target_logfile:-/dev/null}";
            fi;
            return 6;

      elif  [[ "${verbose}" == true ]]; then
              {
                message "Identified Matches: [ ${#matched_configs[@]} ]";
                # newline;
                # for config in "${matched_configs[@]}"; do
                #   message "- ${config}";
                # done | cat -n;
              } >> "${target_logfile:-/dev/null}";

    fi;

    #### -----------------------------------------------------------------------
    ## Conditionally write .cache/ips.list only if there are matching IPs
    if (( ${#matched_ips[@]} > 0 )); then
            # if ! printf "%s\n" "${matched_ips[@]}" > "${active_ips_file}"; then
            if ! printf "%s\n" "${matched_ips[@]}" | \
                 sort -t . -k1,1n -k2,2n -k3,3n -k4,4n \
            > "${active_ips_file}"; then
                    {
                      warning "Failed to write validated IPs to: ${active_ips_file}";
                    } >> "${target_logfile:-/dev/null}";
                    return 7;
              else  search_pattern="${active_ips_file}";
            fi;
      else  ## Do not create the file â€” absence is an implicit signal of failure
            {
              warning "No valid IPs were found â€” skipping creation of: ${active_ips_file}";
              message "Please, check your search pattern or input files.";
              return 8;
            } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Persist filtered configs to .cache/configs.list â€” always runtime, never fallback
    if (( ${#configs_listing[@]} > 0 )); then
            if ! printf "%s\n" "${configs_listing[@]}" > "${active_configs_file}"; then
                    warning "Failed to write validated configs to: ${active_configs_file}";
                    return 9;
              else  search_configs="${active_configs_file}";
            fi;
      else  ## Do not create the file â€” absence is an implicit signal of failure
            {
              warning "No valid Configs were found â€” skipping creation of: ${active_configs_file}";
              message "Please, check your configurations or input files.";
              return 10;
            } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        newline;
        message "Validated List exported to: [ ${active_ips_file} ] = ${#matched_ips[@]}";
        message "Validated Configs saved to: [ ${active_configs_file} ] = ${#configs_listing[@]}";
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    local network_extract__script="network-extract";

    local network_extract__logfile="${TMP_DIR}/${network_extract__script}--${BASHPID}";
    :> "${network_extract__logfile}";

    local network_extract__console="${logs_location}/console/${network_extract__script}.console";
    :> "${network_extract__console}";

    declare -ga extract_jobs_pid=();
    declare -gA extract_jobs2cfg_mapping=();

    #### -----------------------------------------------------------------------
    # Loop through configs_listing array
    for target_config in "${configs_listing[@]}"; do
      [[ ! -f "${target_config}" ]] && continue;

      #### -----------------------------------------------------------------------
      set +e;
      detect_vendor "${target_config}";
      local vendor_code=${?};
      set -e;
      case "${vendor_code}" in
        1)  target_platform="fortinet";
            ;;
        2)  target_platform="cisco";
            ;;
        3)  target_platform="unknown";
            {
              warning "Unsupported configuration type: ${target_config}";
              newline 2;
            } >> "${target_logfile:-/dev/null}";
            return 11;
            ;;
        *)  target_platform="unknown";
            {
              warning "Unknown configuration type: ${target_config}";
              newline 2;
            } >> "${target_logfile:-/dev/null}";
            return 12;
            ;;
      esac;

      #### -----------------------------------------------------------------------
      if [[ "${verbose}" == true ]]; then
        {
          message "Source Config: [ ${target_config} ] ( ${target_platform} )";
        } >> "${target_logfile:-/dev/null}";
      fi;

      #### -----------------------------------------------------------------------
      local base_output="${extract_location%/}";

      if [[ -n "${search_location:-}" && "${search_location}" != false ]]; then
              rel_path="${target_config#${search_location%/}/}";
        else  rel_path="$( basename "${target_config}" )";
      fi;

      local target_output="${base_output}/${rel_path}";
      local output_dir="$( dirname "${target_output}" )";

      mkdir -p "${output_dir}" || {
        warning "Failed to create directory: ${output_dir}" >&2;
        newline;
        exit 0;
      };
      : > "${target_output}";

      #### -----------------------------------------------------------------------
      local logger_index="$( basename "${target_config}" )";

      declare -a execute=(
        ./scripts/${network_extract__script}.shell
        --search="${active_ips_file}"
        --config="${target_config}"
        --extract="${target_output}"
        --platform="${target_platform}"
        --logger="${network_extract__logfile}-${logger_index}.console"
      );
      [[ "${verbose}" == true ]] && execute+=( --verbose );

      #### -----------------------------------------------------------------------
      if [[ "${verbose}" == true ]]; then
        {
          message "Target Config: [ ${target_output} ]";
          newline;
          for item in "${execute[@]}"; do
            message "\t${item}";
          done;
          newline;
        } >> "${target_logfile:-/dev/null}";
      fi;

      #### -----------------------------------------------------------------------

      (
        $( which bash ) -x "${execute[@]}" \
        >> ${logs_location}/${network_extract__script}.log 2>&1 ;
      ) &

      job_pid=$!;
      extract_jobs_pid+=( "${job_pid}" );
      extract_jobs2cfg_mapping["${job_pid}"]="${logger_index}";

    done;

    #### -----------------------------------------------------------------------
    ## Wait for all network-extract jobs to complete
    while (( ${#extract_jobs_pid[@]} > 0 )); do
      valid_extract_jobs_pid=();
      for pid in "${extract_jobs_pid[@]}"; do
        if ! kill -0 "${pid}" 2>/dev/null; then
                ## Collecting none active backgroup jobs logs
                logger="${extract_jobs2cfg_mapping[${pid}]}"
          else  valid_extract_jobs_pid+=( "${pid}" );
        fi;
      done;
      extract_jobs_pid=( "${valid_extract_jobs_pid[@]}" );
      sleep "${delaying_factor}";
    done;

    #### -----------------------------------------------------------------------
    ## Collecting all background-jobs console outputs
    {
      for pid in "${!extract_jobs2cfg_mapping[@]}"; do
        logger="${extract_jobs2cfg_mapping[${pid}]}";
        console="${TMP_DIR}/${network_extract__logfile}-${logger}.console";
        [[ -s "${console}" ]] && cat "${console}";
      done;
    } >> "${network_extract__console}";

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        print_file "${network_extract__console:-/dev/null}";
      } >> "${actions_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Finalize .cache/configs.list with reduced config paths
    if [[ -d "${extract_location}" ]]; then
      mapfile -t extracted_configs < <(
        find "${extract_location}" -type f 2>/dev/null | sort -u
      );
      if (( ${#extracted_configs[@]} > 0 )); then
              printf "%s\n" "${extracted_configs[@]}" > "${active_configs_file}";
              if [[ "${verbose}" == true ]]; then
                {
                  message "Updated ${active_configs_file} with extracted configs: ${#extracted_configs[@]}";
                  newline;
                } >> "${target_logfile:-/dev/null}";
              fi;
        else  if [[ "${verbose}" == true ]]; then
                {
                  warning "No extracted configurations found in: ${extract_location}";
                  message "Please, check your extraction process.";
                } >> "${target_logfile:-/dev/null}";
              fi;
      fi;
    fi;

    return 0;
}; alias network-configs='main';

#------------------------------------------------------------------------------#

[[ -z "${script_name+x}" ]] && export script_name="${0}";

export logs_location="logs";
mkdir -p ${logs_location}/console 2>/dev/null || true;

script_filename="${BASH_SOURCE[0]##*/}";
script_filename="${script_filename%.*}";

#------------------------------------------------------------------------------#

if [[ ${#@} -eq 0 || "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  newline;
        main "${@}";
        result=${?}; exit ${result};
        ## newline; message "Done."; newline;
fi;

#------------------------------------------------------------------------------#
