+ local configs_matching__script=configs-matching
+ targets_jobs_pid=()
+ declare -ga targets_jobs_pid
+ targets_jobs2ips_mapping=()
+ declare -gA targets_jobs2ips_mapping
+ for ip_address in "${target_listing[@]}"
+ local report_path=reports/10.0.0.1
+ local configs_objects=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.list
+ :
+ [[ -d reports/10.0.0.1 ]]
+ for ext in "${file_extensions[@]}"
+ find reports/10.0.0.1 -type f -name '*.cfg'
+ for ext in "${file_extensions[@]}"
+ find reports/10.0.0.1 -type f -name '*.conf'
+ [[ ! -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.list ]]
+ local target_config=targets/10.0.0.1.json
+ local configs_targets__console=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1
+ local job_pid=1651
+ targets_jobs_pid+=("${job_pid}")
+ targets_jobs2ips_mapping["${job_pid}"]=10.0.0.1
+ ((  1 > 0  ))
+ valid_targets_jobs_pid=()
+ local valid_targets_jobs_pid
+ for pid in "${targets_jobs_pid[@]}"
+ kill -0 1651
+ valid_targets_jobs_pid+=("${pid}")
+ targets_jobs_pid=("${valid_targets_jobs_pid[@]}")
+ sleep 0.1
+ configs_targets --search=10.0.0.1 --source=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.list --target=targets/10.0.0.1.json --logger=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.console --verbose
+ ((  1 > 0  ))
+ valid_targets_jobs_pid=()
+ local valid_targets_jobs_pid
+ for pid in "${targets_jobs_pid[@]}"
+ kill -0 1651
+ valid_targets_jobs_pid+=("${pid}")
+ targets_jobs_pid=("${valid_targets_jobs_pid[@]}")
+ sleep 0.1
+ ((  1 > 0  ))
+ valid_targets_jobs_pid=()
+ local valid_targets_jobs_pid
+ for pid in "${targets_jobs_pid[@]}"
+ kill -0 1651
+ logger=10.0.0.1
+ targets_jobs_pid=("${valid_targets_jobs_pid[@]}")
+ sleep 0.1
+ ((  0 > 0  ))
+ [[ true == true ]]
+ message 'Completed background jobs for matched IPs (1):'
+ [[ -n Completed background jobs for matched IPs (1): ]]
+ local 'message=Completed background jobs for matched IPs (1):'
+ echo -e 'Completed background jobs for matched IPs (1):'
+ message -------------------------------------
+ [[ -n ------------------------------------- ]]
+ local message=-------------------------------------
+ echo -e -------------------------------------
+ message ' Index  | PID    | IP Address       |'
+ [[ -n  Index  | PID    | IP Address       | ]]
+ local 'message= Index  | PID    | IP Address       |'
+ echo -e ' Index  | PID    | IP Address       |'
+ message -------------------------------------
+ [[ -n ------------------------------------- ]]
+ local message=-------------------------------------
+ echo -e -------------------------------------
+ for pid in "${!targets_jobs2ips_mapping[@]}"
+ ip_address=10.0.0.1
+ cat -n
+ printf '%-6s | %-15s\n' 1651 10.0.0.1
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for pid in "${!targets_jobs2ips_mapping[@]}"
+ ip_address=10.0.0.1
+ target_config=targets/10.0.0.1.json
+ [[ -s targets/10.0.0.1.json ]]
+ [[ -f targets/10.0.0.1.json ]]
+ message 'Completed Configuration Targets (IP): targets/10.0.0.1.json'
+ [[ -n Completed Configuration Targets (IP): targets/10.0.0.1.json ]]
+ local 'message=Completed Configuration Targets (IP): targets/10.0.0.1.json'
+ echo -e 'Completed Configuration Targets (IP): targets/10.0.0.1.json'
+ jq -r . targets/10.0.0.1.json
+ return 0
logger|l)$ ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ IFS=' 	
'
+ [[ -z true ]]
+ [[ -z false ]]
+ [[ -z true ]]
+ [[ -z /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.console ]]
+ [[ -z /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.list ]]
+ [[ ! -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.z4fH2RWwOh/configs-targets--10.0.0.1.list ]]
+ site_device_map=()
+ declare -A site_device_map
+ local rel_path site device cfg_lines json_head json_spec
+ IFS=
+ read -r config_file
+ [[ ! -f reports/10.0.0.1/cisco/perimeter-fw1.cfg ]]
+ rel_path=cisco/perimeter-fw1.cfg
+ site=cisco
+ device=perimeter-fw1.cfg
+ [[ ! -d reports/10.0.0.1/cisco ]]
++ wc -l
++ tr -d ' '
+ cfg_lines=22
++ awk '
          BEGIN { in_json=0; depth=0; }
          {
            if (!in_json && $0 ~ /^[[:space:]]*{/) in_json=1;
            if (in_json) {
              print;
              depth += gsub(/{/, "{");
              depth -= gsub(/}/, "}");
              if (depth == 0) exit;
            }
          }
        ' reports/10.0.0.1/cisco/perimeter-fw1.cfg
+ json_head='{
  "vendor": "cisco",
  "model": "ASA",
  "version": "9.14(3)",
  "domain": "edge.dc.example.com",
  "hostname": "perimeter-fw1"
}'
+ echo '{
  "vendor": "cisco",
  "model": "ASA",
  "version": "9.14(3)",
  "domain": "edge.dc.example.com",
  "hostname": "perimeter-fw1"
}'
+ jq -e .
++ jq -n --arg file perimeter-fw1.cfg --argjson lines 22 --arg path .objects/perimeter-fw1.list --arg specs '{
  "vendor": "cisco",
  "model": "ASA",
  "version": "9.14(3)",
  "domain": "edge.dc.example.com",
  "hostname": "perimeter-fw1"
}' '{
            specs: ($specs | fromjson),
            config: {
              file: $file,
              lines: $lines,
              object: $path
            }
          }'
+ json_spec='{
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}'
+ site_device_map["${site}"]+='{
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}
'
+ IFS=
+ read -r config_file
+ [[ ! -f reports/10.0.0.1/fortinet/fg-branch-vpn-01.cfg ]]
+ rel_path=fortinet/fg-branch-vpn-01.cfg
+ site=fortinet
+ device=fg-branch-vpn-01.cfg
+ [[ ! -d reports/10.0.0.1/fortinet ]]
++ wc -l
++ tr -d ' '
+ cfg_lines=26
++ awk '
          BEGIN { in_json=0; depth=0; }
          {
            if (!in_json && $0 ~ /^[[:space:]]*{/) in_json=1;
            if (in_json) {
              print;
              depth += gsub(/{/, "{");
              depth -= gsub(/}/, "}");
              if (depth == 0) exit;
            }
          }
        ' reports/10.0.0.1/fortinet/fg-branch-vpn-01.cfg
+ json_head='{
  "vendor": "fortinet",
  "model": "FortiGate-60F",
  "version": "v7.2.5.F",
  "domain": "",
  "hostname": "fg-branch-vpn-01"
}'
+ echo '{
  "vendor": "fortinet",
  "model": "FortiGate-60F",
  "version": "v7.2.5.F",
  "domain": "",
  "hostname": "fg-branch-vpn-01"
}'
+ jq -e .
++ jq -n --arg file fg-branch-vpn-01.cfg --argjson lines 26 --arg path .objects/fg-branch-vpn-01.list --arg specs '{
  "vendor": "fortinet",
  "model": "FortiGate-60F",
  "version": "v7.2.5.F",
  "domain": "",
  "hostname": "fg-branch-vpn-01"
}' '{
            specs: ($specs | fromjson),
            config: {
              file: $file,
              lines: $lines,
              object: $path
            }
          }'
+ json_spec='{
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}'
+ site_device_map["${site}"]+='{
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}
'
+ IFS=
+ read -r config_file
+ [[ ! -f reports/10.0.0.1/misc/switch3.conf ]]
+ rel_path=misc/switch3.conf
+ site=misc
+ device=switch3.conf
+ [[ ! -d reports/10.0.0.1/misc ]]
++ wc -l
++ tr -d ' '
+ cfg_lines=16
++ awk '
          BEGIN { in_json=0; depth=0; }
          {
            if (!in_json && $0 ~ /^[[:space:]]*{/) in_json=1;
            if (in_json) {
              print;
              depth += gsub(/{/, "{");
              depth -= gsub(/}/, "}");
              if (depth == 0) exit;
            }
          }
        ' reports/10.0.0.1/misc/switch3.conf
+ json_head='{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}'
+ echo '{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}'
+ jq -e .
++ jq -n --arg file switch3.conf --argjson lines 16 --arg path .objects/switch3.conf.list --arg specs '{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}' '{
            specs: ($specs | fromjson),
            config: {
              file: $file,
              lines: $lines,
              object: $path
            }
          }'
+ json_spec='{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}'
+ site_device_map["${site}"]+='{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}
'
+ IFS=
+ read -r config_file
+ [[ ! -f reports/10.0.0.1/misc/switch1.conf ]]
+ rel_path=misc/switch1.conf
+ site=misc
+ device=switch1.conf
+ [[ ! -d reports/10.0.0.1/misc ]]
++ wc -l
++ tr -d ' '
+ cfg_lines=13
++ awk '
          BEGIN { in_json=0; depth=0; }
          {
            if (!in_json && $0 ~ /^[[:space:]]*{/) in_json=1;
            if (in_json) {
              print;
              depth += gsub(/{/, "{");
              depth -= gsub(/}/, "}");
              if (depth == 0) exit;
            }
          }
        ' reports/10.0.0.1/misc/switch1.conf
+ json_head='{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}'
+ echo '{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}'
+ jq -e .
++ jq -n --arg file switch1.conf --argjson lines 13 --arg path .objects/switch1.conf.list --arg specs '{
  "vendor": "cisco",
  "model": "",
  "version": "",
  "domain": "",
  "hostname": ""
}' '{
            specs: ($specs | fromjson),
            config: {
              file: $file,
              lines: $lines,
              object: $path
            }
          }'
+ json_spec='{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
}'
+ site_device_map["${site}"]+='{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
}
'
+ IFS=
+ read -r config_file
+ printf ' { "target": "%s", "locations": { ' 10.0.0.1
+ first=true
+ jq .
++ printf '%s\n' fortinet misc cisco
++ sort -u
+ for site in $(printf '%s\n' "${!site_device_map[@]}" | sort -u)
+ [[ -z {
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}
 ]]
+ true
+ first=false
+ printf ' "%s": { "devices": ' cisco
+ print '{
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}
'
+ jq -s .
+ [[ -n {
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}
 ]]
+ echo -en '{
  "specs": {
    "vendor": "cisco",
    "model": "ASA",
    "version": "9.14(3)",
    "domain": "edge.dc.example.com",
    "hostname": "perimeter-fw1"
  },
  "config": {
    "file": "perimeter-fw1.cfg",
    "lines": 22,
    "object": ".objects/perimeter-fw1.list"
  }
}
'
+ printf ' } '
+ for site in $(printf '%s\n' "${!site_device_map[@]}" | sort -u)
+ [[ -z {
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}
 ]]
+ false
+ printf ,
+ printf ' "%s": { "devices": ' fortinet
+ print '{
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}
'
+ jq -s .
+ [[ -n {
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}
 ]]
+ echo -en '{
  "specs": {
    "vendor": "fortinet",
    "model": "FortiGate-60F",
    "version": "v7.2.5.F",
    "domain": "",
    "hostname": "fg-branch-vpn-01"
  },
  "config": {
    "file": "fg-branch-vpn-01.cfg",
    "lines": 26,
    "object": ".objects/fg-branch-vpn-01.list"
  }
}
'
+ printf ' } '
+ for site in $(printf '%s\n' "${!site_device_map[@]}" | sort -u)
+ [[ -z {
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}
{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
}
 ]]
+ false
+ printf ,
+ printf ' "%s": { "devices": ' misc
+ print '{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}
{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
+ jq -s .
}
'
+ [[ -n {
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}
{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
}
 ]]
+ echo -en '{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch3.conf",
    "lines": 16,
    "object": ".objects/switch3.conf.list"
  }
}
{
  "specs": {
    "vendor": "cisco",
    "model": "",
    "version": "",
    "domain": "",
    "hostname": ""
  },
  "config": {
    "file": "switch1.conf",
    "lines": 13,
    "object": ".objects/switch1.conf.list"
  }
}
'
+ printf ' } '
+ printf ' } } '
+ return 0
