$ date && echo ;
$ rm -rf ./reports ./targets ./.cache ./.local 2>/dev/null && echo ;
$ bash -x ./scripts/parse-listings.shell --verbose --debug --classify --logs && echo ;
$ cat .local/jobs/10.0.0.1.job 2>/dev/null && echo ;
$ jq -r . ./reports/json/10.0.0.1.json 2>/dev/null ;

Fri May 16 19:14:07 MST 2025


+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
+ TMP_DIR=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzQ0ODA0NzYyMDY2OTAwMAo
++ divisor=MTc0NzQ0ODA0NzYyMDY2OTAwMAo
+ source ./scripts/tools-listings.shell
++ [[ -n '' ]]
++ readonly __TOOLS_LISTINGS_SOURCED=1
++ __TOOLS_LISTINGS_SOURCED=1
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 4 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(sites|s)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(sites|s)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(sites|s)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(sites|s)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z '' ]]
+ listing_filename=ips.list
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z '' ]]
+ target_sites=false
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
++ date '+%Y-%m-%d %H:%M:%S'
+ local 'start_time=2025-05-16 19:14:07'
+ SECONDS=0
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
+ sort
+ [[ true == true ]]
+ message 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ local 'message=Generated configs.list at .cache/configs.list'
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n false ]]
+ [[ false != \f\a\l\s\e ]]
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file .cache/configs.list
+ [[ -n .cache/configs.list ]]
+ local target_file=.cache/configs.list
+ [[ true == true ]]
+ [[ -f .cache/configs.list ]]
+ case "${target_file}" in
+ cat .cache/configs.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ export output_csv=reports/reports.csv
+ output_csv=reports/reports.csv
+ message target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ local message=target,site,device,object,entry,description,group
+ print target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ echo -en target,site,device,object,entry,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ [[ -z ips.list ]]
+ target_listing_raw=()
+ declare -a target_listing_raw
+ [[ -f ips.list ]]
+ mapfile -t target_listing_raw
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
+ target_listing=()
+ declare -a target_listing
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.0.1
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.0.1 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '0' '1')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ local 'segments=10 0 0 1'
+ local fixed_address=10.0.0.1
+ [[ -n '' ]]
+ [[ 10.0.0.1 != \1\0\.\0\.\0\.\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.1.2
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.1.2 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '1' '2')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ local 'segments=10 0 1 2'
+ local fixed_address=10.0.1.2
+ [[ -n '' ]]
+ [[ 10.0.1.2 != \1\0\.\0\.\1\.\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.2.3
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.2.3 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '2' '3')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 3
++ [[ -n 3 ]]
++ echo -en 3
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=3
+ [[ 3 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=3
+ local 'segments=10 0 2 3'
+ local fixed_address=10.0.2.3
+ [[ -n '' ]]
+ [[ 10.0.2.3 != \1\0\.\0\.\2\.\3 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=192 168 1 10'
+ local fixed_address=192.168.1.10
+ [[ -n '' ]]
+ [[ 192.168.1.10 != \1\9\2\.\1\6\8\.\1\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.11
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.11 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '11')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 11
++ [[ -n 11 ]]
++ echo -en 11
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=11
+ [[ 11 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=11
+ local 'segments=192 168 1 11'
+ local fixed_address=192.168.1.11
+ [[ -n '' ]]
+ [[ 192.168.1.11 != \1\9\2\.\1\6\8\.\1\.\1\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.2.12
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.2.12 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '2' '12')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 12
++ [[ -n 12 ]]
++ echo -en 12
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=12
+ [[ 12 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=12
+ local 'segments=192 168 2 12'
+ local fixed_address=192.168.2.12
+ [[ -n '' ]]
+ [[ 192.168.2.12 != \1\9\2\.\1\6\8\.\2\.\1\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.0.5
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.0.5 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '0' '5')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 5
++ [[ -n 5 ]]
++ echo -en 5
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=5
+ [[ 5 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=5
+ local 'segments=172 16 0 5'
+ local fixed_address=172.16.0.5
+ [[ -n '' ]]
+ [[ 172.16.0.5 != \1\7\2\.\1\6\.\0\.\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.1.6
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.1.6 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '1' '6')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 6
++ [[ -n 6 ]]
++ echo -en 6
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=6
+ [[ 6 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=6
+ local 'segments=172 16 1 6'
+ local fixed_address=172.16.1.6
+ [[ -n '' ]]
+ [[ 172.16.1.6 != \1\7\2\.\1\6\.\1\.\6 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.0.2.50
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.0.2.50 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '0' '2' '50')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 50
++ [[ -n 50 ]]
++ echo -en 50
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=50
+ [[ 50 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=50
+ local 'segments=192 0 2 50'
+ local fixed_address=192.0.2.50
+ [[ -n '' ]]
+ [[ 192.0.2.50 != \1\9\2\.\0\.\2\.\5\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=203.0.113.25
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 203.0.113.25 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('203' '0' '113' '25')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 203
++ [[ -n 203 ]]
++ echo -en 203
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=203
+ [[ 203 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=203
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 113
++ [[ -n 113 ]]
++ echo -en 113
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=113
+ [[ 113 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=113
+ for i in "${!segments[@]}"
++ print 25
++ [[ -n 25 ]]
++ echo -en 25
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=25
+ [[ 25 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=25
+ local 'segments=203 0 113 25'
+ local fixed_address=203.0.113.25
+ [[ -n '' ]]
+ [[ 203.0.113.25 != \2\0\3\.\0\.\1\1\3\.\2\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=198.51.100.75
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 198.51.100.75 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('198' '51' '100' '75')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 198
++ [[ -n 198 ]]
++ echo -en 198
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=198
+ [[ 198 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=198
+ for i in "${!segments[@]}"
++ print 51
++ [[ -n 51 ]]
++ echo -en 51
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=51
+ [[ 51 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=51
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 75
++ [[ -n 75 ]]
++ echo -en 75
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=75
+ [[ 75 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=75
+ local 'segments=198 51 100 75'
+ local fixed_address=198.51.100.75
+ [[ -n '' ]]
+ [[ 198.51.100.75 != \1\9\8\.\5\1\.\1\0\0\.\7\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.18.1.20
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.18.1.20 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '18' '1' '20')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 18
++ [[ -n 18 ]]
++ echo -en 18
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=18
+ [[ 18 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=18
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 20
++ [[ -n 20 ]]
++ echo -en 20
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=20
+ [[ 20 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=20
+ local 'segments=172 18 1 20'
+ local fixed_address=172.18.1.20
+ [[ -n '' ]]
+ [[ 172.18.1.20 != \1\7\2\.\1\8\.\1\.\2\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.10.10.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.10.10.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '10' '10' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=10 10 10 10'
+ local fixed_address=10.10.10.10
+ [[ -n '' ]]
+ [[ 10.10.10.10 != \1\0\.\1\0\.\1\0\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.100.100
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.100.100 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '100' '100')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ local 'segments=192 168 100 100'
+ local fixed_address=192.168.100.100
+ [[ -n '' ]]
+ [[ 192.168.100.100 != \1\9\2\.\1\6\8\.\1\0\0\.\1\0\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.31.255.254
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.31.255.254 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '31' '255' '254')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 31
++ [[ -n 31 ]]
++ echo -en 31
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=31
+ [[ 31 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=31
+ for i in "${!segments[@]}"
++ print 255
++ [[ -n 255 ]]
++ echo -en 255
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=255
+ [[ 255 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=255
+ for i in "${!segments[@]}"
++ print 254
++ [[ -n 254 ]]
++ echo -en 254
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=254
+ [[ 254 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=254
+ local 'segments=172 31 255 254'
+ local fixed_address=172.31.255.254
+ [[ -n '' ]]
+ [[ 172.31.255.254 != \1\7\2\.\3\1\.\2\5\5\.\2\5\4 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ [[ 15 -eq 0 ]]
+ mapfile -t site_folders
++ cut -d/ -f2 .cache/configs.list
++ sort -u
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print cisco,misc
++ [[ -n cisco,misc ]]
++ echo -en cisco,misc
+ message 'Site Folders: cisco,misc'
+ [[ -n Site Folders: cisco,misc ]]
+ local 'message=Site Folders: cisco,misc'
+ print 'Site Folders: cisco,misc'
+ [[ -n Site Folders: cisco,misc ]]
+ echo -en 'Site Folders: cisco,misc'
Site Folders: cisco,misc+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local batch_size=5
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS=' 	
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /cisco/ .cache/configs.list
++ printf '\0'
+ IFS=' 	
'
+ total_files=8
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ local 'message=[BATCH] Processing folder: [cisco]'
+ print '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ echo -en '[BATCH] Processing folder: [cisco]'
[BATCH] Processing folder: [cisco]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ local 'message=[BATCH] Found 8 config files'
+ print '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ echo -en '[BATCH] Found 8 config files'
[BATCH] Found 8 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:07Z
+ timestamp='[2025-05-17T02:14:07Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:07Z
+ printf '%s\n' '[2025-05-17T02:14:07Z] Flushed'
+ grep -qF '[2025-05-17T02:14:07Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747448047776905000 16183
+ export batch_id=MTc0NzQ0ODA0
+ batch_id=MTc0NzQ0ODA0
++ date +%s
+ batch_suffix=1747448047-26424
+ batch_configs_list=configs--MTc0NzQ0ODA0-1747448047-26424.list
+ BATCH_CONFIGS=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ export BATCH_CONFIGS
+ touch /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ range_first=1
+ range_last=5
+ message '[ MTc0NzQ0ODA0 ] Files 1 -> 5'
+ [[ -n [ MTc0NzQ0ODA0 ] Files 1 -> 5 ]]
+ local 'message=[ MTc0NzQ0ODA0 ] Files 1 -> 5'
+ print '[ MTc0NzQ0ODA0 ] Files 1 -> 5'
+ [[ -n [ MTc0NzQ0ODA0 ] Files 1 -> 5 ]]
+ echo -en '[ MTc0NzQ0ODA0 ] Files 1 -> 5'
[ MTc0NzQ0ODA0 ] Files 1 -> 5+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ basename /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local base=configs--MTc0NzQ0ODA0-1747448047-26424.list
++ dirname /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local parent=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzQ0ODA0-1747448047-26424.list
'
+ format_common+='Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzQ0ODA0-1747448047-26424.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzQ0ODA0-1747448047-26424.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
File: configs--MTc0NzQ0ODA0-1747448047-26424.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: 110 bytes
Blocks/Inode: 8 / 18465635
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 16 19:14:07 2025
Modify: May 16 19:14:07 2025
Change: May 16 19:14:07 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list]'
+ print 'Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list]'
Batch-Config file: [configs--MTc0NzQ0ODA0-1747448047-26424.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ case "${target_file}" in
+ cat /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ message '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list'
+ print '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list'
[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=57411
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ job_pids+=("${job_pid}")
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 57411)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 57411) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 57411)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=57417
+ job_pids+=("${job_pid}")
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ job_ip_map["$job_pid"]=10.0.1.2
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 57417)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 57417) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 57417)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ wc -l
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ job_pid=57425
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 57425)'
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 57425) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 57425)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_lines='      68'
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
++ tr -d ' '
+ config_lines='      43'
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw2.cfg
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ wc -l
+ job_pid=57439
+ job_pids+=("${job_pid}")
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ tr -d ' '
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 57439)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 57439) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 57439)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ match_count=3
+ site=cisco
+ device=fw1.cfg
++ print 192.168.1.11
++ tr -d '\r'
++ [[ -n 192.168.1.11 ]]
++ print '[]'
++ echo -en 192.168.1.11
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ match_count=3
+ site=cisco
+ config_lines='      55'
+ device=fw2.cfg
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[]'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw3.cfg'
++ [[ -n [] ]]
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg ]]
++ echo -en '[]'
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
++ tr -d ' '
++ wc -l
+ job_pid=57460
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 57460)'
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 57460) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 57460)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
++ print 192.168.2.12
+ config_lines='      68'
++ tr -d '\r'
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
+ match_count=3
+ site=cisco
+ device=fw3.cfg
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ print '[]'
++ wc -l
++ [[ -n [] ]]
++ echo -en '[]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
++ tr -d ' '
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ config_lines='      40'
+ job_pid=57478
+ job_pids+=("${job_pid}")
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ wc -l
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 57478)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 57478) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 57478)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw5.cfg
++ wc -l
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_lines='      29'
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw1.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ print '[]'
++ [[ -n [] ]]
+ config_lines='      43'
++ echo -en '[]'
++ tr -d ' '
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ local matched_files=configs/cisco/fw5.cfg
+ IFS=
+ read -r config_file
+ [[ -n configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
++ tr -d ' '
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
+ ip_cleaned=172.16.0.5
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ match_count=3
+ target_file=targets/172.16.0.5.json
+ site=cisco
+ device=fw5.cfg
++ jq '{ configs: . }'
+ match_count=1
+ site=cisco
+ device=fw4.cfg
+ job_pid=57506
+ job_pids+=("${job_pid}")
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
+ local ip_addr=172.16.0.5
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ local target_file=targets/172.16.0.5.json
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 57506)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 57506) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 57506)'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ newline
+ config_lines='      40'
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=cisco
+ device=fw2.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ wc -l
++ print 172.16.1.6
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw5.cfg
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ wc -l
++ tr -d ' '
++ print '[]'
++ [[ -n [] ]]
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ echo -en '[]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
+ site=cisco
+ device=fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ config_lines='      55'
+ IFS=
+ read -r config_file
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
]'
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ jq '{ configs: . }'
+ config_file=cisco/fw3.cfg
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw3.cfg
+ job_pid=57533
++ print '[]'
++ wc -l
++ [[ -n [] ]]
++ echo -en '[]'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ tr -d ' '
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
++ print '[
  {
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "dev+ job_pids+=("${job_pid}")
ice": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ wc -l
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 57533)'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 57533) ]]
    "count": 1
  }
]'
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 57533)'
+ IFS=
+ read -r config_file
+ newline
+ config_file=cisco/fw4.cfg
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ return 0
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 68,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 3
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
+ site=cisco
+ device=fw3.cfg
+ config_lines='      55'
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  }
]'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_file=cisco/fw2.cfg
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
]'
+ config_lines='      29'
++ wc -l
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
++ jq '{ configs: . }'
+ ip_cleaned=192.0.2.50
++ wc -l
+ target_file=targets/192.0.2.50.json
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw4.cfg
+ job_pid=57568
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 57568)'
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
++ tr -d ' '
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 57568) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 57568)'
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
++ echo -en 203.0.113.25
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
++ tr -d '\r'
+ config_lines='      43'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 1
    }
  ]
}'
+ jq -r
++ wc -l
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw2.cfg
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw4.cfg
+ local matched_files=configs/cisco/fw1.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ match_count=3
+ IFS=
+ read -r config_file
+ site=cisco
+ device=fw3.cfg
+ ip_cleaned=203.0.113.25
+ config_file=cisco/fw1.cfg
+ target_file=targets/203.0.113.25.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
++ jq '{ configs: . }'
+ job_pid=57585
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=203.0.113.25
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print '[]'
++ [[ -n [] ]]
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 57585)'
++ echo -en '[]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 57585) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 57585)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print 198.51.100.75
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ return 0
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ config_lines='      68'
++ wc -l
+ config_json='[
+ final_json='{
  {
  "configs": [
    "config": {
    {
      "site": "cisco",
      "config": {
      "device": "fw2.cfg"
        "site": "cisco",
    },
        "device": "fw1.cfg"
    "lines": 43,
      },
      "lines": 68,
    "count": 1
      "count": 1
  },
    },
  {
    {
    "config": {
      "config": {
      "site": "cisco",
        "site": "cisco",
      "device": "fw4.cfg"
        "device": "fw3.cfg"
    },
      },
      "lines": 55,
    "lines": 29,
      "count": 1
    "count": 1
    }
  }
  ]
]'
}'
+ jq -r
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
++ tr -d ' '
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [
  {
++ jq '{ configs: . }'
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ job_pid=57610
+ job_pids+=("${job_pid}")
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 57610)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 57610) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 57610)'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ jq '{ configs: . }'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ newline
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
+ match_count=4
+ config_lines='      68'
+ site=cisco
+ device=fw1.cfg
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
++ wc -l
++ print 172.18.1.20
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
+ return 0
++ tr -d '\r'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
++ wc -l
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
++ tr -d ' '
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 4 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
+ config_lines='      40'
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_pid=57633
+ config_lines='      43'
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=172.18.1.20
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw5.cfg
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 57633)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 57633) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 57633)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=5
++ tr -d ' '
+ site=cisco
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ device=fw1.cfg
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw2.cfg
+ return 0
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 4
  }
]'
+ IFS=
+ read -r config_file
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ print '[]'
++ [[ -n [] ]]
++ tr -d '\r'
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 4
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 4
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 4
  }
]'
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw4.cfg
+ [[ -n configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ wc -l
+ match_count=5
+ site=cisco
+ device=fw5.cfg
+ match_count=3
+ site=cisco
+ device=fw2.cfg
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ job_pid=57657
+ job_pids+=("${job_pid}")
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ job_ip_map["$job_pid"]=10.10.10.10
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 57657)'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 57657) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 57657)'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 68,
      "count": 4
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ config_lines='      29'
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ wc -l
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
+ local 'matched_files=configs/cisco/fw1.cfg
  {
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg'
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ IFS=
+ read -r config_file
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
++ wc -l
+ config_lines='      43'
+ job_pid=57675
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 57675)'
+ config_file=cisco/fw5.cfg
++ jq '{ configs: . }'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 57675) ]]
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
] ]]
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
++ wc -l
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 57675)'
+ match_count=2
+ return 0
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw2.cfg
+ site=cisco
+ device=fw4.cfg
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ tr -d ' '
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print 172.31.255.254
++ tr -d '\r'
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
+ config_lines='      68'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_lines='      40'
+ config_file=cisco/fw1.cfg
+ match_count=3
+ site=cisco
+ device=fw2.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg
+ final_json='{
  "configs": [
    {
++ wc -l
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
++ wc -l
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 5
    }
  ]
}'
+ jq -r
++ tr -d ' '
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  }
]'
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw5.cfg
+ job_pid=57704
++ wc -l
++ tr -d ' '
+ job_pids+=("${job_pid}")
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA0-1747448047-26424.list
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 57704)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 57704) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 57704)'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57411
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 57411)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 57411) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 57411)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57417
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 57417)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 57417) ]]
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 57417)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57425
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 57425)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 57425) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 57425)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57439
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 57439)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 57439) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 57439)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57460
+ ip_address=192.168.1.11
+ config_lines='      68'
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 57460)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 57460) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 57460)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57478
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 57478)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 57478) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 57478)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57506
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 57506)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 57506) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 57506)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57533
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57568
+ ip_address=192.0.2.50
+ match_count=3
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 57568)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 57568) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 57568)'
+ site=cisco
+ device=fw1.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57585
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57610
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57633
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57657
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57675
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57704
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ tr -d ' '
+ match_count=2
+ site=cisco
+ device=fw5.cfg
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ true
+ config_file=cisco/fw3.cfg
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ match_count=3
+ site=cisco
+ device=fw1.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      68' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
+ config_lines='      55'
++ wc -l
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      55'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ return 0
++ jq '{ configs: . }'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
++ wc -l
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
++ wc -l
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw3.cfg
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ config_lines='      43'
+ match_count=5
+ site=cisco
+ device=fw3.cfg
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 2
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
++ [[ -n [
++ echo -en '[
  {
  {
    "config": {
    "config": {
      "site": "cisco",
      "site": "cisco",
      "device": "fw1.cfg"
      "device": "fw1.cfg"
    },
    },
    "lines": 68,
    "lines": 68,
    "count": 3
    "count": 5
  }
  },
] ]]
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
++ echo -en '[
]'
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ jq '{ configs: . }'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ [[ -n \n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ return 0
+ config_lines='      29'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 68,
      "count": 5
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ wc -l
++ tr -d ' '
+ match_count=2
+ site=cisco
+ device=fw4.cfg
+ config_lines='      29'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw4.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ wc -l
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ match_count=1
+ site=cisco
+ device=fw4.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
++ jq '{ configs: . }'
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
+ final_json='{
    "lines": 68,
  "configs": [
    "count": 3
    {
  },
      "config": {
  {
        "site": "cisco",
    "config": {
        "device": "fw1.cfg"
      "site": "cisco",
      },
      "device": "fw2.cfg"
      "lines": 68,
    },
      "count": 3
    "lines": 43,
    },
    "count": 1
    {
  },
      "config": {
  {
        "site": "cisco",
    "config": {
        "device": "fw3.cfg"
      "site": "cisco",
      },
      "device": "fw4.cfg"
      "lines": 55,
    },
      "count": 5
    "lines": 29,
    },
    "count": 1
    {
  }
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
]'
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 68,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 68,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ ((  7 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57533
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 57533)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 57533) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 57533)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57585
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 57585)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 57585) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 57585)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57610
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 57610)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 57610) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 57610)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57633
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 57633)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 57633) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 57633)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57657
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 57657)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 57657) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 57657)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57675
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 57675)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 57675) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 57675)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57704
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 57704)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 57704) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 57704)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ local total_requested=15
+ local total_mapped=14
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    14'
+ [[ -n Total IPs mapped:    14 ]]
+ local 'message=Total IPs mapped:    14'
+ print 'Total IPs mapped:    14'
+ [[ -n Total IPs mapped:    14 ]]
+ echo -en 'Total IPs mapped:    14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        1'
+ [[ -n \nUnmapped IPs:        1 ]]
+ local 'message=\nUnmapped IPs:        1'
+ print '\nUnmapped IPs:        1'
+ [[ -n \nUnmapped IPs:        1 ]]
+ echo -en '\nUnmapped IPs:        1'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ message '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ local 'message=  - 172.31.255.254'
+ print '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ echo -en '  - 172.31.255.254'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=14
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ parse_configs 10.0.0.1 01
+ job_pid=57909
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 57909)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 57909) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 57909)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 2
+ padded_index=02
+ job_pid=57913
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 57913)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 57913) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 57913)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 3
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=03
+ job_pid=57918
+ parse_configs 10.0.2.3 03
+ job_pids+=("${job_pid}")
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 57918)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 57918) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 57918)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 4
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ padded_index=04
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57923
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ parse_configs 192.168.1.10 04
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 57923)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 57923) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 57923)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 5
+ padded_index=05
+ job_pid=57927
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 57927)'
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 192.168.1.11 05
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 57927) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 57927)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 6
+ padded_index=06
+ parse_configs 192.168.2.12 06
+ job_pid=57933
+ job_pids+=("${job_pid}")
+ local ip_addr=192.168.2.12
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 57933)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 57933) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 57933)'
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 7
+ padded_index=07
+ job_pid=57940
+ job_pids+=("${job_pid}")
+ parse_configs 172.16.0.5 07
+ local ip_addr=172.16.0.5
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 57940)'
++ IFS=,
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 57940) ]]
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 57940)'
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ newline
+ local count=1
+ [[ true == true ]]
+ (( i = 0 ))
+ execute+=(--classify)
+ (( i < count ))
+ echo

+ [[ false == true ]]
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ ((  ip_index < total_ips  ))
+ execute+=(--debug)
+ [[ true == true ]]
+ ip_addr=172.16.1.6
+ mkdir -p .local/jobs .local/errors
++ printf %02d 8
+ padded_index=08
+ parse_configs 172.16.1.6 08
+ local ip_addr=172.16.1.6
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pid=57947
+ job_pids+=("${job_pid}")
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 57947)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 57947) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 57947)'
+ newline
+ local count=1
+ (( i = 0 ))
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 9
+ padded_index=09
+ job_pid=57954
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 57954)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 57954) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 57954)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
+ parse_configs 192.0.2.50 09
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=10
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=57967
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 57967)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 57967) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 57967)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
+ parse_configs 203.0.113.25 10
+ local ip_addr=203.0.113.25
++ printf %02d 11
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ padded_index=11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ job_pid=57974
+ job_pids+=("${job_pid}")
+ [[ true == true ]]
+ parse_configs 198.51.100.75 11
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ local ip_addr=198.51.100.75
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 57974)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 57974) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 57974)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 12
+ padded_index=12
+ parse_configs 172.18.1.20 12
+ local ip_addr=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57981
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 57981)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 57981) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 57981)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ IFS=,
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
++ print cfg,conf,cnf
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 13
+ padded_index=13
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=58002
+ job_pids+=("${job_pid}")
+ parse_configs 10.10.10.10 13
+ local ip_addr=10.10.10.10
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 58002)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 58002) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 58002)'
++ IFS=,
+ newline
+ local count=1
+ (( i = 0 ))
++ print cfg,conf,cnf
+ (( i < count ))
+ echo
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ ip_addr=192.168.100.100
++ printf %02d 14
+ padded_index=14
+ job_pid=58015
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 58015)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 58015) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 58015)'
+ newline
+ local count=1
+ (( i = 0 ))
+ parse_configs 192.168.100.100 14
+ local ip_addr=192.168.100.100
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57909
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57913
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57918
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57923
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57927
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57933
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57940
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57947
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57954
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57967
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57974
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57981
+ valid_+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 58002
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 58015
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ local status=0
+ print '\n[DONE] IP: 192.168.1.10'
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57909
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57913
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57918
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 57918)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 57918) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 57918)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57923
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 57923)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 57923) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 57923)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57927
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 57927)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 57927) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 57927)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57933
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 57933)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 57933) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 57933)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57940
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 57940)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 57940) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 57940)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57947
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57954
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57967
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57974
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57981
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 57981)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 57981) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 57981)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 58002
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 58015
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ ((  8 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57909
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 57909)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 57909) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 57909)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57913
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 57913)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 57913) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 57913)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57947
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 57947)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 57947) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 57947)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57954
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 57954)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 57954) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 57954)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57967
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 57967)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 57967) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 57967)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57974
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 57974)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 57974) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 57974)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 58002
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 58002)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 58002) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 58002)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 58015
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 58015)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 58015) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 58015)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ generate_csvoutput
+ local json_dir=reports/json
+ [[ ! -d reports/json ]]
+ find reports/json -type f -name '*.json'
+ sort
reports/json/10.0.0.1.json
reports/json/10.0.1.2.json
reports/json/10.0.2.3.json
reports/json/10.10.10.10.json
reports/json/172.16.0.5.json
reports/json/172.16.1.6.json
reports/json/172.18.1.20.json
reports/json/192.0.2.50.json
reports/json/192.168.1.10.json
reports/json/192.168.1.11.json
reports/json/192.168.100.100.json
reports/json/192.168.2.12.json
reports/json/198.51.100.75.json
reports/json/203.0.113.25.json
+ find reports/json -type f -name '*.json'
+ sort
+ read -r json
+ message 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ local 'message=Processing reports/json/10.0.0.1.json'
+ print 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ echo -en 'Processing reports/json/10.0.0.1.json'
Processing reports/json/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.0.1.json
+ read -r json
+ message 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ local 'message=Processing reports/json/10.0.1.2.json'
+ print 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ echo -en 'Processing reports/json/10.0.1.2.json'
Processing reports/json/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.1.2.json
+ read -r json
+ message 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ local 'message=Processing reports/json/10.0.2.3.json'
+ print 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ echo -en 'Processing reports/json/10.0.2.3.json'
Processing reports/json/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.2.3.json
+ read -r json
+ message 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ local 'message=Processing reports/json/10.10.10.10.json'
+ print 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ echo -en 'Processing reports/json/10.10.10.10.json'
Processing reports/json/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.10.10.10.json
+ read -r json
+ message 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ local 'message=Processing reports/json/172.16.0.5.json'
+ print 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ echo -en 'Processing reports/json/172.16.0.5.json'
Processing reports/json/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.0.5.json
+ read -r json
+ message 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ local 'message=Processing reports/json/172.16.1.6.json'
+ print 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ echo -en 'Processing reports/json/172.16.1.6.json'
Processing reports/json/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.1.6.json
+ read -r json
+ message 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ local 'message=Processing reports/json/172.18.1.20.json'
+ print 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ echo -en 'Processing reports/json/172.18.1.20.json'
Processing reports/json/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.18.1.20.json
+ read -r json
+ message 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ local 'message=Processing reports/json/192.0.2.50.json'
+ print 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ echo -en 'Processing reports/json/192.0.2.50.json'
Processing reports/json/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.0.2.50.json
+ read -r json
+ message 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ local 'message=Processing reports/json/192.168.1.10.json'
+ print 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ echo -en 'Processing reports/json/192.168.1.10.json'
Processing reports/json/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.10.json
+ read -r json
+ message 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ local 'message=Processing reports/json/192.168.1.11.json'
+ print 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ echo -en 'Processing reports/json/192.168.1.11.json'
Processing reports/json/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.11.json
+ read -r json
+ message 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ local 'message=Processing reports/json/192.168.100.100.json'
+ print 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ echo -en 'Processing reports/json/192.168.100.100.json'
Processing reports/json/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.100.100.json
+ read -r json
+ message 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ local 'message=Processing reports/json/192.168.2.12.json'
+ print 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ echo -en 'Processing reports/json/192.168.2.12.json'
Processing reports/json/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.2.12.json
+ read -r json
+ message 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ local 'message=Processing reports/json/198.51.100.75.json'
+ print 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ echo -en 'Processing reports/json/198.51.100.75.json'
Processing reports/json/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/198.51.100.75.json
+ read -r json
+ message 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ local 'message=Processing reports/json/203.0.113.25.json'
+ print 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ echo -en 'Processing reports/json/203.0.113.25.json'
Processing reports/json/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/203.0.113.25.json
+ read -r json
+ return 0
+ [[ 5 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747448050600660000 26747
+ export batch_id=MTc0NzQ0ODA1
+ batch_id=MTc0NzQ0ODA1
++ date +%s
+ batch_suffix=1747448050-31872
+ batch_configs_list=configs--MTc0NzQ0ODA1-1747448050-31872.list
+ BATCH_CONFIGS=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ export BATCH_CONFIGS
+ touch /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ printf '%s\n' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ range_first=6
+ range_last=8
+ message '[ MTc0NzQ0ODA1 ] Files 6 -> 8'
+ [[ -n [ MTc0NzQ0ODA1 ] Files 6 -> 8 ]]
+ local 'message=[ MTc0NzQ0ODA1 ] Files 6 -> 8'
+ print '[ MTc0NzQ0ODA1 ] Files 6 -> 8'
+ [[ -n [ MTc0NzQ0ODA1 ] Files 6 -> 8 ]]
+ echo -en '[ MTc0NzQ0ODA1 ] Files 6 -> 8'
[ MTc0NzQ0ODA1 ] Files 6 -> 8+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
++ basename /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local base=configs--MTc0NzQ0ODA1-1747448050-31872.list
++ dirname /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local parent=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzQ0ODA1-1747448050-31872.list
'
+ format_common+='Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzQ0ODA1-1747448050-31872.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzQ0ODA1-1747448050-31872.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
File: configs--MTc0NzQ0ODA1-1747448050-31872.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: 66 bytes
Blocks/Inode: 8 / 18465757
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 16 19:14:10 2025
Modify: May 16 19:14:10 2025
Change: May 16 19:14:10 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list]'
+ print 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list]'
Batch-Config file: [configs--MTc0NzQ0ODA1-1747448050-31872.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ case "${target_file}" in
+ cat /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ message '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list'
+ print '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list'
[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=61689
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 61689)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 61689) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 61689)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=61695
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ config_file=cisco/fw8.cfg
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 61695)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 61695) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 61695)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      21'
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ job_pid=61705
++ wc -l
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw8.cfg
++ wc -l
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 61705)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 61705) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 61705)'
++ tr -d ' '
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ config_lines='      26'
+ match_count=1
+ site=cisco
+ device=fw8.cfg
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg
++ wc -l
++ tr -d ' '
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ job_pid=61722
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 61722)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 61722) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 61722)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
+ site=cisco
+ device=fw6.cfg
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ tr -d '\r'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      31'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ tr -d ' '
++ wc -l
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ job_pid=61742
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 61742)'
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 61742) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 61742)'
+ config_json='[
  {
    "config": {
+ newline
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_lines='      26'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ print 192.168.2.12
+ match_count=1
++ [[ -n 192.168.2.12 ]]
+ site=cisco
++ echo -en 192.168.2.12
+ device=fw7.cfg
++ tr -d '\r'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg
++ true
++ wc -l
++ tr -d ' '
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ job_pid=61759
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 61759)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 61759) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 61759)'
+ final_json='{
  "configs": [
    {
+ newline
+ match_count=2
+ local count=1
      "config": {
+ (( i = 0 ))
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
+ (( i < count ))
+ site=cisco
+ echo

+ (( i++ ))
+ (( i < count ))
    }
+ device=fw6.cfg
  ]
}'
+ for ip_addr in "${target_listing[@]}"
+ jq -r
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print '[]'
++ [[ -n [] ]]
++ print 172.16.0.5
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ echo -en '[]'
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ ip_cleaned=172.16.0.5
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ target_file=targets/172.16.0.5.json
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ return 0
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ job_pid=61772
+ read -r config_file
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 61772)'
+ config_file=cisco/fw8.cfg
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 61772) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 61772)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=172.16.0.5
++ wc -l
+ newline
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ jq '{ configs: . }'
++ tr -d '\r'
+ config_lines='      21'
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw8.cfg
+ ip_cleaned=172.16.1.6
++ wc -l
+ target_file=targets/172.16.1.6.json
++ wc -l
++ tr -d ' '
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ job_pid=61789
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 61789)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 61789) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 61789)'
+ newline
+ local count=1
+ (( i = 0 ))
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    }
  ]
}'
+ jq -r
+ match_count=1
+ site=cisco
+ device=fw8.cfg
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
+ config_lines='      21'
++ tr -d '\r'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ true
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw8.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ return 0
++ tr -d ' '
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
+ job_pid=61804
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 61804)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 61804) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 61804)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=2
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ site=cisco
+ device=fw8.cfg
++ print '[]'
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ [[ -n [] ]]
++ echo -en '[]'
++ tr -d '\r'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
++ wc -l
+ job_pid=61817
+ job_pids+=("${job_pid}")
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 61817)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 61817) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 61817)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ config_lines='      31'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
++ jq '{ configs: . }'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ tr -d ' '
+ local 'matched_files=configs/cisco/fw6.cfg
configs/cisco/fw8.cfg'
+ [[ -n configs/cisco/fw6.cfg
configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
++ wc -l
+ job_pid=61833
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 61833)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 61833) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 61833)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 2
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ match_count=3
+ return 0
+ site=cisco
+ device=fw7.cfg
+ config_lines='      26'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg
++ true
++ wc -l
++ tr -d ' '
+ job_pid=61847
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=172.18.1.20
+ job_pids+=("${job_pid}")
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 61847)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 61847) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 61847)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ match_count=2
+ site=cisco
+ device=fw6.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ true
+ local matched_files=
++ print '[]'
+ [[ -n '' ]]
+ return 0
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
]'
++ jq '{ configs: . }'
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ job_pid=61860
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 61860)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 61860) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 61860)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local ip_addr=10.10.10.10
+ echo

+ (( i++ ))
+ (( i < count ))
+ local target_file=targets/10.10.10.10.json
+ for ip_addr in "${target_listing[@]}"
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 3
    }
  ]
}'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ jq -r
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
++ wc -l
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ ip_cleaned=192.168.100.100
+ IFS=
+ read -r config_file
+ target_file=targets/192.168.100.100.json
+ config_file=cisco/fw6.cfg
+ job_pid=61869
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
++ wc -l
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 61869)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 61869) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 61869)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_lines='      21'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw8.cfg
++ wc -l
+ config_lines='      26'
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ return 0
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg
++ tr -d ' '
++ wc -l
++ wc -l
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448050-31872.list
+ match_count=1
+ site=cisco
+ job_pid=61887
+ device=fw8.cfg
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 61887)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 61887) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 61887)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ for pid in "${job_pids[@]}"
+ kill -0 61689
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 61689)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 61689) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 61689)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61695
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 61695)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 61695) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 61695)'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61705
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 61705)'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 61705) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 61705)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61722
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 61722)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 61722) ]]
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 61722)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61742
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 61742)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 61742) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 61742)'
+ newline
+ config_lines='      31'
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61759
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 61759)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 61759) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 61759)'
+ newline
+ local count=1
+ match_count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61772
+ site=cisco
+ device=fw6.cfg
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 61772)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 61772) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 61772)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61789
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 61789)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 61789) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 61789)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61804
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 61804)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 61804) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 61804)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61817
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 61833
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 61833)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 61833) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 61833)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61847
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 61847)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 61847) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 61847)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61860
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 61869
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 61887
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ tr -d ' '
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
++ wc -l
+ match_count=2
+ site=cisco
+ device=fw7.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ config_lines='      31'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
+ match_count=1
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
+ site=cisco
+ device=fw7.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
++ jq '{ configs: . }'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
    }
  ]
}'
+ jq -r
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 2
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ jq '{ configs: . }'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 61817
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 61817)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 61817) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 61817)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61860
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 61860)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 61860) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 61860)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61869
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 61869)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 61869) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 61869)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 61887
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 61887)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 61887) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 61887)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ local total_requested=15
+ local total_mapped=29
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    29'
+ [[ -n Total IPs mapped:    29 ]]
+ local 'message=Total IPs mapped:    29'
+ print 'Total IPs mapped:    29'
+ [[ -n Total IPs mapped:    29 ]]
+ echo -en 'Total IPs mapped:    29'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        -14'
+ [[ -n \nUnmapped IPs:        -14 ]]
+ local 'message=\nUnmapped IPs:        -14'
+ print '\nUnmapped IPs:        -14'
+ [[ -n \nUnmapped IPs:        -14 ]]
+ echo -en '\nUnmapped IPs:        -14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=29
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=62040
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 62040)'
+ parse_configs 10.0.0.1 01
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 62040) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 62040)'
+ local ip_addr=10.0.0.1
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ local padded_index=01
+ (( i++ ))
+ (( i < count ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ padded_index=02
+ mkdir -p .local/jobs .local/errors
+ job_pid=62044
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 62044)'
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 62044) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 62044)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 3
+ padded_index=03
+ logfile=.local/jobs/10.0.0.1.job
+ job_pid=62048
+ [[ true == true ]]
+ job_pids+=("${job_pid}")
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_ip_map["$job_pid"]=10.0.2.3
+ parse_configs 10.0.2.3 03
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 62048)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 62048) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 62048)'
++ IFS=,
++ print cfg,conf,cnf
+ newline
++ [[ -n cfg,conf,cnf ]]
+ local count=1
+ (( i = 0 ))
++ echo -en cfg,conf,cnf
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 4
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ padded_index=04
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62053
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 62053)'
+ parse_configs 192.168.1.10 04
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 62053) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 62053)'
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=05
+ job_pid=62059
+ parse_configs 192.168.1.11 05
+ local ip_addr=192.168.1.11
+ job_pids+=("${job_pid}")
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 62059)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 62059) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 62059)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 6
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=06
+ job_pid=62064
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ parse_configs 192.168.2.12 06
+ local ip_addr=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 62064)'
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 62064) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 62064)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 7
+ padded_index=07
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62068
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 62068)'
+ parse_configs 172.16.0.5 07
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 62068) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 62068)'
+ local ip_addr=172.16.0.5
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
++ printf %02d 8
+ [[ false == true ]]
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=08
+ job_pid=62076
+ parse_configs 172.16.1.6 08
+ local ip_addr=172.16.1.6
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 62076)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 62076) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 62076)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 9
+ padded_index=09
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62082
+ job_pids+=("${job_pid}")
+ parse_configs 192.0.2.50 09
+ job_ip_map["$job_pid"]=192.0.2.50
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 62082)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 62082) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 62082)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 10
+ padded_index=10
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 203.0.113.25 10
+ local ip_addr=203.0.113.25
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pid=62089
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 62089)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 62089) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 62089)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 11
+ padded_index=11
+ parse_configs 198.51.100.75 11
+ local ip_addr=198.51.100.75
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pid=62099
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 62099)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 62099) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 62099)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 12
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=12
+ job_pid=62114
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ parse_configs 172.18.1.20 12
+ local ip_addr=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 62114)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 62114) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 62114)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 13
+ padded_index=13
+ job_pid=62124
+ parse_configs 10.10.10.10 13
+ local ip_addr=10.10.10.10
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 62124)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 62124) ]]
+ logfile=.local/jobs/172.18.1.20.job
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 62124)'
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 14
+ padded_index=14
+ job_pid=62151
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 62151)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 62151) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 62151)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 15
+ parse_configs 192.168.100.100 14
+ local ip_addr=192.168.100.100
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=15
+ job_pid=62161
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 62161)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 62161) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 62161)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
+ parse_configs 10.0.0.1 15
+ local ip_addr=10.0.0.1
+ local padded_index=15
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 16
+ padded_index=16
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62182
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 62182)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 62182) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 62182)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ parse_configs 10.0.1.2 16
+ local ip_addr=10.0.1.2
+ local padded_index=16
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 17
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=17
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=62193
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 62193)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 62193) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 62193)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
+ parse_configs 10.0.2.3 17
+ local ip_addr=10.0.2.3
+ local padded_index=17
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 18
+ padded_index=18
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=62206
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 62206)'
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=15 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 192.168.1.10 18
+ local ip_addr=192.168.1.10
+ local padded_index=18
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=16 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 62206) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 62206)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 19
+ padded_index=19
+ job_pid=62236
+ job_pids+=("${job_pid}")
+ parse_configs 192.168.1.11 19
+ local ip_addr=192.168.1.11
+ local padded_index=19
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=17 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 62236)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 62236) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 62236)'
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ newline
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=18 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ printf %02d 20
+ padded_index=20
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=19 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62272
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 62272)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 62272) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 62272)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
+ parse_configs 192.168.2.12 20
+ local ip_addr=192.168.2.12
+ local padded_index=20
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 21
+ padded_index=21
+ job_pid=62337
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 62337)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 62337) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 62337)'
+ parse_configs 172.16.0.5 21
+ local ip_addr=172.16.0.5
+ local padded_index=21
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=20 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 22
+ padded_index=22
+ job_pid=62366
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 62366)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 62366) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 62366)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ parse_configs 172.16.1.6 22
+ local ip_addr=172.16.1.6
+ local padded_index=22
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 23
+ padded_index=23
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ job_pid=62384
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 62384)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 62384) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 62384)'
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ mkdir -p .local/jobs .local/errors
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ parse_configs 192.0.2.50 23
+ local ip_addr=192.0.2.50
+ local padded_index=23
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=203.0.113.25
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=21 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 24
+ padded_index=24
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=22 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=62429
+ job_pids+=("${job_pid}")
+ parse_configs 203.0.113.25 24
+ local ip_addr=203.0.113.25
+ local padded_index=24
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 62429)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 62429) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 62429)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=23 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 25
+ padded_index=25
+ job_pid=62475
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 62475)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 62475) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 62475)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
+ parse_configs 198.51.100.75 25
+ local ip_addr=198.51.100.75
+ local padded_index=25
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 26
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=24 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=26
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=62500
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 62500)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 62500) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 62500)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
+ parse_configs 172.18.1.20 26
+ local ip_addr=172.18.1.20
+ local padded_index=26
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 27
+ padded_index=27
+ job_pid=62522
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 62522)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 62522) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 62522)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=25 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 10.10.10.10 27
+ local ip_addr=10.10.10.10
+ local padded_index=27
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 28
+ padded_index=28
+ job_pid=62573
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 62573)'
+ parse_configs 192.168.100.100 28
+ local ip_addr=192.168.100.100
+ local padded_index=28
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 62573) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 62573)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=26 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 29
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=27 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=29
+ job_pid=62601
+ job_pids+=("${job_pid}")
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_ip_map["$job_pid"]=172.31.255.254
+ parse_configs 172.31.255.254 29
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 62601)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 62601) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 62601)'
+ local ip_addr=172.31.255.254
+ local padded_index=29
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 62040
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62044
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62048
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62053
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62059
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62064
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62068
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62076
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62082
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62089
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62099
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62124
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62151
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62161
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62182
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62193
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62206
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62236
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62272
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62337
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62366
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62384
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62429
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62475
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62500
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62522
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62573
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62601
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=28 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=29 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 62040
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 62040)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 62040) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 62040)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62044
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 62044)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 62044) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 62044)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62048
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62053
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62059
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62064
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 62064)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 62064) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 62064)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62068
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62076
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62082
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62089
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62099
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62124
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 62124)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 62124) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 62124)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62151
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62161
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62182
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 62182)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 62182) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 62182)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62193
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62206
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62236
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62272
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62337
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62366
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62384
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62429
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62475
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62500
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62522
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62573
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 62601
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.31.255.254'
+ [[ -n \n[DONE] IP: 172.31.255.254 ]]
+ echo -en '\n[DONE] IP: 172.31.255.254'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ return 0
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ ((  24 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 62048
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 62048)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 62048) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 62048)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62053
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 62053)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 62053) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 62053)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62059
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 62059)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 62059) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 62059)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62068
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 62068)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 62068) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 62068)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62076
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 62076)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 62076) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 62076)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62082
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 62082)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 62082) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 62082)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62089
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 62089)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 62089) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 62089)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62099
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 62099)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 62099) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 62099)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62114
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 62114)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 62114) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 62114)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62151
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 62151)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 62151) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 62151)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62161
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 62161)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 62161) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 62161)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62193
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 62193)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 62193) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 62193)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62206
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 62206)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 62206) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 62206)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62236
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 62236)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 62236) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 62236)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62272
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 62272)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 62272) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 62272)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62337
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 62337)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 62337) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 62337)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62366
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 62366)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 62366) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 62366)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62384
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 62384)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 62384) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 62384)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62429
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 62429)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 62429) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 62429)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62475
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 62475)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 62475) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 62475)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62500
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 62500)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 62500) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 62500)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62522
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 62522)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 62522) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 62522)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62573
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 62573)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 62573) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 62573)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 62601
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 62601)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 62601) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 62601)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=10
+ generate_csvoutput
+ local json_dir=reports/json
+ [[ ! -d reports/json ]]
+ find reports/json -type f -name '*.json'
+ sort
reports/json/10.0.0.1.json
reports/json/10.0.1.2.json
reports/json/10.0.2.3.json
reports/json/10.10.10.10.json
reports/json/172.16.0.5.json
reports/json/172.16.1.6.json
reports/json/172.18.1.20.json
reports/json/172.31.255.254.json
reports/json/192.0.2.50.json
reports/json/192.168.1.10.json
reports/json/192.168.1.11.json
reports/json/192.168.100.100.json
reports/json/192.168.2.12.json
reports/json/198.51.100.75.json
reports/json/203.0.113.25.json
+ find reports/json -type f -name '*.json'
+ sort
+ read -r json
+ message 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ local 'message=Processing reports/json/10.0.0.1.json'
+ print 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ echo -en 'Processing reports/json/10.0.0.1.json'
Processing reports/json/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.0.1.json
+ read -r json
+ message 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ local 'message=Processing reports/json/10.0.1.2.json'
+ print 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ echo -en 'Processing reports/json/10.0.1.2.json'
Processing reports/json/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.1.2.json
+ read -r json
+ message 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ local 'message=Processing reports/json/10.0.2.3.json'
+ print 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ echo -en 'Processing reports/json/10.0.2.3.json'
Processing reports/json/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.2.3.json
+ read -r json
+ message 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ local 'message=Processing reports/json/10.10.10.10.json'
+ print 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ echo -en 'Processing reports/json/10.10.10.10.json'
Processing reports/json/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.10.10.10.json
+ read -r json
+ message 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ local 'message=Processing reports/json/172.16.0.5.json'
+ print 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ echo -en 'Processing reports/json/172.16.0.5.json'
Processing reports/json/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.0.5.json
+ read -r json
+ message 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ local 'message=Processing reports/json/172.16.1.6.json'
+ print 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ echo -en 'Processing reports/json/172.16.1.6.json'
Processing reports/json/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.1.6.json
+ read -r json
+ message 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ local 'message=Processing reports/json/172.18.1.20.json'
+ print 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ echo -en 'Processing reports/json/172.18.1.20.json'
Processing reports/json/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.18.1.20.json
+ read -r json
+ message 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ local 'message=Processing reports/json/172.31.255.254.json'
+ print 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ echo -en 'Processing reports/json/172.31.255.254.json'
Processing reports/json/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.31.255.254.json
+ read -r json
+ message 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ local 'message=Processing reports/json/192.0.2.50.json'
+ print 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ echo -en 'Processing reports/json/192.0.2.50.json'
Processing reports/json/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.0.2.50.json
+ read -r json
+ message 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ local 'message=Processing reports/json/192.168.1.10.json'
+ print 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ echo -en 'Processing reports/json/192.168.1.10.json'
Processing reports/json/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.10.json
+ read -r json
+ message 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ local 'message=Processing reports/json/192.168.1.11.json'
+ print 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ echo -en 'Processing reports/json/192.168.1.11.json'
Processing reports/json/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.11.json
+ read -r json
+ message 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ local 'message=Processing reports/json/192.168.100.100.json'
+ print 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ echo -en 'Processing reports/json/192.168.100.100.json'
Processing reports/json/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.100.100.json
+ read -r json
+ message 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ local 'message=Processing reports/json/192.168.2.12.json'
+ print 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ echo -en 'Processing reports/json/192.168.2.12.json'
Processing reports/json/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.2.12.json
+ read -r json
+ message 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ local 'message=Processing reports/json/198.51.100.75.json'
+ print 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ echo -en 'Processing reports/json/198.51.100.75.json'
Processing reports/json/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/198.51.100.75.json
+ read -r json
+ message 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ local 'message=Processing reports/json/203.0.113.25.json'
+ print 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ echo -en 'Processing reports/json/203.0.113.25.json'
Processing reports/json/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/203.0.113.25.json
+ read -r json
+ return 0
+ [[ 10 -lt 8 ]]
+ local json_dir=reports/json
+ expected_reports=29
+ message 'Expected Reports: 29'
+ [[ -n Expected Reports: 29 ]]
+ local 'message=Expected Reports: 29'
+ print 'Expected Reports: 29'
+ [[ -n Expected Reports: 29 ]]
+ echo -en 'Expected Reports: 29'
Expected Reports: 29+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ find reports/json -type f -name '*.json'
++ wc -l
++ sed -e 's|\ ||g'
+ actual_reports=15
+ message 'Actual Reports: 29'
+ [[ -n Actual Reports: 29 ]]
+ local 'message=Actual Reports: 29'
+ print 'Actual Reports: 29'
+ [[ -n Actual Reports: 29 ]]
+ echo -en 'Actual Reports: 29'
Actual Reports: 29+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS=' 	
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /misc/ .cache/configs.list
++ printf '\0'
+ IFS=' 	
'
+ total_files=4
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ local 'message=[BATCH] Processing folder: [misc]'
+ print '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ echo -en '[BATCH] Processing folder: [misc]'
[BATCH] Processing folder: [misc]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ local 'message=[BATCH] Found 4 config files'
+ print '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ echo -en '[BATCH] Found 4 config files'
[BATCH] Found 4 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ timestamp='[2025-05-17T02:14:13Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ printf '%s\n' '[2025-05-17T02:14:13Z] Flushed'
+ grep -qF '[2025-05-17T02:14:13Z] Flushed' .local/stats/targets.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ timestamp='[2025-05-17T02:14:13Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ printf '%s\n' '[2025-05-17T02:14:13Z] Flushed'
+ grep -qF '[2025-05-17T02:14:13Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ timestamp='[2025-05-17T02:14:13Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ printf '%s\n' '[2025-05-17T02:14:13Z] Flushed'
+ grep -qF '[2025-05-17T02:14:13Z] Flushed' .local/stats/success.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ timestamp='[2025-05-17T02:14:13Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-17T02:14:13Z
+ printf '%s\n' '[2025-05-17T02:14:13Z] Flushed'
+ grep -qF '[2025-05-17T02:14:13Z] Flushed' .local/stats/started.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 4 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747448053562279000 8806
+ export batch_id=MTc0NzQ0ODA1
+ batch_id=MTc0NzQ0ODA1
++ date +%s
+ batch_suffix=1747448053-16632
+ batch_configs_list=configs--MTc0NzQ0ODA1-1747448053-16632.list
+ BATCH_CONFIGS=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ export BATCH_CONFIGS
+ touch /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ printf '%s\n' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ range_first=1
+ range_last=4
+ message '[ MTc0NzQ0ODA1 ] Files 1 -> 4'
+ [[ -n [ MTc0NzQ0ODA1 ] Files 1 -> 4 ]]
+ local 'message=[ MTc0NzQ0ODA1 ] Files 1 -> 4'
+ print '[ MTc0NzQ0ODA1 ] Files 1 -> 4'
+ [[ -n [ MTc0NzQ0ODA1 ] Files 1 -> 4 ]]
+ echo -en '[ MTc0NzQ0ODA1 ] Files 1 -> 4'
[ MTc0NzQ0ODA1 ] Files 1 -> 4+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ basename /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local base=configs--MTc0NzQ0ODA1-1747448053-16632.list
++ dirname /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local parent=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzQ0ODA1-1747448053-16632.list
'
+ format_common+='Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzQ0ODA1-1747448053-16632.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzQ0ODA1-1747448053-16632.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
File: configs--MTc0NzQ0ODA1-1747448053-16632.list
Parent: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2
Size: 104 bytes
Blocks/Inode: 8 / 18465920
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 16 19:14:13 2025
Modify: May 16 19:14:13 2025
Change: May 16 19:14:13 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list]'
+ print 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list]'
Batch-Config file: [configs--MTc0NzQ0ODA1-1747448053-16632.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ local target_file=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ true == true ]]
+ [[ -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ case "${target_file}" in
+ cat /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ message '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list'
+ print '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list'
[matching_configs] Configurations File: /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=66883
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 66883)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 66883) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 66883)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=66889
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 66889)'
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 66889) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 66889)'
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch3.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch3.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ wc -l
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      14'
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
++ wc -l
+ job_pid=66898
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 66898)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 66898) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 66898)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
++ tr -d ' '
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ config_lines='      14'
+ match_count=1
+ site=misc
+ device=switch1.conf
+ local matched_files=configs/misc/switch2.conf
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
++ print '[]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
+ config_file=misc/switch2.conf
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ tr -d ' '
++ wc -l
+ job_pid=66917
+ job_pids+=("${job_pid}")
++ wc -l
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 66917)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 66917) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 66917)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
+ match_count=1
+ site=misc
+ device=switch1.conf
++ tr -d '\r'
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=misc/switch3.conf
++ tr -d ' '
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ wc -l
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
+ job_pid=66935
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 66935)'
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 66935) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 66935)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch2.conf
+ config_lines='      14'
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
++ wc -l
++ tr -d ' '
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      11'
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch3.conf
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
++ wc -l
+ job_pid=66953
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 66953)'
++ tr -d ' '
+ config_lines='      14'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 66953) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 66953)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ match_count=1
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ site=misc
++ wc -l
+ device=switch1.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch4.conf
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ wc -l
++ tr -d ' '
+ match_count=2
+ site=misc
+ device=switch3.conf
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ match_count=1
+ site=misc
+ device=switch4.conf
+ config_lines='      14'
++ true
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ ip_cleaned=172.16.0.5
+ target_file=targets/172.16.0.5.json
++ jq '{ configs: . }'
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch2.conf
+ job_pid=66977
++ wc -l
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=172.16.0.5
+ job_pids+=("${job_pid}")
++ tr -d ' '
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ job_ip_map["$job_pid"]=172.16.0.5
+ config_file=misc/switch4.conf
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 66977)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 66977) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 66977)'
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ jq '{ configs: . }'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
+ match_count=1
+ site=misc
+ device=switch2.conf
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch4.conf
+ config_file=misc/switch4.conf
++ wc -l
++ tr -d ' '
++ wc -l
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
++ jq '{ configs: . }'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 2
    }
  ]
}'
+ job_pid=67006
+ jq -r
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 67006)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 67006) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 67006)'
+ config_lines='      14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch4.conf
+ match_count=1
++ wc -l
++ tr -d ' '
+ site=misc
+ device=switch4.conf
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
++ print '[
  {
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ return 0
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ jq '{ configs: . }'
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
+ local matched_files=configs/misc/switch3.conf
+ [[ -n configs/misc/switch3.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch3.conf
+ job_pid=67024
+ job_pids+=("${job_pid}")
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ wc -l
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ match_count=1
+ site=misc
+ job_ip_map["$job_pid"]=192.0.2.50
+ device=switch4.conf
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 67024)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 67024) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 67024)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ tr -d '\r'
++ print 203.0.113.25
++ print '[]'
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ [[ -n [] ]]
++ echo -en '[]'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      11'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ true
++ wc -l
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch3.conf
++ tr -d ' '
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ job_pid=67043
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 67043)'
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 67043) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 67043)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ return 0
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ match_count=1
+ site=misc
+ device=switch3.conf
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ true
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=67056
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 67056)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 67056) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 67056)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ true
+ local matched_files=
+ ip_cleaned=172.18.1.20
+ [[ -n '' ]]
+ return 0
+ target_file=targets/172.18.1.20.json
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
+ job_pid=67065
    "count": 1
  }
]'
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 67065)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 67065) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 67065)'
++ jq '{ configs: . }'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ ip_cleaned=10.10.10.10
+ IFS=
+ read -r config_file
+ target_file=targets/10.10.10.10.json
+ config_file=misc/switch4.conf
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 1
    }
  ]
}'
+ jq -r
++ wc -l
+ job_pid=67072
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 67072)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 67072) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 67072)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ config_lines='      14'
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch4.conf
++ wc -l
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ return 0
++ wc -l
+ job_pid=67085
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 67085)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 67085) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 67085)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch4.conf
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ tr -d ' '
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ job_pid=67100
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 67100)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 67100) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 67100)'
++ wc -l
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 66883
+ ip_address=10.0.0.1
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2/configs--MTc0NzQ0ODA1-1747448053-16632.list
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 66883)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 66883) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 66883)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66889
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 66889)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 66889) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 66889)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66898
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 66898)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 66898) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 66898)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66917
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 66917)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 66917) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 66917)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66935
+ ip_address=192.168.1.11
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 66935)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 66935) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 66935)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66953
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 66953)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 66953) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 66953)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 66977
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 66977)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 66977) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 66977)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67006
+ match_count=1
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 67006)'
+ site=misc
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 67006) ]]
+ device=switch2.conf
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 67006)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67024
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 67024)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 67024) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 67024)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67043
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 67043)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 67043) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 67043)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67056
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 67056)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 67056) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 67056)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67065
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67072
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67085
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67100
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      14'
++ jq '{ configs: . }'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ wc -l
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch2.conf
++ tr -d ' '
+ local matched_files=configs/misc/switch1.conf
+ [[ -n configs/misc/switch1.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
++ wc -l
+ match_count=1
+ site=misc
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ device=switch2.conf
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      14'
++ jq '{ configs: . }'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
++ tr -d ' '
+ match_count=1
+ site=misc
+ device=switch1.conf
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ echo -en '[]'
+ IFS=
+ read -r config_file
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 67065
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 67065)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 67065) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 67065)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67072
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 67072)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 67072) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 67072)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67085
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 67085)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 67085) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 67085)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67100
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 67100)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 67100) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 67100)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ local total_requested=15
+ local total_mapped=11
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    11'
+ [[ -n Total IPs mapped:    11 ]]
+ local 'message=Total IPs mapped:    11'
+ print 'Total IPs mapped:    11'
+ [[ -n Total IPs mapped:    11 ]]
+ echo -en 'Total IPs mapped:    11'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        4'
+ [[ -n \nUnmapped IPs:        4 ]]
+ local 'message=\nUnmapped IPs:        4'
+ print '\nUnmapped IPs:        4'
+ [[ -n \nUnmapped IPs:        4 ]]
+ echo -en '\nUnmapped IPs:        4'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ message '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ local 'message=  - 192.168.2.12'
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ message '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ local 'message=  - 192.0.2.50'
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ message '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ local 'message=  - 203.0.113.25'
+ print '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ echo -en '  - 203.0.113.25'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ message '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ local 'message=  - 198.51.100.75'
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=11
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=67250
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 67250)'
+ parse_configs 10.0.0.1 01
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 67250) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 67250)'
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=67254
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 67254)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 67254) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 67254)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 3
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=03
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=67258
+ job_pids+=("${job_pid}")
+ parse_configs 10.0.2.3 03
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 67258)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 67258) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 67258)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 4
+ padded_index=04
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=67263
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ parse_configs 192.168.1.10 04
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 67263)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 67263) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 67263)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=05
+ parse_configs 192.168.1.11 05
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pid=67269
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 67269)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 67269) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 67269)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=06
+ job_pid=67274
+ parse_configs 172.16.0.5 06
+ local ip_addr=172.16.0.5
+ job_pids+=("${job_pid}")
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 67274)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 67274) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 67274)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 7
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=07
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=67278
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ parse_configs 172.16.1.6 07
+ local ip_addr=172.16.1.6
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 67278)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 67278) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 67278)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 8
+ padded_index=08
+ job_pid=67285
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 67285)'
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 172.18.1.20 08
+ local ip_addr=172.18.1.20
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 67285) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 67285)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ printf %02d 9
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=09
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=67290
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 67290)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 67290) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 67290)'
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ newline
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ parse_configs 10.10.10.10 09
+ local ip_addr=10.10.10.10
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=10
+ parse_configs 192.168.100.100 10
+ local ip_addr=192.168.100.100
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ job_pid=67298
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 67298)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 67298) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 67298)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 11
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ logfile=.local/jobs/172.18.1.20.job
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ padded_index=11
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=67306
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 67306)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 67306) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 67306)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ parse_configs 172.31.255.254 11
+ local ip_addr=172.31.255.254
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ((  ip_index < total_ips  ))
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 67250
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67254
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67258
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67263
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67269
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67274
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67278
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67285
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67290
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67298
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 67306
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ logfile=.local/jobs/192.168.100.100.job
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.31.255.254'
+ [[ -n \n[DONE] IP: 172.31.255.254 ]]
+ echo -en '\n[DONE] IP: 172.31.255.254'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 67250
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 67250)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 67250) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 67250)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67254
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 67254)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 67254) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 67254)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67258
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 67258)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 67258) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 67258)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67263
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 67263)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 67263) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 67263)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67269
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 67269)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 67269) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 67269)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67274
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 67274)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 67274) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 67274)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67278
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 67278)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 67278) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 67278)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67285
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 67285)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 67285) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 67285)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67290
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 67290)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 67290) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 67290)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67298
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 67298)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 67298) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 67298)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 67306
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 67306)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 67306) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 67306)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ generate_csvoutput
+ local json_dir=reports/json
+ [[ ! -d reports/json ]]
+ find reports/json -type f -name '*.json'
+ sort
reports/json/10.0.0.1.json
reports/json/10.0.1.2.json
reports/json/10.0.2.3.json
reports/json/10.10.10.10.json
reports/json/172.16.0.5.json
reports/json/172.16.1.6.json
reports/json/172.18.1.20.json
reports/json/172.31.255.254.json
reports/json/192.0.2.50.json
reports/json/192.168.1.10.json
reports/json/192.168.1.11.json
reports/json/192.168.100.100.json
reports/json/192.168.2.12.json
reports/json/198.51.100.75.json
reports/json/203.0.113.25.json
+ find reports/json -type f -name '*.json'
+ sort
+ read -r json
+ message 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ local 'message=Processing reports/json/10.0.0.1.json'
+ print 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ echo -en 'Processing reports/json/10.0.0.1.json'
Processing reports/json/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.0.1.json
+ read -r json
+ message 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ local 'message=Processing reports/json/10.0.1.2.json'
+ print 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ echo -en 'Processing reports/json/10.0.1.2.json'
Processing reports/json/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.1.2.json
+ read -r json
+ message 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ local 'message=Processing reports/json/10.0.2.3.json'
+ print 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ echo -en 'Processing reports/json/10.0.2.3.json'
Processing reports/json/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.0.2.3.json
+ read -r json
+ message 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ local 'message=Processing reports/json/10.10.10.10.json'
+ print 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ echo -en 'Processing reports/json/10.10.10.10.json'
Processing reports/json/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/10.10.10.10.json
+ read -r json
+ message 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ local 'message=Processing reports/json/172.16.0.5.json'
+ print 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ echo -en 'Processing reports/json/172.16.0.5.json'
Processing reports/json/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.0.5.json
+ read -r json
+ message 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ local 'message=Processing reports/json/172.16.1.6.json'
+ print 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ echo -en 'Processing reports/json/172.16.1.6.json'
Processing reports/json/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.16.1.6.json
+ read -r json
+ message 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ local 'message=Processing reports/json/172.18.1.20.json'
+ print 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ echo -en 'Processing reports/json/172.18.1.20.json'
Processing reports/json/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.18.1.20.json
+ read -r json
+ message 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ local 'message=Processing reports/json/172.31.255.254.json'
+ print 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ echo -en 'Processing reports/json/172.31.255.254.json'
Processing reports/json/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/172.31.255.254.json
+ read -r json
+ message 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ local 'message=Processing reports/json/192.0.2.50.json'
+ print 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ echo -en 'Processing reports/json/192.0.2.50.json'
Processing reports/json/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.0.2.50.json
+ read -r json
+ message 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ local 'message=Processing reports/json/192.168.1.10.json'
+ print 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ echo -en 'Processing reports/json/192.168.1.10.json'
Processing reports/json/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.10.json
+ read -r json
+ message 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ local 'message=Processing reports/json/192.168.1.11.json'
+ print 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ echo -en 'Processing reports/json/192.168.1.11.json'
Processing reports/json/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.1.11.json
+ read -r json
+ message 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ local 'message=Processing reports/json/192.168.100.100.json'
+ print 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ echo -en 'Processing reports/json/192.168.100.100.json'
Processing reports/json/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.100.100.json
+ read -r json
+ message 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ local 'message=Processing reports/json/192.168.2.12.json'
+ print 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ echo -en 'Processing reports/json/192.168.2.12.json'
Processing reports/json/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/192.168.2.12.json
+ read -r json
+ message 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ local 'message=Processing reports/json/198.51.100.75.json'
+ print 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ echo -en 'Processing reports/json/198.51.100.75.json'
Processing reports/json/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/198.51.100.75.json
+ read -r json
+ message 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ local 'message=Processing reports/json/203.0.113.25.json'
+ print 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ echo -en 'Processing reports/json/203.0.113.25.json'
Processing reports/json/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv'
+ jq -e -r '
        .target as $target
        | .configs[] as $cfg
        | select( $cfg.objects != null and ( $cfg.objects | type == "array" and length > 0 ) )
        | $cfg.objects[]
        | [
            $target,
            ( $cfg.site // "none" ),
            ( $cfg.device // "none" ),
            ( .object // "none" ),
            ( .entries[0] // "none" ),
            ( .description // "none" ),
            ( .group // "none" )
          ] | @csv' reports/json/203.0.113.25.json
+ read -r json
+ return 0
+ [[ 5 -lt 4 ]]
+ local json_dir=reports/json
+ expected_reports=11
+ message 'Expected Reports: 11'
+ [[ -n Expected Reports: 11 ]]
+ local 'message=Expected Reports: 11'
+ print 'Expected Reports: 11'
+ [[ -n Expected Reports: 11 ]]
+ echo -en 'Expected Reports: 11'
Expected Reports: 11+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ find reports/json -type f -name '*.json'
++ wc -l
++ sed -e 's|\ ||g'
+ actual_reports=15
+ message 'Actual Reports: 11'
+ [[ -n Actual Reports: 11 ]]
+ local 'message=Actual Reports: 11'
+ print 'Actual Reports: 11'
+ [[ -n Actual Reports: 11 ]]
+ echo -en 'Actual Reports: 11'
Actual Reports: 11+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ local 'message=CSV Report Summary (tabulated):'
+ print 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ echo -en 'CSV Report Summary (tabulated):'
CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ cat reports/reports.csv
target,site,device,object,entry,description,group
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object","host 10.0.0.1","Core services gateway","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"10.0.0.1","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object","host 10.0.1.2","Application edge firewall","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"10.0.1.2","cisco","fw4.cfg","object-group","network-object host 10.0.1.2","Internal LAN segments","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object","host 10.0.2.3","Secure outbound concentrator","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object","host 10.10.10.10","Guest NAT","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","Shield-controlled wireless network","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object","host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object","host 172.16.0.5","Internet firewall handoff","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","Green Lantern HQ core router","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object","host 192.0.2.50","Untrusted guest access","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"192.168.100.100","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"192.168.2.12","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","Encrypted edge gateway","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object","host 203.0.113.25","Internet-bound IP NAT","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object","host 203.0.113.25","Unfiltered outbound NAT IP","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object","host 10.0.0.1","Core services gateway","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"10.0.0.1","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"10.0.0.1","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","East coast internal network","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object","host 10.0.1.2","Application edge firewall","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"10.0.1.2","cisco","fw4.cfg","object-group","network-object host 10.0.1.2","Internal LAN segments","Unclassified"
"10.0.1.2","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","Secure base subnets","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object","host 10.0.2.3","Secure outbound concentrator","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"10.0.2.3","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","Secure internal office","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object","host 10.10.10.10","Guest NAT","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","Shield-controlled wireless network","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object","host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"10.10.10.10","cisco","fw6.cfg","object-group","network-object host 10.10.10.10","Controlled guest devices","Unclassified"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object","host 172.16.0.5","Internet firewall handoff","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object","host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object-group","network-object host 172.16.0.5","Guest access","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","Green Lantern HQ core router","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"172.31.255.254","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","Secure internal office","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object","host 192.0.2.50","Untrusted guest access","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object","host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object-group","network-object host 192.0.2.50","Global secure relay","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object","host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","Secure base subnets","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"192.168.100.100","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object","host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object-group","network-object host 192.168.100.100","Young heroes WiFi","Unclassified"
"192.168.2.12","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"192.168.2.12","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","East coast internal network","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","Encrypted edge gateway","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object","host 203.0.113.25","Internet-bound IP NAT","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object","host 203.0.113.25","Unfiltered outbound NAT IP","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object-group","network-object host 203.0.113.25","WAN-facing systems","Unclassified"
"203.0.113.25","cisco","fw8.cfg","object","host 203.0.113.25","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object","host 10.0.0.1","Core services gateway","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"10.0.0.1","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"10.0.0.1","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","East coast internal network","Unclassified"
"10.0.0.1","misc","switch1.conf","object-group","network-object host 10.0.0.1","VLAN access layer","Unclassified"
"10.0.0.1","misc","switch3.conf","interface","ip address 10.0.0.1 255.255.255.0","false","Business-Unit-Networks"
"10.0.0.1","misc","switch3.conf","object-group","network-object host 10.0.0.1","Web access switches","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object","host 10.0.1.2","Application edge firewall","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"10.0.1.2","cisco","fw4.cfg","object-group","network-object host 10.0.1.2","Internal LAN segments","Unclassified"
"10.0.1.2","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","Secure base subnets","Unclassified"
"10.0.1.2","misc","switch1.conf","interface","ip address 10.0.1.2 255.255.255.0","false","Unclassified"
"10.0.1.2","misc","switch4.conf","object-group","network-object host 10.0.1.2","Multinetwork convergence","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object","host 10.0.2.3","Secure outbound concentrator","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"10.0.2.3","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","Secure internal office","Unclassified"
"10.0.2.3","misc","switch2.conf","object-group","network-object host 10.0.2.3","Internal wireless layout","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object","host 10.10.10.10","Guest NAT","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","Shield-controlled wireless network","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object","host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"10.10.10.10","cisco","fw6.cfg","object-group","network-object host 10.10.10.10","Controlled guest devices","Unclassified"
"10.10.10.10","misc","switch2.conf","interface","ip address 10.10.10.10 255.255.255.0","false","Business-Unit-Networks"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object","host 172.16.0.5","Internet firewall handoff","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object","host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object-group","network-object host 172.16.0.5","Guest access","Unclassified"
"172.16.0.5","misc","switch4.conf","interface","ip address 172.16.0.5 255.255.255.0","false","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"172.16.1.6","misc","switch3.conf","interface","ip address 172.16.1.6 255.255.255.0","false","Business-Unit-Networks"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","Green Lantern HQ core router","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"172.18.1.20","misc","switch4.conf","interface","ip address 172.18.1.20 255.255.255.0","false","Business-Unit-Networks"
"172.31.255.254","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","Secure internal office","Unclassified"
"172.31.255.254","misc","switch1.conf","interface","ip address 172.31.255.254 255.255.255.0","false","Business-Unit-Networks"
"192.0.2.50","cisco","fw1.cfg","object","host 192.0.2.50","Untrusted guest access","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object","host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object-group","network-object host 192.0.2.50","Global secure relay","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object","host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","Secure base subnets","Unclassified"
"192.168.1.10","misc","switch1.conf","interface","ip address 192.168.1.10 255.255.255.0","false","Unclassified"
"192.168.1.10","misc","switch4.conf","interface","ip address 192.168.1.10 255.255.255.0","false","Business-Unit-Networks"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"192.168.1.11","misc","switch2.conf","interface","ip address 192.168.1.11 255.255.255.0","false","Business-Unit-Networks"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"192.168.100.100","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object","host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object-group","network-object host 192.168.100.100","Young heroes WiFi","Unclassified"
"192.168.100.100","misc","switch2.conf","interface","ip address 192.168.100.100 255.255.255.0","false","Unclassified"
"192.168.2.12","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"192.168.2.12","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","East coast internal network","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","Encrypted edge gateway","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object","host 203.0.113.25","Internet-bound IP NAT","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object","host 203.0.113.25","Unfiltered outbound NAT IP","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object-group","network-object host 203.0.113.25","WAN-facing systems","Unclassified"
"203.0.113.25","cisco","fw8.cfg","object","host 203.0.113.25","false","Unclassified"
+ local elapsed=8
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '[INFO] Started at: %s\n' '2025-05-16 19:14:07'
[INFO] Started at: 2025-05-16 19:14:07
+ printf '[INFO] Total runtime: %02d:%02d:%02d\n' 0 0 8
[INFO] Total runtime: 00:00:08
+ return 0
+ [[ -d /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2 ]]
+ rm -rf /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.vzlNlYLbZ2

{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 2
    }
  ]
}

{
  "target": "10.0.0.1",
  "configs": [
    {
      "site": "cisco",
      "device": "fw1.cfg",
      "objects": [
        {
          "object": "access-list",
          "type": false,
          "description": "false",
          "entries": [
            "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
          ],
          "group": "Unclassified"
        },
        {
          "object": "object",
          "type": false,
          "description": "Core services gateway",
          "entries": [
            "host 10.0.0.1"
          ],
          "group": "Unclassified"
        },
        {
          "object": "object-group",
          "type": "network Stark-Core",
          "description": "Internal Data Plane",
          "entries": [
            "network-object host 10.0.0.1",
            "network-object host 192.168.1.10",
            "network-object 192.168.1.0 255.255.255.0"
          ],
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "cisco",
      "device": "fw5.cfg",
      "objects": [
        {
          "object": "object-group",
          "type": "network RedRoom-Core",
          "description": "Classified subnets",
          "entries": [
            "network-object host 10.0.0.1",
            "network-object host 172.16.1.6"
          ],
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "cisco",
      "device": "fw8.cfg",
      "objects": [
        {
          "object": "object-group",
          "type": "network Hellfire-Internal",
          "description": "East coast internal network",
          "entries": [
            "network-object host 10.0.0.1",
            "network-object 192.168.2.12"
          ],
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "misc",
      "device": "switch1.conf",
      "objects": [
        {
          "object": "object-group",
          "type": "network Avengers-Office",
          "description": "VLAN access layer",
          "entries": [
            "network-object host 10.0.0.1",
            "network-object 192.168.12.0 255.255.255.0"
          ],
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "misc",
      "device": "switch3.conf",
      "objects": [
        {
          "object": "interface",
          "type": false,
          "description": "false",
          "entries": [
            "ip address 10.0.0.1 255.255.255.0"
          ],
          "group": "Business-Unit-Networks"
        },
        {
          "object": "object-group",
          "type": "network Spider-Net",
          "description": "Web access switches",
          "entries": [
            "network-object host 10.0.0.1",
            "network-object 192.168.12.0 255.255.255.0"
          ],
          "group": "Unclassified"
        }
      ]
    }
  ]
}
devops: network-resources (master *=) $ git
