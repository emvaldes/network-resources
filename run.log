devops: network-resources (master +$=) $ date ; echo ; rm -rf ./reports ./targets ./.cache ./.local ; bash -x ./scripts/parse-listings.shell --verbose --debug --classify --logs --sites='cisco' && echo ; cat .local/jobs/10.0.0.1.job && echo ; jq -r . ./reports/json/10.0.0.1.json 2>/dev/null ;

Wed May 14 21:47:52 MST 2025

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzI4NDQ3MjI4NjEwMDAwMAo
++ divisor=MTc0NzI4NDQ3MjI4NjEwMDAwMAo
+ source ./scripts/tools-listings.shell
++ [[ -n '' ]]
++ readonly __TOOLS_LISTINGS_SOURCED=1
++ __TOOLS_LISTINGS_SOURCED=1
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 5 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs --sites=cisco
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(sites|s)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(sites|s)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(sites|s)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(sites|s)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --sites=cisco
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ sites =~ ^(classify|g)$ ]]
+ [[ sites =~ ^(file-ext|x)$ ]]
+ [[ sites =~ ^(configs|c)$ ]]
+ [[ sites =~ ^(interval|l)$ ]]
+ [[ sites =~ ^(ips-list|i)$ ]]
+ [[ sites =~ ^(logs|o)$ ]]
+ [[ sites =~ ^(jobs|j)$ ]]
+ [[ sites =~ ^(matrix|m)$ ]]
+ [[ sites =~ ^(reports|r)$ ]]
+ [[ sites =~ ^(sites|s)$ ]]
+ export target_sites=cisco
+ target_sites=cisco
+ [[ sites =~ ^(validate|v)$ ]]
+ [[ sites == \h\e\l\p ]]
+ [[ sites == \d\e\b\u\g ]]
+ [[ sites == \d\r\y\-\r\u\n ]]
+ [[ sites == \v\e\r\b\o\s\e ]]
+ IFS='
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z '' ]]
+ listing_filename=ips.list
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z cisco ]]
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
++ date '+%Y-%m-%d %H:%M:%S'
+ local 'start_time=2025-05-14 21:47:52'
+ SECONDS=0
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
+ sort
+ [[ true == true ]]
+ message 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ local 'message=Generated configs.list at .cache/configs.list'
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n cisco ]]
+ [[ cisco != \f\a\l\s\e ]]
+ oIFS='
'
+ IFS=,
+ read -r -a site_filters
+ IFS='
'
+ filtered_configs=()
+ declare -a filtered_configs
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
+ message 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ local 'message=Filtered Configurations:'
+ print 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ echo -en 'Filtered Configurations:'
Filtered Configurations:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
+ [[ 8 -eq 0 ]]
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ [[ true == true ]]
+ message '[FILTER] Applied --sites=cisco'
+ [[ -n [FILTER] Applied --sites=cisco ]]
+ local 'message=[FILTER] Applied --sites=cisco'
+ print '[FILTER] Applied --sites=cisco'
+ [[ -n [FILTER] Applied --sites=cisco ]]
+ echo -en '[FILTER] Applied --sites=cisco'
[FILTER] Applied --sites=cisco+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
++ awk '{print $1}'
+ message '[FILTER] Filtered configs.list now contains: 8 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 8 entries ]]
+ local 'message=[FILTER] Filtered configs.list now contains: 8 entries'
+ print '[FILTER] Filtered configs.list now contains: 8 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 8 entries ]]
+ echo -en '[FILTER] Filtered configs.list now contains: 8 entries'
[FILTER] Filtered configs.list now contains: 8 entries+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file .cache/configs.list
+ [[ -n .cache/configs.list ]]
+ local target_file=.cache/configs.list
+ [[ true == true ]]
+ [[ -f .cache/configs.list ]]
+ case "${target_file}" in
+ cat .cache/configs.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ [[ -z ips.list ]]
+ target_listing_raw=()
+ declare -a target_listing_raw
+ [[ -f ips.list ]]
+ mapfile -t target_listing_raw
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
+ target_listing=()
+ declare -a target_listing
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.0.1
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.0.1 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '0' '1')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ local 'segments=10 0 0 1'
+ local fixed_address=10.0.0.1
+ [[ -n '' ]]
+ [[ 10.0.0.1 != \1\0\.\0\.\0\.\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.1.2
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.1.2 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '1' '2')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ local 'segments=10 0 1 2'
+ local fixed_address=10.0.1.2
+ [[ -n '' ]]
+ [[ 10.0.1.2 != \1\0\.\0\.\1\.\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.2.3
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.2.3 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '2' '3')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 3
++ [[ -n 3 ]]
++ echo -en 3
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=3
+ [[ 3 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=3
+ local 'segments=10 0 2 3'
+ local fixed_address=10.0.2.3
+ [[ -n '' ]]
+ [[ 10.0.2.3 != \1\0\.\0\.\2\.\3 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=192 168 1 10'
+ local fixed_address=192.168.1.10
+ [[ -n '' ]]
+ [[ 192.168.1.10 != \1\9\2\.\1\6\8\.\1\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.11
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.11 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '11')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 11
++ [[ -n 11 ]]
++ echo -en 11
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=11
+ [[ 11 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=11
+ local 'segments=192 168 1 11'
+ local fixed_address=192.168.1.11
+ [[ -n '' ]]
+ [[ 192.168.1.11 != \1\9\2\.\1\6\8\.\1\.\1\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.2.12
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.2.12 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '2' '12')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 12
++ [[ -n 12 ]]
++ echo -en 12
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=12
+ [[ 12 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=12
+ local 'segments=192 168 2 12'
+ local fixed_address=192.168.2.12
+ [[ -n '' ]]
+ [[ 192.168.2.12 != \1\9\2\.\1\6\8\.\2\.\1\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.0.5
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.0.5 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '0' '5')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 5
++ [[ -n 5 ]]
++ echo -en 5
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=5
+ [[ 5 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=5
+ local 'segments=172 16 0 5'
+ local fixed_address=172.16.0.5
+ [[ -n '' ]]
+ [[ 172.16.0.5 != \1\7\2\.\1\6\.\0\.\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.1.6
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.1.6 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '1' '6')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 6
++ [[ -n 6 ]]
++ echo -en 6
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=6
+ [[ 6 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=6
+ local 'segments=172 16 1 6'
+ local fixed_address=172.16.1.6
+ [[ -n '' ]]
+ [[ 172.16.1.6 != \1\7\2\.\1\6\.\1\.\6 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.0.2.50
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.0.2.50 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '0' '2' '50')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 50
++ [[ -n 50 ]]
++ echo -en 50
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=50
+ [[ 50 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=50
+ local 'segments=192 0 2 50'
+ local fixed_address=192.0.2.50
+ [[ -n '' ]]
+ [[ 192.0.2.50 != \1\9\2\.\0\.\2\.\5\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=203.0.113.25
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 203.0.113.25 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('203' '0' '113' '25')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 203
++ [[ -n 203 ]]
++ echo -en 203
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=203
+ [[ 203 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=203
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 113
++ [[ -n 113 ]]
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
++ echo -en 113
+ segment=113
+ [[ 113 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=113
+ for i in "${!segments[@]}"
++ print 25
++ [[ -n 25 ]]
++ echo -en 25
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=25
+ [[ 25 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=25
+ local 'segments=203 0 113 25'
+ local fixed_address=203.0.113.25
+ [[ -n '' ]]
+ [[ 203.0.113.25 != \2\0\3\.\0\.\1\1\3\.\2\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=198.51.100.75
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 198.51.100.75 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('198' '51' '100' '75')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 198
++ [[ -n 198 ]]
++ echo -en 198
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=198
+ [[ 198 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=198
+ for i in "${!segments[@]}"
++ print 51
++ [[ -n 51 ]]
++ echo -en 51
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=51
+ [[ 51 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=51
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 75
++ [[ -n 75 ]]
++ echo -en 75
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=75
+ [[ 75 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=75
+ local 'segments=198 51 100 75'
+ local fixed_address=198.51.100.75
+ [[ -n '' ]]
+ [[ 198.51.100.75 != \1\9\8\.\5\1\.\1\0\0\.\7\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.18.1.20
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.18.1.20 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '18' '1' '20')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 18
++ [[ -n 18 ]]
++ echo -en 18
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=18
+ [[ 18 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=18
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 20
++ [[ -n 20 ]]
++ echo -en 20
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=20
+ [[ 20 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=20
+ local 'segments=172 18 1 20'
+ local fixed_address=172.18.1.20
+ [[ -n '' ]]
+ [[ 172.18.1.20 != \1\7\2\.\1\8\.\1\.\2\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.10.10.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.10.10.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '10' '10' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=10 10 10 10'
+ local fixed_address=10.10.10.10
+ [[ -n '' ]]
+ [[ 10.10.10.10 != \1\0\.\1\0\.\1\0\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.100.100
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.100.100 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '100' '100')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ local 'segments=192 168 100 100'
+ local fixed_address=192.168.100.100
+ [[ -n '' ]]
+ [[ 192.168.100.100 != \1\9\2\.\1\6\8\.\1\0\0\.\1\0\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.31.255.254
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.31.255.254 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '31' '255' '254')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 31
++ [[ -n 31 ]]
++ echo -en 31
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=31
+ [[ 31 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=31
+ for i in "${!segments[@]}"
++ print 255
++ [[ -n 255 ]]
++ echo -en 255
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=255
+ [[ 255 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=255
+ for i in "${!segments[@]}"
++ print 254
++ [[ -n 254 ]]
++ echo -en 254
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=254
+ [[ 254 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=254
+ local 'segments=172 31 255 254'
+ local fixed_address=172.31.255.254
+ [[ -n '' ]]
+ [[ 172.31.255.254 != \1\7\2\.\3\1\.\2\5\5\.\2\5\4 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ [[ 15 -eq 0 ]]
+ mapfile -t site_folders
++ cut -d/ -f2 .cache/configs.list
++ sort -u
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print cisco
++ [[ -n cisco ]]
++ echo -en cisco
+ message 'Site Folders: cisco'
+ [[ -n Site Folders: cisco ]]
+ local 'message=Site Folders: cisco'
+ print 'Site Folders: cisco'
+ [[ -n Site Folders: cisco ]]
+ echo -en 'Site Folders: cisco'
Site Folders: cisco+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local batch_size=5
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS='
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /cisco/ .cache/configs.list
++ printf '\0'
+ IFS='
'
+ total_files=8
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ local 'message=[BATCH] Processing folder: [cisco]'
+ print '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ echo -en '[BATCH] Processing folder: [cisco]'
[BATCH] Processing folder: [cisco]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ local 'message=[BATCH] Found 8 config files'
+ print '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ echo -en '[BATCH] Found 8 config files'
[BATCH] Found 8 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T04:47:52Z
+ timestamp='[2025-05-15T04:47:52Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T04:47:52Z
+ printf '%s\n' '[2025-05-15T04:47:52Z] Flushed'
+ grep -qF '[2025-05-15T04:47:52Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747284472657425000 12598
+ export batch_id=MTc0NzI4NDQ3
+ batch_id=MTc0NzI4NDQ3
++ date +%s
+ batch_suffix=1747284472-21547
+ batch_configs_list=configs--MTc0NzI4NDQ3-1747284472-21547.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ range_first=1
+ range_last=5
+ message '[ MTc0NzI4NDQ3 ] Files 1 -> 5'
+ [[ -n [ MTc0NzI4NDQ3 ] Files 1 -> 5 ]]
+ local 'message=[ MTc0NzI4NDQ3 ] Files 1 -> 5'
+ print '[ MTc0NzI4NDQ3 ] Files 1 -> 5'
+ [[ -n [ MTc0NzI4NDQ3 ] Files 1 -> 5 ]]
+ echo -en '[ MTc0NzI4NDQ3 ] Files 1 -> 5'
[ MTc0NzI4NDQ3 ] Files 1 -> 5+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local base=configs--MTc0NzI4NDQ3-1747284472-21547.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzI4NDQ3-1747284472-21547.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzI4NDQ3-1747284472-21547.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzI4NDQ3-1747284472-21547.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
File: configs--MTc0NzI4NDQ3-1747284472-21547.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: 110 bytes
Blocks/Inode: 8 / 237183979
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 14 21:47:52 2025
Modify: May 14 21:47:52 2025
Change: May 14 21:47:52 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list]'
+ print 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list]'
Batch-Config file: [configs--MTc0NzI4NDQ3-1747284472-21547.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=39521
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 39521)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 39521) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 39521)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=39527
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 39527)'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 39527) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 39527)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      42'
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ job_pid=39536
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 39536)'
+ config_file=cisco/fw2.cfg
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 39536) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 39536)'
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local ip_addr=10.0.2.3
+ newline
+ local count=1
+ local target_file=targets/10.0.2.3.json
+ (( i = 0 ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ tr -d ' '
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw1.cfg
+ config_lines='      43'
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ job_pid=39550
+ job_pids+=("${job_pid}")
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 39550)'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw2.cfg
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ wc -l
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
++ wc -l
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 39550) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 39550)'
++ tr -d ' '
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw2.cfg
+ config_lines='      43'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw3.cfg
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
+ ip_cleaned=192.168.1.11
+ config_file=cisco/fw1.cfg
+ target_file=targets/192.168.1.11.json
++ tr -d ' '
+ job_pid=39569
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
++ wc -l
+ job_pids+=("${job_pid}")
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 39569)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 39569) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 39569)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ match_count=3
+ site=cisco
+ device=fw3.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ config_lines='      42'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_lines='      28'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=cisco/fw4.cfg
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
++ tr -d ' '
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw5.cfg
+ config_file=cisco/fw2.cfg
++ wc -l
++ wc -l
++ tr -d ' '
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
++ wc -l
+ job_pid=39593
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 39593)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local ip_addr=192.168.2.12
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 39593) ]]
+ local target_file=targets/192.168.2.12.json
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 39593)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ match_count=1
+ site=cisco
+ device=fw1.cfg
+ match_count=1
+ site=cisco
+ device=fw5.cfg
++ print 172.16.0.5
+ config_lines='      29'
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_lines='      43'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
] ]]
+ IFS=
+ read -r config_file
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      28' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ tr -d ' '
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw2.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
++ wc -l
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq '{configs: .}'
++ tr -d ' '
+ local matched_files=configs/cisco/fw5.cfg
+ ip_cleaned=172.16.0.5
+ [[ -n configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ target_file=targets/172.16.0.5.json
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
+ job_pid=39617
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 39617)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 39617) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 39617)'
+ newline
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local count=1
+ (( i = 0 ))
++ wc -l
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ match_count=1
+ site=cisco
+ device=fw4.cfg
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print 172.16.1.6
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n 172.16.1.6 ]]
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
++ echo -en 172.16.1.6
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ tr -d '\r'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
+ config_file=cisco/fw3.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
+ config_lines='      28'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 43,
      "count": 3
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw5.cfg
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
++ wc -l
+ IFS=
+ read -r config_file
+ job_pid=39640
+ job_pids+=("${job_pid}")
+ config_file=cisco/fw3.cfg
++ tr -d ' '
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 39640)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 39640) ]]
++ wc -l
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 39640)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_lines='      43'
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw3.cfg
+ site=cisco
+ device=fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=cisco/fw4.cfg
++ tr -d ' '
++ wc -l
+ config_lines='      43'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ print '[]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      28' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 28,
      "count": 1
    }
  ]
}'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ jq -r
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ return 0
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw3.cfg
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ ip_cleaned=192.0.2.50
++ wc -l
+ target_file=targets/192.0.2.50.json
++ tr -d ' '
+ match_count=1
+ job_pid=39667
++ wc -l
+ site=cisco
+ job_pids+=("${job_pid}")
+ device=fw3.cfg
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 39667)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 39667) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 39667)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ local ip_addr=192.0.2.50
+ newline
+ local count=1
+ local target_file=targets/192.0.2.50.json
+ (( i = 0 ))
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_lines='      29'
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      43' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
+ match_count=3
++ tr -d '\r'
+ site=cisco
+ device=fw3.cfg
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ tr -d ' '
++ print '[]'
++ [[ -n [] ]]
+ config_lines='      43'
++ echo -en '[]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw2.cfg
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
++ wc -l
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ ip_cleaned=203.0.113.25
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
+ return 0
+ target_file=targets/203.0.113.25.json
++ tr -d ' '
+ local matched_files=configs/cisco/fw1.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
] ]]
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ match_count=1
+ site=cisco
+ device=fw4.cfg
+ job_pid=39692
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 39692)'
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 39692) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 39692)'
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print 198.51.100.75
+ match_count=1
+ site=cisco
++ [[ -n 198.51.100.75 ]]
+ device=fw2.cfg
++ echo -en 198.51.100.75
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_lines='      42'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 28,
      "count": 1
    }
  ]
}'
+ jq -r
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ tr -d ' '
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq '{configs: .}'
+ job_pid=39717
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 39717)'
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ wc -l
+ local ip_addr=198.51.100.75
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 39717) ]]
+ local target_file=targets/198.51.100.75.json
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 39717)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ IFS=
+ read -r config_file
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ match_count=2
+ site=cisco
+ device=fw1.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
++ jq '{configs: .}'
    },
    "lines": 29,
    "count": 1
  }
]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 43,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
++ print '[]'
+ config_lines='      42'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg
+ IFS=
+ read -r config_file
+ ip_cleaned=172.18.1.20
+ config_file=cisco/fw2.cfg
+ target_file=targets/172.18.1.20.json
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 43,
      "count": 3
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
++ wc -l
++ tr -d ' '
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ return 0
+ job_pid=39738
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 39738)'
++ wc -l
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 39738) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 39738)'
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_lines='      28'
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw1.cfg
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw5.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
++ tr -d ' '
+ return 0
+ config_lines='      43'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 2
  }
]'
+ local matched_files=configs/cisco/fw4.cfg
+ [[ -n configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ tr -d ' '
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 2
  }
]'
+ config_file=cisco/fw4.cfg
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
++ jq '{configs: .}'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ job_pid=39763
+ job_pids+=("${job_pid}")
+ match_count=3
+ site=cisco
+ device=fw5.cfg
+ job_ip_map["$job_pid"]=10.10.10.10
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 39763)'
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 39763) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 39763)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      28' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
+ match_count=3
++ echo -en 192.168.100.100
+ site=cisco
+ device=fw2.cfg
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
++ [[ -n [] ]]
+ IFS=
++ echo -en '[]'
+ read -r config_file
+ return 0
+ config_file=cisco/fw2.cfg
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_lines='      29'
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 2
    }
  ]
}'
+ jq -r
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ job_pid=39782
+ config_file=cisco/fw1.cfg
+ job_pids+=("${job_pid}")
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw4.cfg
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 39782)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 39782) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 39782)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
++ tr -d ' '
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.168.100.100
+ (( i < count ))
+ echo

+ (( i++ ))
+ local target_file=targets/192.168.100.100.json
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ print 172.31.255.254
+ config_lines='      43'
++ [[ -n 172.31.255.254 ]]
++ tr -d '\r'
++ echo -en 172.31.255.254
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 3
  }
]'
+ match_count=2
+ site=cisco
+ device=fw4.cfg
++ jq '{configs: .}'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ tr -d ' '
+ config_file=cisco/fw5.cfg
+ config_lines='      42'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ job_pid=39806
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=172.31.255.254
+ return 0
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 39806)'
++ wc -l
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 39806) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 39806)'
++ tr -d ' '
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284472-21547.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 39521
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 39521)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 39521) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 39521)'
+ newline
+ match_count=3
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ site=cisco
+ for pid in "${job_pids[@]}"
+ kill -0 39527
+ device=fw2.cfg
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 39527)'
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 39527) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 39527)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39536
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 39536)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 39536) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 39536)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39550
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 39550)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 39550) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 39550)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ print '[
  {
    "config": {
      "site": "cisco",
+ for pid in "${job_pids[@]}"
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
+ kill -0 39569
+ ip_address=192.168.1.11
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
] ]]
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 39569)'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
+ config_lines='      28'
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  }
]'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 39569) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 39569)'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39593
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 39593)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 39593) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 39593)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39617
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 39617)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 39617) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 39617)'
+ match_count=1
+ newline
+ site=cisco
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ final_json='{
  "configs": [
+ echo
    {
+ device=fw1.cfg

+ (( i++ ))
+ (( i < count ))
+ config_lines='      42'
+ for pid in "${job_pids[@]}"
+ kill -0 39640
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 28,
      "count": 3
    }
  ]
}'
+ jq -r
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 39667
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 39667)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 39667) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 39667)'
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
+ for pid in "${job_pids[@]}"
+ kill -0 39692
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 39717
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 39738
+ valid_job_pids+=("$pid")
++ tr -d ' '
+ for pid in "${job_pids[@]}"
+ kill -0 39763
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 39782
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 39806
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ print '[]'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ tr -d ' '
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ jq '{configs: .}'
+ match_count=2
+ site=cisco
+ device=fw5.cfg
+ match_count=1
+ site=cisco
+ device=fw1.cfg
+ config_json='[
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
  {
    "count": 3
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      28' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      42' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
+ config_lines='      43'
+ config_lines='      43'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw3.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 2
  }
]'
+ IFS=
++ wc -l
+ read -r config_file
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
++ wc -l
      "device": "fw5.cfg"
    },
    "lines": 28,
    "count": 2
  }
]'
++ wc -l
++ jq '{configs: .}'
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ match_count=1
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ site=cisco
+ device=fw3.cfg
+ return 0
+ match_count=3
+ site=cisco
+ device=fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ config_lines='      43'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      43' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw2.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      43' --argjson count 3 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
++ tr -d ' '
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 28,
      "count": 2
    }
  ]
}'
+ jq -r
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print '[
+ config_json='[
  {
  {
    "config": {
    "config": {
      "site": "cisco",
      "site": "cisco",
      "device": "fw1.cfg"
      "device": "fw1.cfg"
    },
    },
    "lines": 42,
    "lines": 42,
    "count": 1
    "count": 3
  }
  },
  {
]'
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ [[ -n \n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ return 0
+ config_lines='      29'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ wc -l
++ tr -d ' '
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 43,
      "count": 1
    }
  ]
}'
+ jq -r
+ match_count=2
+ site=cisco
+ device=fw4.cfg
+ config_lines='      29'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw4.cfg
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ match_count=1
+ site=cisco
+ device=fw4.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ jq '{configs: .}'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ jq '{configs: .}'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 42,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 42,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ ((  7 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 39640
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 39640)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 39640) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 39640)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39692
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 39692)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 39692) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 39692)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39717
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 39717)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 39717) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 39717)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39738
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 39738)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 39738) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 39738)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39763
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 39763)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 39763) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 39763)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39782
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 39782)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 39782) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 39782)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 39806
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 39806)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 39806) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 39806)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ local total_requested=15
+ local total_mapped=14
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    14'
+ [[ -n Total IPs mapped:    14 ]]
+ local 'message=Total IPs mapped:    14'
+ print 'Total IPs mapped:    14'
+ [[ -n Total IPs mapped:    14 ]]
+ echo -en 'Total IPs mapped:    14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        1'
+ [[ -n \nUnmapped IPs:        1 ]]
+ local 'message=\nUnmapped IPs:        1'
+ print '\nUnmapped IPs:        1'
+ [[ -n \nUnmapped IPs:        1 ]]
+ echo -en '\nUnmapped IPs:        1'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ message '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ local 'message=  - 172.31.255.254'
+ print '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ echo -en '  - 172.31.255.254'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=14
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=40014
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 40014)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 40014) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 40014)'
+ parse_configs 10.0.0.1 01
+ local ip_addr=10.0.0.1
+ newline
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ padded_index=02
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=40017
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 40017)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 40017) ]]
+ parse_configs 10.0.1.2 02
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 40017)'
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 3
+ [[ true == true ]]
+ execute+=(--classify)
+ padded_index=03
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=40021
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 40021)'
+ parse_configs 10.0.2.3 03
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 40021) ]]
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 40021)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 4
+ padded_index=04
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ job_pid=40027
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 40027)'
+ parse_configs 192.168.1.10 04
+ local ip_addr=192.168.1.10
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 40027) ]]
+ local padded_index=04
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 40027)'
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
++ printf %02d 5
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=05
+ job_pid=40033
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ parse_configs 192.168.1.11 05
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 40033)'
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 40033) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 40033)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ padded_index=06
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=40037
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 40037)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 40037) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 40037)'
+ parse_configs 192.168.2.12 06
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
+ local ip_addr=192.168.2.12
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 7
+ [[ true == true ]]
+ padded_index=07
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ logfile=.local/jobs/192.168.1.11.job
+ mkdir -p .local/jobs .local/errors
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=40042
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 40042)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 40042) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 40042)'
+ parse_configs 172.16.0.5 07
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=172.16.0.5
+ ip_addr=172.16.1.6
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=08
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=40049
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 40049)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 40049) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 40049)'
+ parse_configs 172.16.1.6 08
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
+ local ip_addr=172.16.1.6
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 9
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ execute+=(--classify)
+ padded_index=09
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=40056
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 40056)'
+ parse_configs 192.0.2.50 09
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 40056) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 40056)'
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
++ printf %02d 10
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=10
+ job_pid=40065
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 40065)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 40065) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 40065)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ parse_configs 203.0.113.25 10
+ ip_addr=198.51.100.75
+ local ip_addr=203.0.113.25
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ printf %02d 11
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=11
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=40075
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 40075)'
+ parse_configs 198.51.100.75 11
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 40075) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 40075)'
+ local ip_addr=198.51.100.75
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 12
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=12
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=40090
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 40090)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 40090) ]]
+ parse_configs 172.18.1.20 12
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 40090)'
+ local ip_addr=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 13
+ padded_index=13
+ job_pid=40105
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ parse_configs 10.10.10.10 13
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 40105)'
+ local ip_addr=10.10.10.10
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 40105) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 40105)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 14
+ padded_index=14
+ job_pid=40121
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 40121)'
+ parse_configs 192.168.100.100 14
+ local ip_addr=192.168.100.100
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 40121) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 40121)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 40014
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40017
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40021
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40027
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40033
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40037
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40042
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40049
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40056
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40065
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40075
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40090
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40105
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40121
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 40014
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40017
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40021
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40027
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40033
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40037
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40042
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40049
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40056
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40065
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40075
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40090
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40105
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40121
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 40014
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40017
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40021
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 40021)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 40021) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 40021)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40027
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 40027)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 40027) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 40027)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40033
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 40033)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 40033) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 40033)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40037
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 40037)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 40037) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 40037)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40042
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 40042)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 40042) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 40042)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40049
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40056
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 40056)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 40056) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 40056)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40065
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40075
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40090
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 40090)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 40090) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 40090)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40105
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 40121
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ ((  7 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 40014
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 40014)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 40014) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 40014)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40017
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 40017)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 40017) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 40017)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40049
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 40049)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 40049) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 40049)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40065
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 40065)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 40065) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 40065)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40075
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 40075)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 40075) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 40075)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40105
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 40105)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 40105) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 40105)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 40121
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 40121)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 40121) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 40121)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747284476025514000 3407
+ export batch_id=MTc0NzI4NDQ3
+ batch_id=MTc0NzI4NDQ3
++ date +%s
+ batch_suffix=1747284476-11841
+ batch_configs_list=configs--MTc0NzI4NDQ3-1747284476-11841.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ printf '%s\n' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ range_first=6
+ range_last=8
+ message '[ MTc0NzI4NDQ3 ] Files 6 -> 8'
+ [[ -n [ MTc0NzI4NDQ3 ] Files 6 -> 8 ]]
+ local 'message=[ MTc0NzI4NDQ3 ] Files 6 -> 8'
+ print '[ MTc0NzI4NDQ3 ] Files 6 -> 8'
+ [[ -n [ MTc0NzI4NDQ3 ] Files 6 -> 8 ]]
+ echo -en '[ MTc0NzI4NDQ3 ] Files 6 -> 8'
[ MTc0NzI4NDQ3 ] Files 6 -> 8+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local base=configs--MTc0NzI4NDQ3-1747284476-11841.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzI4NDQ3-1747284476-11841.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzI4NDQ3-1747284476-11841.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzI4NDQ3-1747284476-11841.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
File: configs--MTc0NzI4NDQ3-1747284476-11841.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1
Size: 66 bytes
Blocks/Inode: 8 / 237184212
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 14 21:47:56 2025
Modify: May 14 21:47:56 2025
Change: May 14 21:47:56 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list]'
+ print 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list]'
Batch-Config file: [configs--MTc0NzI4NDQ3-1747284476-11841.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=42971
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 42971)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 42971) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 42971)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ ip_cleaned=10.0.1.2
+ IFS=
+ target_file=targets/10.0.1.2.json
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ job_pid=42977
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 42977)'
++ wc -l
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 42977) ]]
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 42977)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      21'
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw8.cfg
+ config_file=cisco/fw6.cfg
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
++ wc -l
++ tr -d ' '
++ wc -l
+ job_pid=42990
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 42990)'
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 42990) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 42990)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
+ site=cisco
+ device=fw8.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ config_lines='      26'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg
++ wc -l
++ tr -d ' '
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=192.168.1.10
+ config_file=cisco/fw7.cfg
+ target_file=targets/192.168.1.10.json
+ job_pid=43004
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 43004)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 43004) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 43004)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local ip_addr=192.168.1.10
+ local count=1
+ (( i = 0 ))
+ local target_file=targets/192.168.1.10.json
+ (( i < count ))
+ echo
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=cisco
+ device=fw6.cfg
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      26'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw7.cfg
+ job_pid=43020
+ job_pids+=("${job_pid}")
+ config_file=cisco/fw6.cfg
+ job_ip_map["$job_pid"]=192.168.1.11
++ wc -l
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 43020)'
++ tr -d ' '
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 43020) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 43020)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
+ site=cisco
+ device=fw7.cfg
+ config_lines='      26'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ print '[]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq '{configs: .}'
++ true
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      26' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ jq -r
+ ip_cleaned=192.168.2.12
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg
+ target_file=targets/192.168.2.12.json
++ wc -l
+ job_pid=43042
+ job_pids+=("${job_pid}")
++ tr -d ' '
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 43042)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 43042) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 43042)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.168.2.12
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ match_count=2
+ site=cisco
+ device=fw6.cfg
++ print '[]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
    }
  ]
}'
+ jq -r
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ config_json='[
+ ip_cleaned=172.16.0.5
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ target_file=targets/172.16.0.5.json
+ IFS=
+ read -r config_file
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ return 0
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ job_pid=43052
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 43052)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=172.16.0.5
++ wc -l
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 43052) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 43052)'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
++ jq '{configs: .}'
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ config_lines='      21'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
+ return 0
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw8.cfg
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
++ wc -l
++ tr -d ' '
++ print '[
+ final_json='{
  {
  "configs": [
    "config": {
    {
      "site": "cisco",
      "config": {
      "device": "fw6.cfg"
        "site": "cisco",
    },
        "device": "fw7.cfg"
    "lines": 26,
      },
    "count": 2
      "lines": 26,
  }
      "count": 1
    }
  ]
}'
]'
+ ip_cleaned=172.16.1.6
+ jq -r
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ jq '{configs: .}'
+ target_file=targets/172.16.1.6.json
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ wc -l
+ job_pid=43072
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 43072)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 43072) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 43072)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
+ site=cisco
+ device=fw8.cfg
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_lines='      21'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw8.cfg
++ wc -l
++ tr -d ' '
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    }
  ]
}'
+ jq -r
++ true
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ return 0
+ job_pid=43088
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 43088)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 43088) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 43088)'
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=2
+ site=cisco
+ device=fw8.cfg
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ job_pid=43101
++ wc -l
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 43101)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 43101) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 43101)'
+ newline
+ local count=1
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
] ]]
++ jq '{configs: .}'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
+ config_lines='      26'
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ tr -d ' '
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ local 'matched_files=configs/cisco/fw6.cfg
configs/cisco/fw8.cfg'
+ [[ -n configs/cisco/fw6.cfg
configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
+ job_pid=43116
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 43116)'
++ wc -l
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 43116) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 43116)'
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ match_count=2
+ site=cisco
+ device=fw7.cfg
+ return 0
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 2
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      26' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_lines='      26'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg
++ wc -l
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
++ tr -d ' '
+ job_pid=43132
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 43132)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 43132) ]]
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 43132)'
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ newline
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=2
+ site=cisco
+ device=fw6.cfg
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
++ tr -d '\r'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ return 0
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ jq '{configs: .}'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ job_pid=43144
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 43144)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 43144) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 43144)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 26,
      "count": 2
    }
  ]
}'
+ config_file=cisco/fw8.cfg
+ jq -r
++ wc -l
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=192.168.100.100
+ config_file=cisco/fw6.cfg
+ target_file=targets/192.168.100.100.json
+ job_pid=43153
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 43153)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 43153) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 43153)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ newline
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_lines='      21'
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw8.cfg
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ return 0
++ tr -d ' '
+ config_lines='      26'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
++ wc -l
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ tr -d ' '
+ config_file=cisco/fw7.cfg
+ job_pid=43169
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 43169)'
+ match_count=1
+ site=cisco
+ device=fw8.cfg
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 43169) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 43169)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1/configs--MTc0NzI4NDQ3-1747284476-11841.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
++ wc -l
+ for pid in "${job_pids[@]}"
+ kill -0 42971
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 42971)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 42971) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 42971)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 42977
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 42977)'
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 42977) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 42977)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 42990
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 42990)'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 42990) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 42990)'
+ newline
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43004
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 43004)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 43004) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 43004)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43020
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 43020)'
+ match_count=1
+ site=cisco
+ device=fw6.cfg
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 43020) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 43020)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43042
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 43042)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 43042) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 43042)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43052
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 43052)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 43052) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 43052)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43072
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 43072)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 43072) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 43072)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

++ print '[]'
+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43088
++ [[ -n [] ]]
+ ip_address=192.0.2.50
++ echo -en '[]'
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 43088)'
+ config_lines='      26'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 43088) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 43088)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43101
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43116
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 43116)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 43116) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 43116)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43132
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 43132)'
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 43132) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 43132)'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43144
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43153
+ valid_job_pids+=("$pid")
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw7.cfg
+ for pid in "${job_pids[@]}"
+ kill -0 43169
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ wc -l
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=2
+ site=cisco
+ device=fw7.cfg
+ config_lines='      26'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ jq '{configs: .}'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw7.cfg
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      26' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ wc -l
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ match_count=1
+ site=cisco
+ device=fw7.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      26' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 2
  }
++ jq '{configs: .}'
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 26,
      "count": 2
    }
  ]
}'
+ jq -r
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 26,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 43101
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 43101)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 43101) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 43101)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43144
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 43144)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 43144) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 43144)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43153
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 43153)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 43153) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 43153)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43169
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 43169)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 43169) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 43169)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ local total_requested=15
+ local total_mapped=29
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    29'
+ [[ -n Total IPs mapped:    29 ]]
+ local 'message=Total IPs mapped:    29'
+ print 'Total IPs mapped:    29'
+ [[ -n Total IPs mapped:    29 ]]
+ echo -en 'Total IPs mapped:    29'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        -14'
+ [[ -n \nUnmapped IPs:        -14 ]]
+ local 'message=\nUnmapped IPs:        -14'
+ print '\nUnmapped IPs:        -14'
+ [[ -n \nUnmapped IPs:        -14 ]]
+ echo -en '\nUnmapped IPs:        -14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ tr -d '\r'
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ tr -d '\r'
++ echo -en 10.10.10.10
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=29
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=43326
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 43326)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 43326) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 43326)'
+ parse_configs 10.0.0.1 01
+ local ip_addr=10.0.0.1
+ newline
+ local count=1
+ (( i = 0 ))
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=43330
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 43330)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 43330) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 43330)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=03
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43333
+ job_pids+=("${job_pid}")
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ job_ip_map["$job_pid"]=10.0.2.3
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 43333)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 43333) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 43333)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ parse_configs 10.0.2.3 03
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 4
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ padded_index=04
+ mkdir -p .local/jobs .local/errors
+ job_pid=43339
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 43339)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 43339) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 43339)'
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ parse_configs 192.168.1.10 04
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 5
+ padded_index=05
+ job_pid=43346
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 43346)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 43346) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 43346)'
+ parse_configs 192.168.1.11 05
+ newline
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=06
+ job_pid=43352
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 43352)'
+ parse_configs 192.168.2.12 06
+ local ip_addr=192.168.2.12
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 43352) ]]
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 43352)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 7
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=07
+ job_pid=43358
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 43358)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 43358) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 43358)'
+ parse_configs 172.16.0.5 07
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local ip_addr=172.16.0.5
+ ((  ip_index < total_ips  ))
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ logfile=.local/jobs/192.168.2.12.job
+ mkdir -p .local/jobs .local/errors
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=08
+ job_pid=43366
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ parse_configs 172.16.1.6 08
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 43366)'
+ local ip_addr=172.16.1.6
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 43366) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 43366)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.16.0.5.job
++ printf %02d 9
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=09
+ job_pid=43377
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 43377)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 43377) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 43377)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
+ parse_configs 192.0.2.50 09
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
+ logfile=.local/jobs/172.16.1.6.job
++ print cfg,conf,cnf
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--classify)
+ padded_index=10
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43389
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 43389)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 43389) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 43389)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ parse_configs 203.0.113.25 10
+ ip_addr=198.51.100.75
+ local ip_addr=203.0.113.25
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ padded_index=11
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43402
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 43402)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 43402) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 43402)'
+ parse_configs 198.51.100.75 11
+ local ip_addr=198.51.100.75
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 12
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=12
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43414
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 43414)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 43414) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 43414)'
+ parse_configs 172.18.1.20 12
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
+ local ip_addr=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 13
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=13
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43428
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 43428)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 43428) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 43428)'
+ parse_configs 10.10.10.10 13
+ newline
+ local ip_addr=10.10.10.10
+ local count=1
+ (( i = 0 ))
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 14
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=14
+ job_pid=43446
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 43446)'
+ parse_configs 192.168.100.100 14
+ local ip_addr=192.168.100.100
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 43446) ]]
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 43446)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 15
+ padded_index=15
+ job_pid=43467
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 43467)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 43467) ]]
+ parse_configs 10.0.0.1 15
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 43467)'
+ local ip_addr=10.0.0.1
+ newline
+ local count=1
+ local padded_index=15
+ (( i = 0 ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 16
+ padded_index=16
+ job_pid=43487
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 43487)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 43487) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 43487)'
+ parse_configs 10.0.1.2 16
+ newline
+ local ip_addr=10.0.1.2
+ local count=1
+ (( i = 0 ))
+ local padded_index=16
+ (( i < count ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=15 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 17
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=17
+ job_pid=43510
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 43510)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 43510) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 43510)'
+ parse_configs 10.0.2.3 17
+ local ip_addr=10.0.2.3
+ local padded_index=17
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ printf %02d 18
+ padded_index=18
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
+ logfile=.local/jobs/10.0.1.2.job
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=16 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43530
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ parse_configs 192.168.1.10 18
+ local ip_addr=192.168.1.10
+ local padded_index=18
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 43530)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 43530) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 43530)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ printf %02d 19
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=19
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=17 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43560
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 43560)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 43560) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 43560)'
+ parse_configs 192.168.1.11 19
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=192.168.1.11
+ ip_addr=192.168.2.12
+ local padded_index=19
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 20
+ padded_index=20
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=18 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43586
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 43586)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 43586) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 43586)'
+ newline
+ local count=1
+ (( i = 0 ))
+ parse_configs 192.168.2.12 20
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
+ local ip_addr=192.168.2.12
+ local padded_index=20
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=19 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 21
+ padded_index=21
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43620
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 43620)'
+ parse_configs 172.16.0.5 21
+ local ip_addr=172.16.0.5
+ local padded_index=21
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 43620) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 43620)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 22
+ padded_index=22
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=20 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43644
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 43644)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 43644) ]]
+ parse_configs 172.16.1.6 22
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 43644)'
+ local ip_addr=172.16.1.6
+ local padded_index=22
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=21 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 23
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=23
+ job_pid=43686
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 43686)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 43686) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 43686)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
+ parse_configs 192.0.2.50 23
+ local ip_addr=192.0.2.50
+ local padded_index=23
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=22 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 24
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=24
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43715
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 43715)'
+ parse_configs 203.0.113.25 24
+ local ip_addr=203.0.113.25
+ local padded_index=24
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 43715) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 43715)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 25
+ padded_index=25
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=23 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43748
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 43748)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 43748) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 43748)'
+ newline
+ local count=1
+ (( i = 0 ))
+ parse_configs 198.51.100.75 25
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
+ local ip_addr=198.51.100.75
+ local padded_index=25
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=24 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 26
+ padded_index=26
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43783
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 43783)'
+ parse_configs 172.18.1.20 26
+ local ip_addr=172.18.1.20
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 43783) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 43783)'
+ local padded_index=26
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
++ printf %02d 27
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=25 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=27
+ job_pid=43812
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 43812)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 43812) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 43812)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ parse_configs 10.10.10.10 27
+ local ip_addr=10.10.10.10
+ local padded_index=27
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=26 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 28
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=28
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=43855
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 43855)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 43855) ]]
+ parse_configs 192.168.100.100 28
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 43855)'
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.168.100.100
+ local padded_index=28
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 29
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=29
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=27 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=43889
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 43889)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 43889) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 43889)'
+ parse_configs 172.31.255.254 29
+ local ip_addr=172.31.255.254
+ local padded_index=29
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 43326
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43330
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43333
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43339
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43346
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43352
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43358
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43366
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43377
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43389
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43402
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43414
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43428
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43446
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43467
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43487
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43510
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43530
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43560
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43586
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43620
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43644
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43686
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43715
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43748
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43783
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43812
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43855
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43889
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=28 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=29 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 43326
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43330
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43333
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43339
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43346
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43352
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43358
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43366
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43377
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43389
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43402
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43414
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43428
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43446
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43467
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43487
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43510
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43530
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43560
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43586
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43620
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43644
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43686
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43715
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43748
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43783
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43812
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43855
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43889
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.2.12'
+ [[ -n \n[DONE] IP: 192.168.2.12 ]]
+ echo -en '\n[DONE] IP: 192.168.2.12'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.31.255.254'
+ [[ -n \n[DONE] IP: 172.31.255.254 ]]
+ echo -en '\n[DONE] IP: 172.31.255.254'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 43326
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 43326)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 43326) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 43326)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43330
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 43330)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 43330) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 43330)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43333
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 43333)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 43333) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 43333)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43339
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 43339)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 43339) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 43339)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43346
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43352
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 43352)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 43352) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 43352)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43358
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 43358)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 43358) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 43358)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43366
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43377
+ ip=192.0.2.50
+ local status=0
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 43377)'
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 43377) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 43377)'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43389
+ local status=0
+ ((  status != 0  ))
+ return 0
+ print '\n[DONE] IP: 192.168.100.100'
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43402
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43414
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ kill -0 43428
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 43428)'
+ return 0
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 43428) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 43428)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43446
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43467
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 43467)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 43467) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 43467)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43487
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 43487)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 43487) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 43487)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43510
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 43510)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 43510) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 43510)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43530
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 43530)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 43530) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 43530)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43560
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43586
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 43586)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 43586) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 43586)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43620
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43644
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43686
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43715
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43748
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43783
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43812
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 43812)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 43812) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 43812)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43855
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 43889
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 43889)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 43889) ]]
+ local status=0
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 43889)'
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ [[ -n \n[DONE] IP: 192.0.2.50 ]]
+ echo -en '\n[DONE] IP: 192.0.2.50'
+ sleep 0.5
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 198.51.100.75'
+ [[ -n \n[DONE] IP: 198.51.100.75 ]]
+ echo -en '\n[DONE] IP: 198.51.100.75'
+ return 0
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 43346
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 43346)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 43346) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 43346)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43366
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 43366)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 43366) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 43366)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43389
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 43389)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 43389) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 43389)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43402
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 43402)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 43402) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 43402)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43414
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 43414)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 43414) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 43414)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43446
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 43446)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 43446) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 43446)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43560
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 43560)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 43560) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 43560)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43620
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 43620)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 43620) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 43620)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43644
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 43644)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 43644) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 43644)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43686
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 43686)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 43686) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 43686)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43715
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 43715)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 43715) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 43715)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43748
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 43748)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 43748) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 43748)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43783
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 43783)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 43783) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 43783)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 43855
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 43855)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 43855) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 43855)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=10
+ [[ 10 -lt 8 ]]
+ local json_dir=reports/json
+ expected_reports=29
+ message 'Expected Reports: 29'
+ [[ -n Expected Reports: 29 ]]
+ local 'message=Expected Reports: 29'
+ print 'Expected Reports: 29'
+ [[ -n Expected Reports: 29 ]]
+ echo -en 'Expected Reports: 29'
Expected Reports: 29+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ find reports/json -type f -name '*.json'
++ wc -l
++ sed -e 's|\ ||g'
+ actual_reports=15
+ message 'Actual Reports: 29'
+ [[ -n Actual Reports: 29 ]]
+ local 'message=Actual Reports: 29'
+ print 'Actual Reports: 29'
+ [[ -n Actual Reports: 29 ]]
+ echo -en 'Actual Reports: 29'
Actual Reports: 29+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ generate_csvoutput
+ local output_csv=reports/reports.csv
+ local json_dir=reports/json
+ [[ ! -d reports/json ]]
+ find reports/json -type f -name '*.json'
+ sort
reports/json/10.0.0.1.json
reports/json/10.0.1.2.json
reports/json/10.0.2.3.json
reports/json/10.10.10.10.json
reports/json/172.16.0.5.json
reports/json/172.16.1.6.json
reports/json/172.18.1.20.json
reports/json/172.31.255.254.json
reports/json/192.0.2.50.json
reports/json/192.168.1.10.json
reports/json/192.168.1.11.json
reports/json/192.168.100.100.json
reports/json/192.168.2.12.json
reports/json/198.51.100.75.json
reports/json/203.0.113.25.json
+ message target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ local message=target,site,device,object,entry,description,group
+ print target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ echo -en target,site,device,object,entry,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ find reports/json -type f -name '*.json'
+ sort
+ read -r json
+ message 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ local 'message=Processing reports/json/10.0.0.1.json'
+ print 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ echo -en 'Processing reports/json/10.0.0.1.json'
Processing reports/json/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.0.1.json
{
  "target": "10.0.0.1",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Stark-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 192.168.1.10",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.0.0.1"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network RedRoom-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 172.16.1.6"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.0.1.json
+ read -r json
+ message 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ local 'message=Processing reports/json/10.0.1.2.json'
+ print 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ echo -en 'Processing reports/json/10.0.1.2.json'
Processing reports/json/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.1.2.json
{
  "target": "10.0.1.2",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Gotham-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object host 192.168.1.11",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.0.1.2"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 10.0.1.2 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Corps-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Xmen-LAN",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.1.2"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Xmen-LAN",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.1.2"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.1.2.json
+ read -r json
+ message 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ local 'message=Processing reports/json/10.0.2.3.json'
+ print 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ echo -en 'Processing reports/json/10.0.2.3.json'
Processing reports/json/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.2.3.json
{
  "target": "10.0.2.3",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Wakanda-Core",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.2.3",
              "network-object 10.0.0.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.0.2.3"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 10.0.2.3 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Justice-LAN",
            "description": "false",
            "entries": [
              "network-object host 172.31.255.254",
              "network-object 10.0.2.3"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Justice-LAN",
            "description": "false",
            "entries": [
              "network-object host 172.31.255.254",
              "network-object 10.0.2.3"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.2.3.json
+ read -r json
+ message 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ local 'message=Processing reports/json/10.10.10.10.json'
+ print 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ echo -en 'Processing reports/json/10.10.10.10.json'
Processing reports/json/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.10.10.10.json
{
  "target": "10.10.10.10",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Rogers-WiFi",
            "description": "false",
            "entries": [
              "network-object host 10.10.10.10",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Shield-WiFi",
            "description": "false",
            "entries": [
              "network-object host 10.10.10.10",
              "network-object 192.168.100.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.10.10.10"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 10.10.10.10 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Sector-Wireless",
            "description": "false",
            "entries": [
              "network-object host 192.168.100.100",
              "network-object host 10.10.10.10"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.10.10.10"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 10.10.10.10"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 10.10.10.10"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.10.10.10.json
+ read -r json
+ message 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ local 'message=Processing reports/json/172.16.0.5.json'
+ print 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ echo -en 'Processing reports/json/172.16.0.5.json'
Processing reports/json/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.16.0.5.json
{
  "target": "172.16.0.5",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Panther-Edge",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 172.16.0.5"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.0.5"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 172.16.0.5"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 172.16.0.5"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.0.5"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 172.16.0.5"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.0.5"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.16.0.5.json
+ read -r json
+ message 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ local 'message=Processing reports/json/172.16.1.6.json'
+ print 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ echo -en 'Processing reports/json/172.16.1.6.json'
Processing reports/json/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.16.1.6.json
{
  "target": "172.16.1.6",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Batcave-Wireless",
            "description": "false",
            "entries": [
              "network-object host 172.16.1.6",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Batcave-Wireless",
            "description": "false",
            "entries": [
              "network-object host 172.16.1.6",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Batcave-Wireless",
            "description": "false",
            "entries": [
              "network-object host 172.16.1.6",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network RedRoom-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 172.16.1.6 any"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network RedRoom-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 172.16.1.6 any"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network RedRoom-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.16.1.6"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 172.16.1.6 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.16.1.6.json
+ read -r json
+ message 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ local 'message=Processing reports/json/172.18.1.20.json'
+ print 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ echo -en 'Processing reports/json/172.18.1.20.json'
Processing reports/json/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.18.1.20.json
{
  "target": "172.18.1.20",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.18.1.20"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.18.1.20"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 172.18.1.20"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.18.1.20.json
+ read -r json
+ message 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ local 'message=Processing reports/json/172.31.255.254.json'
+ print 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ echo -en 'Processing reports/json/172.31.255.254.json'
Processing reports/json/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.31.255.254.json
{
  "target": "172.31.255.254",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Justice-LAN",
            "description": "false",
            "entries": [
              "network-object host 172.31.255.254",
              "network-object 10.0.2.3"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.31.255.254.json
+ read -r json
+ message 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ local 'message=Processing reports/json/192.0.2.50.json'
+ print 'Processing reports/json/192.0.2.50.json'
+ [[ -n Processing reports/json/192.0.2.50.json ]]
+ echo -en 'Processing reports/json/192.0.2.50.json'
Processing reports/json/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.0.2.50.json
{
  "target": "192.0.2.50",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Avengers-DMZ",
            "description": "false",
            "entries": [
              "network-object host 192.0.2.50",
              "network-object host 203.0.113.25",
              "network-object 192.168.2.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.0.2.50"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 192.0.2.50"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.0.2.50"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 192.0.2.50"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.0.2.50"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.0.2.50.json
+ read -r json
+ message 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ local 'message=Processing reports/json/192.168.1.10.json'
+ print 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ echo -en 'Processing reports/json/192.168.1.10.json'
Processing reports/json/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.1.10.json
{
  "target": "192.168.1.10",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Stark-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 192.168.1.10",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Wakanda-Core",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.2.3",
              "network-object 10.0.0.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Xmen-LAN",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.1.2"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.168.1.10"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Xmen-LAN",
            "description": "false",
            "entries": [
              "network-object host 192.168.1.10",
              "network-object host 10.0.1.2"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.168.1.10"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.1.10.json
+ read -r json
+ message 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ local 'message=Processing reports/json/192.168.1.11.json'
+ print 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ echo -en 'Processing reports/json/192.168.1.11.json'
Processing reports/json/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.1.11.json
{
  "target": "192.168.1.11",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Gotham-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object host 192.168.1.11",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Gotham-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object host 192.168.1.11",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Gotham-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object host 192.168.1.11",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Lantern-DMZ",
            "description": "false",
            "entries": [
              "network-object host 172.18.1.20",
              "network-object host 192.168.1.11"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.1.11.json
+ read -r json
+ message 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ local 'message=Processing reports/json/192.168.100.100.json'
+ print 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ echo -en 'Processing reports/json/192.168.100.100.json'
Processing reports/json/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.100.100.json
{
  "target": "192.168.100.100",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Rogers-WiFi",
            "description": "false",
            "entries": [
              "network-object host 10.10.10.10",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Batcave-Wireless",
            "description": "false",
            "entries": [
              "network-object host 172.16.1.6",
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Sector-Wireless",
            "description": "false",
            "entries": [
              "network-object host 192.168.100.100",
              "network-object host 10.10.10.10"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.168.100.100"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 192.168.100.100"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 192.168.100.100"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.100.100.json
+ read -r json
+ message 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ local 'message=Processing reports/json/192.168.2.12.json'
+ print 'Processing reports/json/192.168.2.12.json'
+ [[ -n Processing reports/json/192.168.2.12.json ]]
+ echo -en 'Processing reports/json/192.168.2.12.json'
Processing reports/json/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.2.12.json
{
  "target": "192.168.2.12",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Hydra-Edge",
            "description": "false",
            "entries": [
              "network-object host 192.168.2.12",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.2.12.json
+ read -r json
+ message 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ local 'message=Processing reports/json/198.51.100.75.json'
+ print 'Processing reports/json/198.51.100.75.json'
+ [[ -n Processing reports/json/198.51.100.75.json ]]
+ echo -en 'Processing reports/json/198.51.100.75.json'
Processing reports/json/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/198.51.100.75.json
{
  "target": "198.51.100.75",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Wayne-DMZ",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Wayne-DMZ",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Wayne-DMZ",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 198.51.100.75"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Hydra-Edge",
            "description": "false",
            "entries": [
              "network-object host 192.168.2.12",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Hydra-Edge",
            "description": "false",
            "entries": [
              "network-object host 192.168.2.12",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Hydra-Edge",
            "description": "false",
            "entries": [
              "network-object host 192.168.2.12",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 198.51.100.75"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/198.51.100.75.json
+ read -r json
+ message 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ local 'message=Processing reports/json/203.0.113.25.json'
+ print 'Processing reports/json/203.0.113.25.json'
+ [[ -n Processing reports/json/203.0.113.25.json ]]
+ echo -en 'Processing reports/json/203.0.113.25.json'
Processing reports/json/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/203.0.113.25.json
{
  "target": "203.0.113.25",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Avengers-DMZ",
            "description": "false",
            "entries": [
              "network-object host 192.0.2.50",
              "network-object host 203.0.113.25",
              "network-object 192.168.2.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 203.0.113.25"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Wayne-DMZ",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 198.51.100.75"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip any host 203.0.113.25"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Panther-Edge",
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25",
              "network-object host 172.16.0.5"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": false,
            "description": "false",
            "entries": [
              "network-object host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg",
        "objects": [
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 203.0.113.25"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/203.0.113.25.json
+ read -r json
+ print_file reports/reports.csv
+ [[ -n reports/reports.csv ]]
+ local target_file=reports/reports.csv
+ [[ true == true ]]
+ [[ -f reports/reports.csv ]]
+ case "${target_file}" in
+ cat reports/reports.csv
target,site,device,object,entry,description,group

"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object","host 10.0.0.1","false","Unclassified"
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","false","Unclassified"
"10.0.0.1","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.0.1","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.0.1","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object","host 10.0.1.2","false","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","false","Unclassified"
"10.0.1.2","cisco","fw4.cfg","object-group","network-object host 10.0.1.2","false","Unclassified"
"10.0.1.2","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"10.0.1.2","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object","host 10.0.2.3","false","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","false","Unclassified"
"10.0.2.3","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","false","Unclassified"
"10.0.2.3","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","false","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object","host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","false","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","false","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object","host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw6.cfg","object-group","network-object host 10.10.10.10","false","Unclassified"
"10.10.10.10","cisco","fw6.cfg","object-group","network-object host 10.10.10.10","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object","host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object-group","network-object host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object","host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object-group","network-object host 172.16.0.5","false","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object","host 172.16.0.5","false","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","false","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","false","Unclassified"
"172.31.255.254","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","false","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object","host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object-group","network-object host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object","host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object-group","network-object host 192.0.2.50","false","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object","host 192.0.2.50","false","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object","host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","false","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object","host 192.168.1.10","false","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","false","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","false","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","false","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","false","Unclassified"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","false","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","false","Unclassified"
"192.168.100.100","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object-group","network-object host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object","host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object-group","network-object host 192.168.100.100","false","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object","host 192.168.100.100","false","Unclassified"
"192.168.2.12","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","false","Unclassified"
"192.168.2.12","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"192.168.2.12","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","false","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object-group","network-object host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw8.cfg","object","host 203.0.113.25","false","Unclassified"
"203.0.113.25","cisco","fw8.cfg","object","host 203.0.113.25","false","Unclassified"
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ local 'message=CSV Report Summary (tabulated):'
+ print 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ echo -en 'CSV Report Summary (tabulated):'
CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ column -t -s, reports/reports.csv
+ less -SFX
target             site     device     object          entry                                                            description  group
"10.0.0.1"         "cisco"  "fw1.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
"10.0.0.1"         "cisco"  "fw1.cfg"  "object"        "host 10.0.0.1"                                                  "false"      "Unclassified"
"10.0.0.1"         "cisco"  "fw1.cfg"  "access-list"   "access-list OUTSIDE extended permit ip host 10.0.0.1 any"       "false"      "Unclassified"
"10.0.0.1"         "cisco"  "fw5.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
"10.0.0.1"         "cisco"  "fw8.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
"10.0.0.1"         "cisco"  "fw8.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw2.cfg"  "object-group"  "network-object host 10.0.1.2"                                   "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw2.cfg"  "object"        "host 10.0.1.2"                                                  "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw2.cfg"  "access-list"   "access-list OUTSIDE extended permit ip host 10.0.1.2 any"       "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw4.cfg"  "object-group"  "network-object host 10.0.1.2"                                   "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw6.cfg"  "object-group"  "network-object host 192.168.1.10"                               "false"      "Unclassified"
"10.0.1.2"         "cisco"  "fw6.cfg"  "object-group"  "network-object host 192.168.1.10"                               "false"      "Unclassified"
"10.0.2.3"         "cisco"  "fw3.cfg"  "object-group"  "network-object host 192.168.1.10"                               "false"      "Unclassified"
"10.0.2.3"         "cisco"  "fw3.cfg"  "object"        "host 10.0.2.3"                                                  "false"      "Unclassified"
"10.0.2.3"         "cisco"  "fw3.cfg"  "access-list"   "access-list OUTSIDE extended permit ip host 10.0.2.3 any"       "false"      "Unclassified"
"10.0.2.3"         "cisco"  "fw7.cfg"  "object-group"  "network-object host 172.31.255.254"                             "false"      "Unclassified"
"10.0.2.3"         "cisco"  "fw7.cfg"  "object-group"  "network-object host 172.31.255.254"                             "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw1.cfg"  "object-group"  "network-object host 10.10.10.10"                                "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw3.cfg"  "object-group"  "network-object host 10.10.10.10"                                "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw3.cfg"  "object"        "host 10.10.10.10"                                               "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw3.cfg"  "access-list"   "access-list OUTSIDE extended permit ip host 10.10.10.10 any"    "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw4.cfg"  "object-group"  "network-object host 192.168.100.100"                            "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw4.cfg"  "object"        "host 10.10.10.10"                                               "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw6.cfg"  "object-group"  "network-object host 10.10.10.10"                                "false"      "Unclassified"
"10.10.10.10"      "cisco"  "fw6.cfg"  "object-group"  "network-object host 10.10.10.10"                                "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw3.cfg"  "object-group"  "network-object host 203.0.113.25"                               "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw3.cfg"  "object"        "host 172.16.0.5"                                                "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw3.cfg"  "access-list"   "access-list OUTSIDE extended permit ip any host 172.16.0.5"     "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw8.cfg"  "object-group"  "network-object host 172.16.0.5"                                 "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw8.cfg"  "object"        "host 172.16.0.5"                                                "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw8.cfg"  "object-group"  "network-object host 172.16.0.5"                                 "false"      "Unclassified"
"172.16.0.5"       "cisco"  "fw8.cfg"  "object"        "host 172.16.0.5"                                                "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw2.cfg"  "object-group"  "network-object host 172.16.1.6"                                 "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw2.cfg"  "object-group"  "network-object host 172.16.1.6"                                 "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw2.cfg"  "object-group"  "network-object host 172.16.1.6"                                 "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw5.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw5.cfg"  "object"        "host 172.16.1.6"                                                "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw5.cfg"  "access-list"   "access-list OUTSIDE extended permit ip host 172.16.1.6 any"     "false"      "Unclassified"
"172.16.1.6"       "cisco"  "fw5.cfg"  "object-group"  "network-object host 10.0.0.1"                                   "false"      "Unclassified"
+ return 0
+ local elapsed=9
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '[INFO] Started at: %s\n' '2025-05-14 21:47:52'
[INFO] Started at: 2025-05-14 21:47:52
+ printf '[INFO] Total runtime: %02d:%02d:%02d\n' 0 0 9
[INFO] Total runtime: 00:00:09
+ return 0
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1 ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.4JysxVx2J1

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzI4NDQ3NzQyODY2NDAwMAo
++ divisor=MTc0NzI4NDQ3NzQyODY2NDAwMAo
+ source ./scripts/tools-extraction.shell
++ [[ -n '' ]]
++ readonly __TOOLS_EXTRACTION_SOURCED=1
++ __TOOLS_EXTRACTION_SOURCED=1
++ alias extract-configs=extract_configs
++ alias process-configs=process_configs
+ alias parse-configs=main
+ matched_blocks_byfile=()
+ declare -gA matched_blocks_byfile
+ export script_name=./scripts/parse-configs.shell
+ script_name=./scripts/parse-configs.shell
+ [[ 9 -ge 1 ]]
+ [[ --configs=configs =~ ^-*(h|help)$ ]]
+ main --configs=configs --ip-addr=10.0.0.1 --index=15 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ file_extensions=()
+ declare -a file_extensions
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --configs=configs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ configs =~ ^(classify|g)$ ]]
+ [[ configs =~ ^(file-ext|x)$ ]]
+ [[ configs =~ ^(configs|c)$ ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ [[ configs =~ ^(index|n)$ ]]
+ [[ configs =~ ^(ip-addr|i)$ ]]
+ [[ configs =~ ^(logs|o)$ ]]
+ [[ configs =~ ^(matrix|m)$ ]]
+ [[ configs =~ ^(reports|r)$ ]]
+ [[ configs =~ ^(validate|v)$ ]]
+ [[ configs == \h\e\l\p ]]
+ [[ configs == \d\e\b\u\g ]]
+ [[ configs == \d\r\y\-\r\u\n ]]
+ [[ configs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ip-addr=10.0.0.1
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ip-addr =~ ^(classify|g)$ ]]
+ [[ ip-addr =~ ^(file-ext|x)$ ]]
+ [[ ip-addr =~ ^(configs|c)$ ]]
+ [[ ip-addr =~ ^(index|n)$ ]]
+ [[ ip-addr =~ ^(ip-addr|i)$ ]]
+ local target_address=10.0.0.1
+ [[ ip-addr =~ ^(logs|o)$ ]]
+ [[ ip-addr =~ ^(matrix|m)$ ]]
+ [[ ip-addr =~ ^(reports|r)$ ]]
+ [[ ip-addr =~ ^(validate|v)$ ]]
+ [[ ip-addr == \h\e\l\p ]]
+ [[ ip-addr == \d\e\b\u\g ]]
+ [[ ip-addr == \d\r\y\-\r\u\n ]]
+ [[ ip-addr == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --index=15
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ index =~ ^(classify|g)$ ]]
+ [[ index =~ ^(file-ext|x)$ ]]
+ [[ index =~ ^(configs|c)$ ]]
+ [[ index =~ ^(index|n)$ ]]
+ local target_index=15
+ [[ index =~ ^(ip-addr|i)$ ]]
+ [[ index =~ ^(logs|o)$ ]]
+ [[ index =~ ^(matrix|m)$ ]]
+ [[ index =~ ^(reports|r)$ ]]
+ [[ index =~ ^(validate|v)$ ]]
+ [[ index == \h\e\l\p ]]
+ [[ index == \d\e\b\u\g ]]
+ [[ index == \d\r\y\-\r\u\n ]]
+ [[ index == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --matrix=matrix.json
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ matrix =~ ^(classify|g)$ ]]
+ [[ matrix =~ ^(file-ext|x)$ ]]
+ [[ matrix =~ ^(configs|c)$ ]]
+ [[ matrix =~ ^(index|n)$ ]]
+ [[ matrix =~ ^(ip-addr|i)$ ]]
+ [[ matrix =~ ^(logs|o)$ ]]
+ [[ matrix =~ ^(matrix|m)$ ]]
+ local matrix_filename=matrix.json
+ [[ matrix =~ ^(reports|r)$ ]]
+ [[ matrix =~ ^(validate|v)$ ]]
+ [[ matrix == \h\e\l\p ]]
+ [[ matrix == \d\e\b\u\g ]]
+ [[ matrix == \d\r\y\-\r\u\n ]]
+ [[ matrix == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --reports=reports
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ reports =~ ^(classify|g)$ ]]
+ [[ reports =~ ^(file-ext|x)$ ]]
+ [[ reports =~ ^(configs|c)$ ]]
+ [[ reports =~ ^(index|n)$ ]]
+ [[ reports =~ ^(ip-addr|i)$ ]]
+ [[ reports =~ ^(logs|o)$ ]]
+ [[ reports =~ ^(matrix|m)$ ]]
+ [[ reports =~ ^(reports|r)$ ]]
+ local reports_folder=reports
+ [[ reports =~ ^(validate|v)$ ]]
+ [[ reports == \h\e\l\p ]]
+ [[ reports == \d\e\b\u\g ]]
+ [[ reports == \d\r\y\-\r\u\n ]]
+ [[ reports == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --file-ext=cfg,conf,cnf
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ file-ext =~ ^(classify|g)$ ]]
+ [[ file-ext =~ ^(file-ext|x)$ ]]
+ file_extensions+=($(print "${value}" | tr ':,;\n ' '\n'))
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ tr ':,;\n ' '\n'
+ [[ file-ext =~ ^(configs|c)$ ]]
+ [[ file-ext =~ ^(index|n)$ ]]
+ [[ file-ext =~ ^(ip-addr|i)$ ]]
+ [[ file-ext =~ ^(logs|o)$ ]]
+ [[ file-ext =~ ^(matrix|m)$ ]]
+ [[ file-ext =~ ^(reports|r)$ ]]
+ [[ file-ext =~ ^(validate|v)$ ]]
+ [[ file-ext == \h\e\l\p ]]
+ [[ file-ext == \d\e\b\u\g ]]
+ [[ file-ext == \d\r\y\-\r\u\n ]]
+ [[ file-ext == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ export classify_targets=true
+ classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(index|n)$ ]]
+ [[ classify =~ ^(ip-addr|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(index|n)$ ]]
+ [[ verbose =~ ^(ip-addr|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(index|n)$ ]]
+ [[ debug =~ ^(ip-addr|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ export debug=true
+ debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ IFS='
'
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z x ]]
+ [[ 3 -eq 0 ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ source_configs=()
+ declare -ga source_configs
+ target_configlist_json=targets/10.0.0.1.json
+ [[ ! -f targets/10.0.0.1.json ]]
+ mapfile -t source_configs
++ jq -r '.configs[] | "\(.config.site)/\(.config.device)"' targets/10.0.0.1.json
+ for i in "${!source_configs[@]}"
+ [[ cisco/fw8.cfg != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/cisco/fw8.cfg
+ [[ true == true ]]
+ print 'Config JSON file used: targets/10.0.0.1.json'
+ [[ -n Config JSON file used: targets/10.0.0.1.json ]]
+ echo -en 'Config JSON file used: targets/10.0.0.1.json'
Config JSON file used: targets/10.0.0.1.json+ print 'Extracted config paths from JSON:'
+ [[ -n Extracted config paths from JSON: ]]
+ echo -en 'Extracted config paths from JSON:'
Extracted config paths from JSON:+ for cfg in "${source_configs[@]}"
+ print ' - configs/cisco/fw8.cfg'
+ [[ -n  - configs/cisco/fw8.cfg ]]
+ echo -en ' - configs/cisco/fw8.cfg'
 - configs/cisco/fw8.cfg+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports/json reports/objects
+ [[ -z 15 ]]
+ [[ -z false ]]
+ [[ -z 10.0.0.1 ]]
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ sed -E 's/[[:space:]]+//g'
++ tr -d '\r'
+ target_address=10.0.0.1
+ [[ false == true ]]
+ export tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json
+ tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/cisco/fw8.cfg 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json
+ local config_file=configs/cisco/fw8.cfg
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json
+ [[ ! -f configs/cisco/fw8.cfg ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg'
+ print '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg'
[DEBUG] Checking if config file exists and is readable: configs/cisco/fw8.cfg+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/cisco/fw8.cfg ]]
++ stat -c%s configs/cisco/fw8.cfg
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/cisco/fw8.cfg'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/cisco/fw8.cfg' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/cisco/fw8.cfg'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/cisco/fw8.cfg'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/cisco/fw8.cfg' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/cisco/fw8.cfg'\'' is readable and size is  bytes'
[OK] File 'configs/cisco/fw8.cfg' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!'
+ [[ true == true ]]
+ message 'Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!'
+ [[ -n Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
! ]]
+ local 'message=Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!'
+ print 'Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!'
+ [[ -n Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
! ]]
+ echo -en 'Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!'
Imported Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
!

object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
!

object network Magneto-Core
 host 172.16.0.5
!

object network Public-Edge
 host 203.0.113.25
!

nat (inside,outside) source static Magneto-Core Public-Edge
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge'
+ [[ true == true ]]
+ message 'Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge'
+ [[ -n Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge ]]
+ local 'message=Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge'
+ print 'Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge'
+ [[ -n Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge ]]
+ echo -en 'Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge'
Sanitized Content: object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12
object-group network Magneto-Wifi
 description Guest access
 network-object host 172.16.0.5
object network Magneto-Core
 host 172.16.0.5
object network Public-Edge
 host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-Edge+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzI4NDQ3NzQyODY2NDAwMAo/g'
+ local 'serialized_objects=object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
+ [[ -n Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo ]]
+ local 'message=Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
+ print 'Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
+ [[ -n Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo ]]
+ echo -en 'Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
Serialized Objects: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12MTc0NzI4NDQ3NzQyODY2NDAwMAoobject-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5MTc0NzI4NDQ3NzQyODY2NDAwMAoobject network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25MTc0NzI4NDQ3NzQyODY2NDAwMAonat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzI4NDQ3NzQyODY2NDAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12
object-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5
object network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5
object network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12
object-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5
object network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5
object network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25
nat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 5 config blocks'
+ [[ -n Loaded 5 config blocks ]]
+ local 'message=Loaded 5 config blocks'
+ print 'Loaded 5 config blocks'
+ [[ -n Loaded 5 config blocks ]]
+ echo -en 'Loaded 5 config blocks'
Loaded 5 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS='
'
+ IFS='
'
++ printf '%s\n' 'object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12' 'object-group network Magneto-WifiMTc0NzI4NDQ3NzQyODY2NDAwMAo description Guest accessMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 172.16.0.5' 'object network Magneto-CoreMTc0NzI4NDQ3NzQyODY2NDAwMAo host 172.16.0.5' 'object network Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo host 203.0.113.25' 'nat (inside,outside) source static Magneto-Core Public-EdgeMTc0NzI4NDQ3NzQyODY2NDAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12')
+ declare -a matched_objects
+ IFS='
'
+ [[ true == true ]]
+ message 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ local 'message=Loaded 1 config blocks'
+ print 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ echo -en 'Loaded 1 config blocks'
Loaded 1 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ restored_block=()
+ declare -a restored_block
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12'
+ [[ -n Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12 ]]
+ local 'message=Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12'
+ print 'Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12'
+ [[ -n Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12 ]]
+ echo -en 'Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12'
Serialized Line: object-group network Hellfire-InternalMTc0NzI4NDQ3NzQyODY2NDAwMAo description East coast internal networkMTc0NzI4NDQ3NzQyODY2NDAwMAo network-object host 10.0.0.1MTc0NzI4NDQ3NzQyODY2NDAwMAo network-object 192.168.2.12+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzI4NDQ3NzQyODY2NDAwMAo/\n/g'
+ restored_block='object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ -n Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12 ]]
+ local 'message=Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ print 'Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ -n Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12 ]]
+ echo -en 'Restored Configuration:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
Restored Configuration:
object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/cisco/fw8.cfg 'object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ local target_pattern=10.0.0.1
+ local config_path=configs/cisco/fw8.cfg
+ local 'restored_block=object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ -z object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ -n [process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ print '[process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
+ [[ -n [process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12'
[process_configs] Raw Block:
object-group network Hellfire-Internal
 description East coast internal network
 network-object host 10.0.0.1
 network-object 192.168.2.12+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Hellfire-Internal'
+ [[ -z object-group network Hellfire-Internal ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ awk '{$1=""; print substr($0,2)}'
+ type_value='network Hellfire-Internal'
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Hellfire-Internal'
+ [[ -n [process_configs] type     : network Hellfire-Internal ]]
+ echo -en '[process_configs] type     : network Hellfire-Internal'
[process_configs] type     : network Hellfire-Internal+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='object-group network Hellfire-Internal'
+ [[ -z object-group network Hellfire-Internal ]]
+ [[ object-group network hellfire-internal =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='description East coast internal network'
+ [[ -z description East coast internal network ]]
+ [[ description east coast internal network =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object 192.168.2.12'
+ [[ -z network-object 192.168.2.12 ]]
+ [[ network-object 192.168.2.12 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  3 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${entries[@]}"
+ print '  - network-object 192.168.2.12'
+ [[ -n   - network-object 192.168.2.12 ]]
+ echo -en '  - network-object 192.168.2.12'
  - network-object 192.168.2.12+ local matched_line
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Hellfire-Internal
++ jq -r --arg key Hellfire-Internal 'map(select(.match[]? | contains($key))) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc false 'map(select(.match[]? == $desc)) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object 192.168.2.12'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "network-object host 10.0.0.1",
  "network-object 192.168.2.12"
]'
+ [[ 2 -eq 1 ]]
++ jq -n --arg object object-group --arg type 'network Hellfire-Internal' --arg description false --argjson entries '[
  "network-object host 10.0.0.1",
  "network-object 192.168.2.12"
]' --arg group Unclassified '{
                  object: $object,
                  type: $type,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ jq .
{
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Hellfire-Internal",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.2.12"
  ],
  "group": "Unclassified"
}'
++ jq -s --arg site configs/cisco --arg device fw8.cfg '{
              config: {
                site: ($site | gsub("^.*/"; "")),
                device: $device,
                objects: .
              }
            }'
+ wrapped_block='{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ local 'message=|-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ print '|-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '|-----> Config Objects:\n{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
|-----> Config Objects:
{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n {
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '{
  "config": {
    "site": "cisco",
    "device": "fw8.cfg",
    "objects": [
      {
        "object": "object-group",
        "type": "network Hellfire-Internal",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.2.12"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ return 0
+ mkdir -p /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/json
+ export json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/json/10.0.0.1--MTc0NzI4NDQ3.json
+ json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/json/10.0.0.1--MTc0NzI4NDQ3.json
+ [[ -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json ]]
+ jq -s --arg target 10.0.0.1 '{ target: $target, configs: . }' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/fragments.json
++ mktemp
+ tmp_merged=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.sPa6hhDvhR
+ local final_outfile=reports/json/10.0.0.1.json
+ local 'jq_merge_expr={
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .config.site == $cfg.config.site and .config.device == $cfg.config.device )
              then map(
                if .config.site == $cfg.config.site and .config.device == $cfg.config.device
                  then .config.objects += $cfg.config.objects
                else . end
              )
            else . + [ $cfg ] end
          ))
      }'
+ [[ -f reports/json/10.0.0.1.json ]]
+ jq -s '{
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .config.site == $cfg.config.site and .config.device == $cfg.config.device )
              then map(
                if .config.site == $cfg.config.site and .config.device == $cfg.config.device
                  then .config.objects += $cfg.config.objects
                else . end
              )
            else . + [ $cfg ] end
          ))
      }' reports/json/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/json/10.0.0.1--MTc0NzI4NDQ3.json
+ mv /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.sPa6hhDvhR reports/json/10.0.0.1.json
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg/json/10.0.0.1--MTc0NzI4NDQ3.json
+ return 0
+ unset verbose debug
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.hZORuz0YYg

{
  "target": "10.0.0.1",
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Stark-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 192.168.1.10",
              "network-object 192.168.1.0 255.255.255.0"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object",
            "type": false,
            "description": "false",
            "entries": [
              "host 10.0.0.1"
            ],
            "group": "Unclassified"
          },
          {
            "object": "access-list",
            "type": false,
            "description": "false",
            "entries": [
              "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network RedRoom-Core",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object host 172.16.1.6"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg",
        "objects": [
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          },
          {
            "object": "object-group",
            "type": "network Hellfire-Internal",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.2.12"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
devops: network-resources (master +$%=) $
