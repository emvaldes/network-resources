$ bash -x ./scripts/parse-listings.shell --verbose --debug --classify --logs ;

  + set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.InAZzIrNhm
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.InAZzIrNhm
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __DEVOPS_TOOLS_SOURCED=1
++ __DEVOPS_TOOLS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
++ alias error-message=error_message
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias exit-error=exit_error
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
+ source ./scripts/tools-listings.shell
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 4 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ IFS='
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z '' ]]
+ listing_filename=ips.list
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
+ sort
+ [[ true == true ]]
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ [[ ! -f ips.list ]]
+ mapfile -t target_listing
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
++ sort -t . -k1,1n -k2,2n -k3,3n -k4,4n
+ [[ 15 -eq 0 ]]
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print 'IPS/CIDR Blocks: '
+ [[ -n IPS/CIDR Blocks:  ]]
+ echo -en 'IPS/CIDR Blocks: '
IPS/CIDR Blocks: + newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 10.0.0.1'
+ [[ -n   - 10.0.0.1 ]]
+ echo -en '  - 10.0.0.1'
  - 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 10.0.1.2'
+ [[ -n   - 10.0.1.2 ]]
+ echo -en '  - 10.0.1.2'
  - 10.0.1.2+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ echo -en '  - 10.0.2.3'
  - 10.0.2.3+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ echo -en '  - 10.10.10.10'
  - 10.10.10.10+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ echo -en '  - 172.16.0.5'
  - 172.16.0.5+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ echo -en '  - 172.16.1.6'
  - 172.16.1.6+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ echo -en '  - 172.18.1.20'
  - 172.18.1.20+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ echo -en '  - 172.31.255.254'
  - 172.31.255.254+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
  - 192.0.2.50+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 192.168.1.10'
+ [[ -n   - 192.168.1.10 ]]
+ echo -en '  - 192.168.1.10'
  - 192.168.1.10+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ echo -en '  - 192.168.1.11'
  - 192.168.1.11+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
  - 192.168.2.12+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ echo -en '  - 192.168.100.100'
  - 192.168.100.100+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
  - 198.51.100.75+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for target in "${target_listing[@]}"
+ print '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ echo -en '  - 203.0.113.25'
  - 203.0.113.25+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ mkdir -p targets
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print 'Mapping IPs to config files (pre-scan phase)...'
+ [[ -n Mapping IPs to config files (pre-scan phase)... ]]
+ echo -en 'Mapping IPs to config files (pre-scan phase)...'
Mapping IPs to config files (pre-scan phase)...+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matching_configs
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=41127
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 41127)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 41127) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 41127)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lF 10.0.0.1 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/misc/switch.conf'
+ [[ -n configs/cisco/fw1.cfg
configs/misc/switch.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=41133
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 41133)'
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 41133) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 41133)'
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print configs/cisco/fw1.cfg
++ [[ -n configs/cisco/fw1.cfg ]]
++ echo -en configs/cisco/fw1.cfg
++ sed 's|^configs/||'
++ grep -lF 10.0.1.2 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_file=cisco/fw1.cfg
+ ip_cleaned=10.0.2.3
+ local 'matched_files=configs/cisco/fw1.cfg
configs/misc/switch.conf'
+ [[ -n configs/cisco/fw1.cfg
++ wc -l
configs/misc/switch.conf ]]
+ target_file=targets/10.0.2.3.json
+ config_json='[]'
+ IFS=
+ read -r config_file
+ job_pid=41143
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json
+ job_pids+=("${job_pid}")
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 41143)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 41143) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 41143)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print configs/cisco/fw1.cfg
++ [[ -n configs/cisco/fw1.cfg ]]
++ echo -en configs/cisco/fw1.cfg
++ sed 's|^configs/||'
++ grep -lF 10.0.2.3 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ config_lines='      18'
+ config_file=cisco/fw1.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg config cisco/fw1.cfg --argjson lines '      18' '. += [{"config": $config, "lines": $lines}]'
++ wc -l
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ job_pid=41158
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 41158)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 41158) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 41158)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lF 10.10.10.10 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ config_lines='      18'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg config cisco/fw1.cfg --argjson lines '      18' '. += [{"config": $config, "lines": $lines}]'
++ true
+ ip_cleaned=172.16.0.5
+ target_file=targets/172.16.0.5.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=41168
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
++ print configs/misc/switch.conf
++ [[ -n configs/misc/switch.conf ]]
++ echo -en configs/misc/switch.conf
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 41168)'
++ sed 's|^configs/||'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 41168) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 41168)'
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lF 172.16.0.5 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ config_file=misc/switch.conf
++ wc -l
++ true
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ IFS=
+ read -r config_file
+ ip_cleaned=172.16.1.6
+ local matched_files=
+ [[ -n '' ]]
+ target_file=targets/172.16.1.6.json
+ return 0
+ job_pid=41179
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 41179)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 41179) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 41179)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json
+ newline
+ local ip_addr=172.16.1.6
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local target_file=targets/172.16.1.6.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print configs/misc/switch.conf
++ [[ -n configs/misc/switch.conf ]]
++ sed 's|^configs/||'
++ echo -en configs/misc/switch.conf
++ grep -lF 172.16.1.6 configs/cisco/fw1.cfg configs/misc/switch.conf
+ config_lines='      10'
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ config_file=misc/switch.conf
++ jq --arg config misc/switch.conf --argjson lines '      10' '. += [{"config": $config, "lines": $lines}]'
++ wc -l
++ true
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=41192
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 41192)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 41192) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 41192)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
++ grep -lF 172.18.1.20 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_lines='      10'
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
++ jq --arg config misc/switch.conf --argjson lines '      10' '. += [{"config": $config, "lines": $lines}]'
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ IFS=
+ read -r config_file
++ true
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ job_pid=41204
+ job_pids+=("${job_pid}")
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
++ jq '{configs: .}'
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 41204)'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 41204) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 41204)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lF 172.31.255.254 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=configs/misc/switch.conf
+ ip_cleaned=192.0.2.50
+ [[ -n configs/misc/switch.conf ]]
+ config_json='[]'
+ target_file=targets/192.0.2.50.json
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  },
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ final_json='{
  "configs": [
    {
      "config": "cisco/fw1.cfg",
      "lines": 18
    },
    {
      "config": "misc/switch.conf",
      "lines": 10
    }
  ]
}'
+ jq -r
++ jq '{configs: .}'
+ job_pid=41212
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 41212)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 41212) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 41212)'
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print configs/misc/switch.conf
++ [[ -n configs/misc/switch.conf ]]
++ echo -en configs/misc/switch.conf
++ sed 's|^configs/||'
++ grep -lF 192.0.2.50 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ config_file=misc/switch.conf
++ wc -l
++ true
+ local matched_files=
+ ip_cleaned=192.168.1.10
+ [[ -n '' ]]
+ return 0
+ target_file=targets/192.168.1.10.json
+ job_pid=41225
+ final_json='{
  "configs": [
    {
      "config": "cisco/fw1.cfg",
      "lines": 18
    },
    {
      "config": "misc/switch.conf",
      "lines": 10
    }
  ]
}'
+ jq -r
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 41225)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 41225) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 41225)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ return 0
++ grep -lF 192.168.1.10 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ config_lines='      10'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg config misc/switch.conf --argjson lines '      10' '. += [{"config": $config, "lines": $lines}]'
+ local matched_files=configs/cisco/fw1.cfg
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
+ job_pid=41236
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 41236)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 41236) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 41236)'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
++ print configs/cisco/fw1.cfg
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
++ [[ -n configs/cisco/fw1.cfg ]]
++ echo -en configs/cisco/fw1.cfg
++ sed 's|^configs/||'
++ grep -lF 192.168.1.11 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ config_file=cisco/fw1.cfg
+ config_json='[
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
++ true
+ local matched_files=
+ ip_cleaned=192.168.2.12
+ [[ -n '' ]]
+ return 0
+ target_file=targets/192.168.2.12.json
++ print '[
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
+ job_pid=41248
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
++ [[ -n [
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
] ]]
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 41248)'
++ echo -en '[
  {
    "config": "misc/switch.conf",
    "lines": 10
  }
]'
++ jq '{configs: .}'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 41248) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 41248)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.168.2.12
+ (( i < count ))
+ local target_file=targets/192.168.2.12.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lF 192.168.2.12 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ config_lines='      18'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg config cisco/fw1.cfg --argjson lines '      18' '. += [{"config": $config, "lines": $lines}]'
++ true
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=41258
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 41258)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 41258) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 41258)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local ip_addr=192.168.100.100
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/192.168.100.100.json
+ final_json='{
  "configs": [
    {
      "config": "misc/switch.conf",
      "lines": 10
    }
  ]
}'
+ jq -r
++ grep -lF 192.168.100.100 configs/cisco/fw1.cfg configs/misc/switch.conf
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ IFS=
+ read -r config_file
++ true
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=41266
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 41266)'
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ local ip_addr=198.51.100.75
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 41266) ]]
+ local target_file=targets/198.51.100.75.json
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 41266)'
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ jq '{configs: .}'
+ for ip_addr in "${target_listing[@]}"
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
++ grep -lF 198.51.100.75 configs/cisco/fw1.cfg configs/misc/switch.conf
+ return 0
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ job_pid=41274
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 41274)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 41274) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 41274)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 41127
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json
+ ip_address=10.0.0.1
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 41127)'
+ final_json='{
  "configs": [
    {
      "config": "cisco/fw1.cfg",
      "lines": 18
    }
  ]
}'
+ jq -r
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 41127) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 41127)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41133
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 41133)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 41133) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 41133)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41143
++ grep -lF 203.0.113.25 configs/cisco/fw1.cfg configs/misc/switch.conf
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 41143)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 41143) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 41143)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41158
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 41158)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 41158) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 41158)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41168
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 41168)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 41168) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 41168)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41179
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 41179)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 41179) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 41179)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41192
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 41192)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 41192) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 41192)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41204
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 41204)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 41204) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 41204)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41212
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 41212)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 41212) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 41212)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41225
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41236
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 41236)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 41236) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 41236)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41248
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 41248)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 41248) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 41248)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41258
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 41258)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 41258) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 41258)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local matched_files=configs/cisco/fw1.cfg
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41266
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 41266)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 41266) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 41266)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41274
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ print configs/cisco/fw1.cfg
++ [[ -n configs/cisco/fw1.cfg ]]
++ echo -en configs/cisco/fw1.cfg
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
++ sed 's|^configs/||'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
+ config_file=cisco/fw1.cfg
++ wc -l
+ config_lines='      18'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg config cisco/fw1.cfg --argjson lines '      18' '. += [{"config": $config, "lines": $lines}]'
+ config_json='[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
++ [[ -n [
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
] ]]
++ echo -en '[
  {
    "config": "cisco/fw1.cfg",
    "lines": 18
  }
]'
++ jq '{configs: .}'
+ final_json='{
  "configs": [
    {
      "config": "cisco/fw1.cfg",
      "lines": 18
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ ((  2 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 41225
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 41225)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 41225) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 41225)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41274
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 41274)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 41274) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 41274)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ local total_requested=15
+ local total_mapped=5
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ print 'Total IPs mapped:    5'
+ [[ -n Total IPs mapped:    5 ]]
+ echo -en 'Total IPs mapped:    5'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ print 'Unmapped IPs:        10'
+ [[ -n Unmapped IPs:        10 ]]
+ echo -en 'Unmapped IPs:        10'
+ newline 2
+ local count=2
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ print 'Unmapped IPs:'
+ [[ -n Unmapped IPs: ]]
+ echo -en 'Unmapped IPs:'
+ newline 2
+ local count=2
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ print '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ echo -en '  - 10.0.2.3'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ print '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ echo -en '  - 10.10.10.10'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ print '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ echo -en '  - 172.16.0.5'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ print '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ echo -en '  - 172.16.1.6'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ print '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ echo -en '  - 172.18.1.20'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ print '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ echo -en '  - 192.168.1.11'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ print '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ echo -en '  - 192.168.100.100'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=5
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %01d 1
+ padded_index=1
+ job_pid=41404
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 41404)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 41404) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 41404)'
+ parse_configs 10.0.0.1 1
+ local ip_addr=10.0.0.1
+ newline
+ local count=1
+ local padded_index=1
+ (( i = 0 ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %01d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ padded_index=2
+ mkdir -p .local/jobs .local/errors
+ job_pid=41408
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 41408)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 41408) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 41408)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
+ parse_configs 10.0.1.2 2
+ local ip_addr=10.0.1.2
+ local padded_index=2
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %01d 3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=3
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=41411
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 41411)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 41411) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 41411)'
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=1 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 172.31.255.254 3
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local ip_addr=172.31.255.254
+ ((  ip_index < total_ips  ))
+ local padded_index=3
+ ip_addr=192.168.1.10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ printf %01d 4
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=4
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=41416
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=2 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 192.168.1.10 4
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 41416)'
+ local ip_addr=192.168.1.10
+ local padded_index=4
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 41416) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 41416)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %01d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=5
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=3 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=41422
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 41422)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 41422) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 41422)'
+ parse_configs 203.0.113.25 5
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  5 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ local ip_addr=203.0.113.25
+ kill -0 41404
+ local padded_index=5
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41408
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41411
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41416
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41422
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=4 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=5 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.31.255.254'
+ [[ -n \n[DONE] IP: 172.31.255.254 ]]
+ echo -en '\n[DONE] IP: 172.31.255.254'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 203.0.113.25'
+ [[ -n \n[DONE] IP: 203.0.113.25 ]]
+ echo -en '\n[DONE] IP: 203.0.113.25'
+ return 0
+ ((  5 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 41404
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41408
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 41411
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 41411)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 41411) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 41411)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41416
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 41416)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 41416) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 41416)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41422
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 41422)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 41422) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 41422)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ ((  2 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 41404
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 41404)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 41404) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 41404)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 41408
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 41408)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 41408) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 41408)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ [[ -d targets ]]
+ local prefix=configs/
+ find targets -type f -name '*.json'
+ read -r list_file
+ sed -i '' -E 's|^configs/||g' targets/172.31.255.254.json
+ read -r list_file
+ sed -i '' -E 's|^configs/||g' targets/192.168.1.10.json
+ read -r list_file
+ sed -i '' -E 's|^configs/||g' targets/203.0.113.25.json
+ read -r list_file
+ sed -i '' -E 's|^configs/||g' targets/10.0.1.2.json
+ read -r list_file
+ sed -i '' -E 's|^configs/||g' targets/10.0.0.1.json
+ read -r list_file
+ local json_dir=reports/json
+ local master_json=reports/reports.json
+ expected_reports=5
++ find reports/json -type f -name '*.json'
++ wc -l
+ actual_reports='       5'
+ ((  actual_reports < expected_reports  ))
+ [[ -d reports/json ]]
+ mapfile -t json_files
++ find reports/json -type f -name '*.json'
++ sort
+ ((  5 > 0  ))
+ jq -s . reports/json/10.0.0.1.json reports/json/10.0.1.2.json reports/json/172.31.255.254.json reports/json/192.168.1.10.json reports/json/203.0.113.25.json
+ generate_csvoutput
+ local input_json=reports/reports.json
+ local output_csv=reports/reports.csv
+ [[ ! -f reports/reports.json ]]
+ print target,config,object,entry,description,group
+ [[ -n target,config,object,entry,description,group ]]
+ echo -en target,config,object,entry,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ jq -r --arg configs_dirpath configs '
        .[] as $entry
        | $entry.configs[]
        | .config as $cfg
        | .objects[]
        | [
            $entry.target,
            ($cfg | sub("^" + $configs_dirpath + "/"; "")),
            (.object // "none" | tostring | select(length > 0) // "none"),
            (.entry // "none" | tostring | select(length > 0) // "none"),
            (.description // "none" | tostring | select(length > 0) // "none"),
            (.group // "none" | tostring | select(length > 0) // "none")
          ]
        | @csv
      ' reports/reports.json
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ echo -en 'CSV Report Summary (tabulated):'
CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ column -t -s, reports/reports.csv
+ less -SFX
target            config              object                              entry                                      description             group
"10.0.0.1"        "cisco/fw1.cfg"     "object-group network BU1-NETWORK"  "network-object host 10.0.0.1"             "Corporate HQ Subnets"  "Identified Matching Entries"
"10.0.0.1"        "misc/switch.conf"  "interface Vlan1"                   "network-object host 10.0.0.1"             "Local Office Subnets"  "Business-Unit-Networks"
"10.0.1.2"        "cisco/fw1.cfg"     "object-group network BU1-NETWORK"  "network-object host 10.0.1.2"             "Corporate HQ Subnets"  "Identified Matching Entries"
"10.0.1.2"        "misc/switch.conf"  "interface Vlan1"                   "ip address 10.0.1.2 255.255.255.0"        "Local Office Subnets"  "Business-Unit-Networks"
"172.31.255.254"  "misc/switch.conf"  "interface Vlan1"                   "ip address 172.31.255.254 255.255.255.0"  "Local Office Subnets"  "Business-Unit-Networks"
"192.168.1.10"    "cisco/fw1.cfg"     "object-group network BU1-NETWORK"  "host 192.168.1.10"                        "Corporate HQ Subnets"  "Identified Matching Entries"
"203.0.113.25"    "cisco/fw1.cfg"     "object-group network BU1-NETWORK"  "host 203.0.113.25"                        "Corporate HQ Subnets"  "Identified Matching Entries"
+ return 0
+ return 0
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.InAZzIrNhm ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.InAZzIrNhm
