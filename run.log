date && echo ;
rm -rf ./reports ./targets ./.cache ./.local && echo ;
bash -x ./scripts/parse-listings.shell --verbose \
                                       --debug \
                                       --classify \
                                       --logs \
                                       --ips-list=ips.list \
                                       --devices='devices.list' \
                                       --sites='cisco' && echo ;
cat .local/jobs/10.0.0.1.job 2>/dev/null && echo ;
jq -r . ./targets/10.0.0.1.json 2>/dev/null && echo ;
jq -r . ./reports/10.0.0.1/10.0.0.1.json 2>/dev/null && echo ;

Sat May 17 20:44:39 MST 2025


+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzUzOTg3OTkxMzc5MDAwMAo
++ divisor=MTc0NzUzOTg3OTkxMzc5MDAwMAo
+ source ./scripts/tools-listings.shell
++ [[ -n '' ]]
++ readonly __TOOLS_LISTINGS_SOURCED=1
++ __TOOLS_LISTINGS_SOURCED=1
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 7 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs --ips-list=ips.list --devices=devices.list --sites=cisco
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(devices|d)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(sites|s)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(devices|d)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(sites|s)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(devices|d)$ ]]
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(sites|s)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(devices|d)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(sites|s)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ips-list=ips.list
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ips-list =~ ^(classify|g)$ ]]
+ [[ ips-list =~ ^(configs|c)$ ]]
+ [[ ips-list =~ ^(devices|d)$ ]]
+ [[ ips-list =~ ^(file-ext|x)$ ]]
+ [[ ips-list =~ ^(interval|l)$ ]]
+ [[ ips-list =~ ^(ips-list|i)$ ]]
+ local target_addresses=ips.list
+ [[ ips-list =~ ^(logs|o)$ ]]
+ [[ ips-list =~ ^(jobs|j)$ ]]
+ [[ ips-list =~ ^(matrix|m)$ ]]
+ [[ ips-list =~ ^(reports|r)$ ]]
+ [[ ips-list =~ ^(sites|s)$ ]]
+ [[ ips-list =~ ^(validate|v)$ ]]
+ [[ ips-list == \h\e\l\p ]]
+ [[ ips-list == \d\e\b\u\g ]]
+ [[ ips-list == \d\r\y\-\r\u\n ]]
+ [[ ips-list == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --devices=devices.list
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ devices =~ ^(classify|g)$ ]]
+ [[ devices =~ ^(configs|c)$ ]]
+ [[ devices =~ ^(devices|d)$ ]]
+ local target_devices=devices.list
+ [[ devices =~ ^(file-ext|x)$ ]]
+ [[ devices =~ ^(interval|l)$ ]]
+ [[ devices =~ ^(ips-list|i)$ ]]
+ [[ devices =~ ^(logs|o)$ ]]
+ [[ devices =~ ^(jobs|j)$ ]]
+ [[ devices =~ ^(matrix|m)$ ]]
+ [[ devices =~ ^(reports|r)$ ]]
+ [[ devices =~ ^(sites|s)$ ]]
+ [[ devices =~ ^(validate|v)$ ]]
+ [[ devices == \h\e\l\p ]]
+ [[ devices == \d\e\b\u\g ]]
+ [[ devices == \d\r\y\-\r\u\n ]]
+ [[ devices == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --sites=cisco
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ sites =~ ^(classify|g)$ ]]
+ [[ sites =~ ^(configs|c)$ ]]
+ [[ sites =~ ^(devices|d)$ ]]
+ [[ sites =~ ^(file-ext|x)$ ]]
+ [[ sites =~ ^(interval|l)$ ]]
+ [[ sites =~ ^(ips-list|i)$ ]]
+ [[ sites =~ ^(logs|o)$ ]]
+ [[ sites =~ ^(jobs|j)$ ]]
+ [[ sites =~ ^(matrix|m)$ ]]
+ [[ sites =~ ^(reports|r)$ ]]
+ [[ sites =~ ^(sites|s)$ ]]
+ export target_sites=cisco
+ target_sites=cisco
+ [[ sites =~ ^(validate|v)$ ]]
+ [[ sites == \h\e\l\p ]]
+ [[ sites == \d\e\b\u\g ]]
+ [[ sites == \d\r\y\-\r\u\n ]]
+ [[ sites == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z ips.list ]]
+ [[ -z devices.list ]]
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z cisco ]]
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
++ date '+%Y-%m-%d %H:%M:%S'
+ local 'start_time=2025-05-17 20:44:39'
+ SECONDS=0
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ target_devices_source=()
+ declare -a target_devices_source
+ [[ -f devices.list ]]
+ mapfile -t target_devices_source
++ grep -v '^\s*$' devices.list
++ tr -d '\r'
+ [[ true == true ]]
+ message 'Displaying devices.list listing:'
+ [[ -n Displaying devices.list listing: ]]
+ local 'message=Displaying devices.list listing:'
+ print 'Displaying devices.list listing:'
+ [[ -n Displaying devices.list listing: ]]
+ echo -en 'Displaying devices.list listing:'
Displaying devices.list listing:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for device in "${target_devices_source[@]}"
+ message 'Device: fw1'
+ [[ -n Device: fw1 ]]
+ local 'message=Device: fw1'
+ print 'Device: fw1'
+ [[ -n Device: fw1 ]]
+ echo -en 'Device: fw1'
Device: fw1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for device in "${target_devices_source[@]}"
+ message 'Device: fw2'
+ [[ -n Device: fw2 ]]
+ local 'message=Device: fw2'
+ print 'Device: fw2'
+ [[ -n Device: fw2 ]]
+ echo -en 'Device: fw2'
Device: fw2+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for device in "${target_devices_source[@]}"
+ message 'Device: fw3'
+ [[ -n Device: fw3 ]]
+ local 'message=Device: fw3'
+ print 'Device: fw3'
+ [[ -n Device: fw3 ]]
+ echo -en 'Device: fw3'
Device: fw3+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ discovered_files=()
+ declare -a discovered_files
+ IFS=
+ read -r fullpath
++ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
++ sort
++ basename configs/cisco/fw1.cfg
+ filename=fw1.cfg
+ device_name=fw1
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw1 =~ fw1 ]]
+ matched=true
+ break
+ [[ true == false ]]
+ discovered_files+=("${fullpath}")
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw2.cfg
+ filename=fw2.cfg
+ device_name=fw2
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw2 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw2 =~ fw2 ]]
+ matched=true
+ break
+ [[ true == false ]]
+ discovered_files+=("${fullpath}")
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw3.cfg
+ filename=fw3.cfg
+ device_name=fw3
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw3 ]]
+ matched=true
+ break
+ [[ true == false ]]
+ discovered_files+=("${fullpath}")
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw4.cfg
+ filename=fw4.cfg
+ device_name=fw4
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw4 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw4 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw4 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw5.cfg
+ filename=fw5.cfg
+ device_name=fw5
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw6.cfg
+ filename=fw6.cfg
+ device_name=fw6
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw7.cfg
+ filename=fw7.cfg
+ device_name=fw7
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw7 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw7 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw7 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/cisco/fw8.cfg
+ filename=fw8.cfg
+ device_name=fw8
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw8 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw8 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw8 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/fortinet/switch3.conf
+ filename=switch3.conf
+ device_name=switch3
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/fortinet/switch4.conf
+ filename=switch4.conf
+ device_name=switch4
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/fw2.cfg
+ filename=fw2.cfg
+ device_name=fw2
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw2 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw2 =~ fw2 ]]
+ matched=true
+ break
+ [[ true == false ]]
+ discovered_files+=("${fullpath}")
+ IFS=
+ read -r fullpath
++ basename configs/misc/fw3.cfg
+ filename=fw3.cfg
+ device_name=fw3
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw3 =~ fw3 ]]
+ matched=true
+ break
+ [[ true == false ]]
+ discovered_files+=("${fullpath}")
+ IFS=
+ read -r fullpath
++ basename configs/misc/fw5.cfg
+ filename=fw5.cfg
+ device_name=fw5
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw5 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/fw6.cfg
+ filename=fw6.cfg
+ device_name=fw6
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ fw6 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/switch1.conf
+ filename=switch1.conf
+ device_name=switch1
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch1 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch1 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch1 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/switch2.conf
+ filename=switch2.conf
+ device_name=switch2
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch2 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch2 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch2 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/switch3.conf
+ filename=switch3.conf
+ device_name=switch3
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch3 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
++ basename configs/misc/switch4.conf
+ filename=switch4.conf
+ device_name=switch4
+ [[ 3 -gt 0 ]]
+ matched=false
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw1 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw2 ]]
+ for pattern in "${target_devices_source[@]}"
+ [[ switch4 =~ fw3 ]]
+ [[ false == false ]]
+ continue
+ IFS=
+ read -r fullpath
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/misc/fw2.cfg configs/misc/fw3.cfg
+ [[ true == true ]]
+ message 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ local 'message=Generated configs.list at .cache/configs.list'
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n cisco ]]
+ [[ cisco != \f\a\l\s\e ]]
+ oIFS=' 	
'
+ IFS=,
+ read -r -a site_filters
+ IFS=' 	
'
+ filtered_configs=()
+ declare -a filtered_configs
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ IFS=
+ read -r path
+ message 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ local 'message=Filtered Configurations:'
+ print 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ echo -en 'Filtered Configurations:'
Filtered Configurations:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
+ [[ 3 -eq 0 ]]
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ [[ true == true ]]
+ message '[FILTER] Applied --sites=cisco'
+ [[ -n [FILTER] Applied --sites=cisco ]]
+ local 'message=[FILTER] Applied --sites=cisco'
+ print '[FILTER] Applied --sites=cisco'
+ [[ -n [FILTER] Applied --sites=cisco ]]
+ echo -en '[FILTER] Applied --sites=cisco'
[FILTER] Applied --sites=cisco+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
++ awk '{print $1}'
+ message '[FILTER] Filtered configs.list now contains: 3 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 3 entries ]]
+ local 'message=[FILTER] Filtered configs.list now contains: 3 entries'
+ print '[FILTER] Filtered configs.list now contains: 3 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 3 entries ]]
+ echo -en '[FILTER] Filtered configs.list now contains: 3 entries'
[FILTER] Filtered configs.list now contains: 3 entries+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file .cache/configs.list
+ [[ -n .cache/configs.list ]]
+ local target_file=.cache/configs.list
+ [[ true == true ]]
+ [[ -f .cache/configs.list ]]
+ case "${target_file}" in
+ cat .cache/configs.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ export output_csv=reports/reports.csv
+ output_csv=reports/reports.csv
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ target_addresses_source=()
+ declare -a target_addresses_source
+ [[ -f ips.list ]]
+ mapfile -t target_addresses_source
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
+ target_listing=()
+ declare -a target_listing
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=10.0.0.1
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.0.1 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '0' '1')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ local 'segments=10 0 0 1'
+ local fixed_address=10.0.0.1
+ [[ -n '' ]]
+ [[ 10.0.0.1 != \1\0\.\0\.\0\.\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=10.0.1.2
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.1.2 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '1' '2')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ local 'segments=10 0 1 2'
+ local fixed_address=10.0.1.2
+ [[ -n '' ]]
+ [[ 10.0.1.2 != \1\0\.\0\.\1\.\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=10.0.2.3
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.2.3 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '2' '3')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 3
++ [[ -n 3 ]]
++ echo -en 3
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=3
+ [[ 3 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=3
+ local 'segments=10 0 2 3'
+ local fixed_address=10.0.2.3
+ [[ -n '' ]]
+ [[ 10.0.2.3 != \1\0\.\0\.\2\.\3 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=192.168.1.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=192 168 1 10'
+ local fixed_address=192.168.1.10
+ [[ -n '' ]]
+ [[ 192.168.1.10 != \1\9\2\.\1\6\8\.\1\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=192.168.1.11
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.11 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '11')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
++ echo -en 168
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 11
++ [[ -n 11 ]]
++ echo -en 11
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=11
+ [[ 11 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=11
+ local 'segments=192 168 1 11'
+ local fixed_address=192.168.1.11
+ [[ -n '' ]]
+ [[ 192.168.1.11 != \1\9\2\.\1\6\8\.\1\.\1\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=192.168.2.12
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.2.12 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '2' '12')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 12
++ [[ -n 12 ]]
++ echo -en 12
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=12
+ [[ 12 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=12
+ local 'segments=192 168 2 12'
+ local fixed_address=192.168.2.12
+ [[ -n '' ]]
+ [[ 192.168.2.12 != \1\9\2\.\1\6\8\.\2\.\1\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=172.16.0.5
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.0.5 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '0' '5')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 5
++ [[ -n 5 ]]
++ echo -en 5
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=5
+ [[ 5 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=5
+ local 'segments=172 16 0 5'
+ local fixed_address=172.16.0.5
+ [[ -n '' ]]
+ [[ 172.16.0.5 != \1\7\2\.\1\6\.\0\.\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=172.16.1.6
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.1.6 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '1' '6')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 6
++ [[ -n 6 ]]
++ echo -en 6
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=6
+ [[ 6 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=6
+ local 'segments=172 16 1 6'
+ local fixed_address=172.16.1.6
+ [[ -n '' ]]
+ [[ 172.16.1.6 != \1\7\2\.\1\6\.\1\.\6 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=192.0.2.50
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.0.2.50 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '0' '2' '50')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 50
++ [[ -n 50 ]]
++ echo -en 50
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=50
+ [[ 50 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=50
+ local 'segments=192 0 2 50'
+ local fixed_address=192.0.2.50
+ [[ -n '' ]]
+ [[ 192.0.2.50 != \1\9\2\.\0\.\2\.\5\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=203.0.113.25
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 203.0.113.25 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('203' '0' '113' '25')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 203
++ [[ -n 203 ]]
++ echo -en 203
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=203
+ [[ 203 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=203
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 113
++ [[ -n 113 ]]
++ echo -en 113
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=113
+ [[ 113 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=113
+ for i in "${!segments[@]}"
++ print 25
++ [[ -n 25 ]]
++ echo -en 25
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=25
+ [[ 25 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=25
+ local 'segments=203 0 113 25'
+ local fixed_address=203.0.113.25
+ [[ -n '' ]]
+ [[ 203.0.113.25 != \2\0\3\.\0\.\1\1\3\.\2\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=198.51.100.75
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 198.51.100.75 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('198' '51' '100' '75')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 198
++ [[ -n 198 ]]
++ echo -en 198
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=198
+ [[ 198 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=198
+ for i in "${!segments[@]}"
++ print 51
++ [[ -n 51 ]]
++ echo -en 51
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=51
+ [[ 51 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=51
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 75
++ [[ -n 75 ]]
++ echo -en 75
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=75
+ [[ 75 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=75
+ local 'segments=198 51 100 75'
+ local fixed_address=198.51.100.75
+ [[ -n '' ]]
+ [[ 198.51.100.75 != \1\9\8\.\5\1\.\1\0\0\.\7\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=172.18.1.20
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.18.1.20 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '18' '1' '20')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 18
++ [[ -n 18 ]]
++ echo -en 18
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=18
+ [[ 18 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=18
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 20
++ [[ -n 20 ]]
++ echo -en 20
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=20
+ [[ 20 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=20
+ local 'segments=172 18 1 20'
+ local fixed_address=172.18.1.20
+ [[ -n '' ]]
+ [[ 172.18.1.20 != \1\7\2\.\1\8\.\1\.\2\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=10.10.10.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.10.10.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '10' '10' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=10 10 10 10'
+ local fixed_address=10.10.10.10
+ [[ -n '' ]]
+ [[ 10.10.10.10 != \1\0\.\1\0\.\1\0\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=192.168.100.100
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.100.100 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '100' '100')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ local 'segments=192 168 100 100'
+ local fixed_address=192.168.100.100
+ [[ -n '' ]]
+ [[ 192.168.100.100 != \1\9\2\.\1\6\8\.\1\0\0\.\1\0\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_addresses_source[@]}"
+ target_address=172.31.255.254
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.31.255.254 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '31' '255' '254')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 31
++ [[ -n 31 ]]
++ echo -en 31
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=31
+ [[ 31 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=31
+ for i in "${!segments[@]}"
++ print 255
++ [[ -n 255 ]]
++ echo -en 255
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=255
+ [[ 255 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=255
+ for i in "${!segments[@]}"
++ print 254
++ [[ -n 254 ]]
++ echo -en 254
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=254
+ [[ 254 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=254
+ local 'segments=172 31 255 254'
+ local fixed_address=172.31.255.254
+ [[ -n '' ]]
+ [[ 172.31.255.254 != \1\7\2\.\3\1\.\2\5\5\.\2\5\4 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ [[ 15 -eq 0 ]]
+ mapfile -t site_folders
++ cut -d/ -f2 .cache/configs.list
++ sort -u
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print cisco
++ [[ -n cisco ]]
++ echo -en cisco
+ message 'Site Folders: cisco'
+ [[ -n Site Folders: cisco ]]
+ local 'message=Site Folders: cisco'
+ print 'Site Folders: cisco'
+ [[ -n Site Folders: cisco ]]
+ echo -en 'Site Folders: cisco'
Site Folders: cisco+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local batch_size=5
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS=' 	
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /cisco/ .cache/configs.list
++ printf '\0'
+ IFS=' 	
'
+ total_files=3
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ local 'message=[BATCH] Processing folder: [cisco]'
+ print '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ echo -en '[BATCH] Processing folder: [cisco]'
[BATCH] Processing folder: [cisco]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 3 config files'
+ [[ -n [BATCH] Found 3 config files ]]
+ local 'message=[BATCH] Found 3 config files'
+ print '[BATCH] Found 3 config files'
+ [[ -n [BATCH] Found 3 config files ]]
+ echo -en '[BATCH] Found 3 config files'
[BATCH] Found 3 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T03:44:40Z
+ timestamp='[2025-05-18T03:44:40Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T03:44:40Z
+ printf '%s\n' '[2025-05-18T03:44:40Z] Flushed'
+ grep -qF '[2025-05-18T03:44:40Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 3 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747539880371429000 21845
+ export batch_id=MTc0NzUzOTg4
+ batch_id=MTc0NzUzOTg4
++ date +%s
+ batch_suffix=1747539880-17770
+ batch_configs_list=configs--MTc0NzUzOTg4-1747539880-17770.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ range_first=1
+ range_last=3
+ message '[ MTc0NzUzOTg4 ] Files 1 -> 3'
+ [[ -n [ MTc0NzUzOTg4 ] Files 1 -> 3 ]]
+ local 'message=[ MTc0NzUzOTg4 ] Files 1 -> 3'
+ print '[ MTc0NzUzOTg4 ] Files 1 -> 3'
+ [[ -n [ MTc0NzUzOTg4 ] Files 1 -> 3 ]]
+ echo -en '[ MTc0NzUzOTg4 ] Files 1 -> 3'
[ MTc0NzUzOTg4 ] Files 1 -> 3+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local base=configs--MTc0NzUzOTg4-1747539880-17770.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzUzOTg4-1747539880-17770.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzUzOTg4-1747539880-17770.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzUzOTg4-1747539880-17770.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
File: configs--MTc0NzUzOTg4-1747539880-17770.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN
Size: 66 bytes
Blocks/Inode: 8 / 237683241
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 17 20:44:40 2025
Modify: May 17 20:44:40 2025
Change: May 17 20:44:40 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list]'
+ print 'Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list]'
Batch-Config file: [configs--MTc0NzUzOTg4-1747539880-17770.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=69205
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 69205)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 69205) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 69205)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ local matched_files=configs/cisco/fw1.cfg
+ job_pid=69211
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
+ job_pids+=("${job_pid}")
+ IFS=
+ read -r config_file
+ job_ip_map["$job_pid"]=10.0.1.2
+ config_file=cisco/fw1.cfg
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 69211)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 69211) ]]
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 69211)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      81'
+ local matched_files=configs/cisco/fw2.cfg
+ [[ -n configs/cisco/fw2.cfg ]]
+ config_json='[]'
+ ip_cleaned=10.0.2.3
+ IFS=
+ read -r config_file
+ target_file=targets/10.0.2.3.json
+ config_file=cisco/fw2.cfg
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
+ job_pid=69221
++ tr -d ' '
++ wc -l
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 69221)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 69221) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 69221)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ match_count=3
+ config_lines='      43'
+ site=cisco
+ device=fw1.cfg
++ print '[]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw2.cfg
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ tr -d ' '
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
++ wc -l
+ job_pid=69239
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 69239)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 69239) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 69239)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 192.168.1.11
+ match_count=3
++ [[ -n 192.168.1.11 ]]
+ site=cisco
+ device=fw2.cfg
++ echo -en 192.168.1.11
++ tr -d '\r'
+ config_lines='      55'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw3.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
++ tr -d ' '
+ local 'matched_files=configs/cisco/fw1.cfg
+ ip_cleaned=192.168.1.11
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ target_file=targets/192.168.1.11.json
+ job_pid=69255
+ job_pids+=("${job_pid}")
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 69255)'
++ wc -l
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
++ jq '{ configs: . }'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 69255) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 69255)'
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=3
+ site=cisco
+ device=fw3.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ print '[]'
+ config_lines='      81'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
++ print '[
++ tr -d ' '
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw2.cfg
+ [[ -n configs/cisco/fw2.cfg ]]
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 3
    }
  ]
}'
+ config_json='[]'
+ jq -r
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ job_pid=69274
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 69274)'
++ wc -l
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 69274) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 69274)'
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=1
+ site=cisco
+ device=fw1.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      43'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ jq '{ configs: . }'
++ true
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=172.16.0.5
++ tr -d ' '
+ target_file=targets/172.16.0.5.json
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ return 0
+ job_pid=69294
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 69294)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 69294) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 69294)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
+ local matched_files=configs/cisco/fw3.cfg
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
+ job_pid=69306
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ job_pids+=("${job_pid}")
+ local ip_addr=172.16.1.6
+ config_lines='      55'
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 69306)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 69306) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 69306)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ config_lines='      55'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ match_count=1
+ site=cisco
+ device=fw3.cfg
+ local matched_files=configs/cisco/fw2.cfg
+ return 0
+ [[ -n configs/cisco/fw2.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  }
]'
++ wc -l
+ job_pid=69328
++ [[ -n [
  {
    "config": {
+ job_pids+=("${job_pid}")
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  }
]'
+ job_ip_map["$job_pid"]=192.0.2.50
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 69328)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 69328) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 69328)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw3.cfg
+ config_lines='      43'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw2.cfg
+ local matched_files=configs/cisco/fw1.cfg
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
++ wc -l
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
++ wc -l
+ job_pid=69346
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 69346)'
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 69346) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 69346)'
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=203.0.113.25
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local target_file=targets/203.0.113.25.json
+ for ip_addr in "${target_listing[@]}"
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ config_lines='      81'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ return 0
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg'
+ ip_cleaned=198.51.100.75
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ target_file=targets/198.51.100.75.json
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ job_pid=69365
++ jq '{ configs: . }'
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 69365)'
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 69365) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 69365)'
++ wc -l
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
+ match_count=5
++ tr -d '\r'
+ site=cisco
+ device=fw1.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
++ print '[]'
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      81'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw2.cfg
+ [[ -n configs/cisco/fw2.cfg ]]
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg
+ config_json='[]'
+ ip_cleaned=172.18.1.20
+ IFS=
+ read -r config_file
+ target_file=targets/172.18.1.20.json
+ config_file=cisco/fw2.cfg
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
++ tr -d ' '
+ job_pid=69384
+ job_pids+=("${job_pid}")
++ wc -l
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ job_ip_map["$job_pid"]=172.18.1.20
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 69384)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 69384) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 69384)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=4
++ print 10.10.10.10
+ site=cisco
+ device=fw1.cfg
++ tr -d '\r'
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
+ config_lines='      43'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 5
  }
]'
++ print '[]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 4 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw2.cfg
++ true
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 5
  }
]'
++ tr -d ' '
+ local matched_files=
+ [[ -n '' ]]
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 5
  }
] ]]
+ return 0
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 5
  }
]'
++ jq '{ configs: . }'
+ ip_cleaned=10.10.10.10
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ target_file=targets/10.10.10.10.json
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ job_pid=69404
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 69404)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 69404) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 69404)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ match_count=3
+ site=cisco
+ device=fw2.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
++ wc -l
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 5
    }
  ]
}'
+ jq -r
+ return 0
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ job_pid=69416
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
++ wc -l
+ local ip_addr=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 69416)'
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 69416) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 69416)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ config_lines='      43'
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw2.cfg
]'
+ IFS=
+ read -r config_file
++ wc -l
++ tr -d ' '
+ config_lines='      81'
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq '{ configs: . }'
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ ip_cleaned=172.31.255.254
++ wc -l
+ target_file=targets/172.31.255.254.json
++ tr -d ' '
+ job_pid=69435
++ wc -l
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 69435)'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN/configs--MTc0NzUzOTg4-1747539880-17770.list
+ match_count=3
+ site=cisco
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 69435) ]]
+ device=fw2.cfg
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 69435)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69205
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 69205)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 69205) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 69205)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69211
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 69211)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 69211) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 69211)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69221
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 69221)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 69221) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 69221)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  }
+ kill -0 69239
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 69239)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 69239) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 69239)'
+ match_count=3
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ site=cisco
+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ device=fw1.cfg
+ kill -0 69255
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 69255)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 69255) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 69255)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69274
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 69274)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 69274) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 69274)'
+ newline
+ local count=1
+ (( i = 0 ))
+ config_lines='      81'
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69294
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 69294)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 69294) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 69294)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69306
+ ip_address=172.16.1.6
++ print '[]'
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 69306)'
++ [[ -n [] ]]
++ echo -en '[]'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 69306) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 69306)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69328
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 69328)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 69328) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 69328)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69346
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69365
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69384
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 69384)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 69384) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 69384)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
+ for pid in "${job_pids[@]}"
+ kill -0 69404
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69416
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69435
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    }
  ]
}'
++ tr -d ' '
+ jq -r
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ match_count=3
+ site=cisco
+ device=fw1.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      81' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_file=cisco/fw3.cfg
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ [[ -n \n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ return 0
+ config_lines='      55'
+ config_lines='      55'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
++ wc -l
+ match_count=1
+ site=cisco
+ device=fw3.cfg
+ match_count=5
+ site=cisco
+ device=fw3.cfg
+ config_lines='      43'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw2.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  }
]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
++ [[ -n [
    "lines": 43,
  {
    "count": 3
    "config": {
  },
      "site": "cisco",
  {
      "device": "fw1.cfg"
    "config": {
    },
      "site": "cisco",
    "lines": 81,
      "device": "fw3.cfg"
    "count": 3
    },
  },
    "lines": 55,
  {
    "count": 1
    "config": {
  }
      "site": "cisco",
]'
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ jq '{ configs: . }'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 4
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 1
    }
  ]
}'
+ jq -r
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 5
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 81,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    }
  ]
}'
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ jq -r
+ return 0
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ ((  5 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69346
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 69346)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 69346) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 69346)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69365
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 69365)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 69365) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 69365)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69404
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 69404)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 69404) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 69404)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69416
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 69416)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 69416) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 69416)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69435
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 69435)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 69435) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 69435)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=12
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=69541
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 69541)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 69541) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 69541)'
+ newline
+ local count=1
+ (( i = 0 ))
+ parse_configs 10.0.0.1 01
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ printf %02d 2
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=02
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=69544
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 69544)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 69544) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 69544)'
+ parse_configs 10.0.1.2 02
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local ip_addr=10.0.1.2
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=10.0.2.3
++ printf %02d 3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=03
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=69548
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 69548)'
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 10.0.2.3 03
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 69548) ]]
+ local ip_addr=10.0.2.3
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 69548)'
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 4
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=04
+ job_pid=69554
+ job_pids+=("${job_pid}")
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ job_ip_map["$job_pid"]=192.168.1.10
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 69554)'
+ parse_configs 192.168.1.10 04
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 69554) ]]
+ local ip_addr=192.168.1.10
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 69554)'
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=05
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=69559
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 69559)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 69559) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 69559)'
+ parse_configs 192.168.1.11 05
+ newline
+ local count=1
+ local ip_addr=192.168.1.11
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local padded_index=05
+ (( i < count ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--classify)
++ printf %02d 6
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=06
+ job_pid=69565
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 69565)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 69565) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 69565)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ parse_configs 172.16.0.5 06
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
+ local ip_addr=172.16.0.5
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ printf %02d 7
++ echo -en cfg,conf,cnf
+ padded_index=07
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=69569
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 69569)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 69569) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 69569)'
+ parse_configs 172.16.1.6 07
+ local ip_addr=172.16.1.6
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ padded_index=08
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=69577
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 69577)'
+ parse_configs 192.0.2.50 08
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 69577) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 69577)'
+ local ip_addr=192.0.2.50
+ newline
+ local padded_index=08
+ local count=1
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 9
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=09
+ job_pid=69585
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 69585)'
+ parse_configs 203.0.113.25 09
+ local ip_addr=203.0.113.25
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 69585) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 69585)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
++ printf %02d 10
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ padded_index=10
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=69593
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ parse_configs 198.51.100.75 10
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 69593)'
+ local ip_addr=198.51.100.75
+ local padded_index=10
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 69593) ]]
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 69593)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 11
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=11
+ job_pid=69608
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 69608)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 69608) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 69608)'
+ parse_configs 10.10.10.10 11
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=10.10.10.10
+ ip_addr=192.168.100.100
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ printf %02d 12
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=12
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=69617
+ job_pids+=("${job_pid}")
+ parse_configs 192.168.100.100 12
+ job_ip_map["$job_pid"]=192.168.100.100
+ local ip_addr=192.168.100.100
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 69617)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 69617) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 69617)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  12 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69541
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69544
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69548
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69554
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69559
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69565
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69569
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69577
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69585
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
++ IFS=,
+ kill -0 69593
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69608
++ print cfg,conf,cnf
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69617
++ [[ -n cfg,conf,cnf ]]
+ valid_job_pids+=("$pid")
++ echo -en cfg,conf,cnf
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ ((  12 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69541
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69544
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69548
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69554
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69559
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69565
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69569
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69577
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69585
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69593
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69608
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69617
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  12 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69541
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 69541)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 69541) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 69541)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69544
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 69544)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 69544) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 69544)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69548
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 69548)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 69548) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 69548)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69554
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 69554)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 69554) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 69554)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69559
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 69559)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 69559) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 69559)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69565
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 69565)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 69565) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 69565)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69569
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 69569)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 69569) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 69569)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local status=0
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ ((  status != 0  ))
+ kill -0 69577
+ return 0
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 69577)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 69577) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 69577)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69585
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 69593
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 69593)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 69593) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 69593)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69608
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 69608)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 69608) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 69608)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 69617
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 69617)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 69617) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 69617)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  1 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 69585
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 69585)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 69585) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 69585)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 3 ]]
+ generate_csvoutput
++ mktemp
+ local tmp_csv=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.81Y9C0oJmz
+ [[ ! -d reports ]]
+ find reports -type f -name '*.json' -mindepth 2 -maxdepth 2
+ sort
+ read -r json
+ message 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ local 'message=Processing reports/10.0.0.1/10.0.0.1.json'
+ print 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ echo -en 'Processing reports/10.0.0.1/10.0.0.1.json'
Processing reports/10.0.0.1/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.0.1/10.0.0.1.json
+ read -r json
+ message 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ local 'message=Processing reports/10.0.1.2/10.0.1.2.json'
+ print 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ echo -en 'Processing reports/10.0.1.2/10.0.1.2.json'
Processing reports/10.0.1.2/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.1.2/10.0.1.2.json
+ read -r json
+ message 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ local 'message=Processing reports/10.0.2.3/10.0.2.3.json'
+ print 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ echo -en 'Processing reports/10.0.2.3/10.0.2.3.json'
Processing reports/10.0.2.3/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.2.3/10.0.2.3.json
+ read -r json
+ message 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ local 'message=Processing reports/10.10.10.10/10.10.10.10.json'
+ print 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ echo -en 'Processing reports/10.10.10.10/10.10.10.10.json'
Processing reports/10.10.10.10/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.10.10.10/10.10.10.10.json
+ read -r json
+ message 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ local 'message=Processing reports/172.16.0.5/172.16.0.5.json'
+ print 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ echo -en 'Processing reports/172.16.0.5/172.16.0.5.json'
Processing reports/172.16.0.5/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.0.5/172.16.0.5.json
+ read -r json
+ message 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ local 'message=Processing reports/172.16.1.6/172.16.1.6.json'
+ print 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ echo -en 'Processing reports/172.16.1.6/172.16.1.6.json'
Processing reports/172.16.1.6/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.1.6/172.16.1.6.json
+ read -r json
+ message 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ local 'message=Processing reports/192.0.2.50/192.0.2.50.json'
+ print 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ echo -en 'Processing reports/192.0.2.50/192.0.2.50.json'
Processing reports/192.0.2.50/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.0.2.50/192.0.2.50.json
+ read -r json
+ message 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ local 'message=Processing reports/192.168.1.10/192.168.1.10.json'
+ print 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ echo -en 'Processing reports/192.168.1.10/192.168.1.10.json'
Processing reports/192.168.1.10/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.10/192.168.1.10.json
+ read -r json
+ message 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ local 'message=Processing reports/192.168.1.11/192.168.1.11.json'
+ print 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ echo -en 'Processing reports/192.168.1.11/192.168.1.11.json'
Processing reports/192.168.1.11/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.11/192.168.1.11.json
+ read -r json
+ message 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ local 'message=Processing reports/192.168.100.100/192.168.100.100.json'
+ print 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ echo -en 'Processing reports/192.168.100.100/192.168.100.100.json'
Processing reports/192.168.100.100/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.100.100/192.168.100.100.json
+ read -r json
+ message 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ local 'message=Processing reports/198.51.100.75/198.51.100.75.json'
+ print 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ echo -en 'Processing reports/198.51.100.75/198.51.100.75.json'
Processing reports/198.51.100.75/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/198.51.100.75/198.51.100.75.json
+ read -r json
+ message 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ local 'message=Processing reports/203.0.113.25/203.0.113.25.json'
+ print 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ echo -en 'Processing reports/203.0.113.25/203.0.113.25.json'
Processing reports/203.0.113.25/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/203.0.113.25/203.0.113.25.json
+ read -r json
+ message target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ local message=target,site,device,object,sets,description,group
+ print target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ echo -en target,site,device,object,sets,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ sort -t, -k1,1 -k2,2 -k3,3 -k4,4 /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.81Y9C0oJmz
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.81Y9C0oJmz
+ return 0
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ message '\nCSV Report Summary (tabulated):'
+ [[ -n \nCSV Report Summary (tabulated): ]]
+ local 'message=\nCSV Report Summary (tabulated):'
+ print '\nCSV Report Summary (tabulated):'
+ [[ -n \nCSV Report Summary (tabulated): ]]
+ echo -en '\nCSV Report Summary (tabulated):'

CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ cat reports/reports.csv
target,site,device,object,sets,description,group
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","none","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","none","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","none","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 10.0.2.3","National Core Routing Zone","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","none","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","Shield-controlled wireless network","Unclassified"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","none","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 172.16.0.5","Internet-facing proxy systems","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 192.168.1.10","Internal Data Plane","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 192.168.1.11","Internal datacenter and backup LAN","Unclassified"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 192.168.100.100","Wireless guest segment","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 192.168.100.100","Secure wireless endpoints","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","none","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 198.51.100.75","External public resources","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","none","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 203.0.113.25","Public access layer","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","none","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
+ local elapsed=4
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '[INFO] Started at: %s\n' '2025-05-17 20:44:39'
[INFO] Started at: 2025-05-17 20:44:39
+ printf '[INFO] Total runtime: %02d:%02d:%02d\n' 0 0 4
[INFO] Total runtime: 00:00:04
+ return 0
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.pGaaxwi5YN

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzUzOTg4MTYyMjg2MTAwMAo
++ divisor=MTc0NzUzOTg4MTYyMjg2MTAwMAo
+ source ./scripts/tools-configs.shell
++ [[ -n '' ]]
++ readonly __TOOLS_EXTRACTION_SOURCED=1
++ __TOOLS_EXTRACTION_SOURCED=1
++ alias extract-configs=extract_configs
++ alias process-configs=process_configs
+ alias parse-configs=main
+ matched_blocks_byfile=()
+ declare -gA matched_blocks_byfile
+ export script_name=./scripts/parse-configs.shell
+ script_name=./scripts/parse-configs.shell
+ [[ 9 -ge 1 ]]
+ [[ --configs=configs =~ ^-*(h|help)$ ]]
+ main --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ file_extensions=()
+ declare -a file_extensions
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --configs=configs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ configs =~ ^(classify|g)$ ]]
+ [[ configs =~ ^(configs|c)$ ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ [[ configs =~ ^(file-ext|x)$ ]]
+ [[ configs =~ ^(index|n)$ ]]
+ [[ configs =~ ^(ip-addr|i)$ ]]
+ [[ configs =~ ^(logs|o)$ ]]
+ [[ configs =~ ^(matrix|m)$ ]]
+ [[ configs =~ ^(reports|r)$ ]]
+ [[ configs =~ ^(validate|v)$ ]]
+ [[ configs == \h\e\l\p ]]
+ [[ configs == \d\e\b\u\g ]]
+ [[ configs == \d\r\y\-\r\u\n ]]
+ [[ configs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ip-addr=10.0.0.1
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ip-addr =~ ^(classify|g)$ ]]
+ [[ ip-addr =~ ^(configs|c)$ ]]
+ [[ ip-addr =~ ^(file-ext|x)$ ]]
+ [[ ip-addr =~ ^(index|n)$ ]]
+ [[ ip-addr =~ ^(ip-addr|i)$ ]]
+ local target_address=10.0.0.1
+ [[ ip-addr =~ ^(logs|o)$ ]]
+ [[ ip-addr =~ ^(matrix|m)$ ]]
+ [[ ip-addr =~ ^(reports|r)$ ]]
+ [[ ip-addr =~ ^(validate|v)$ ]]
+ [[ ip-addr == \h\e\l\p ]]
+ [[ ip-addr == \d\e\b\u\g ]]
+ [[ ip-addr == \d\r\y\-\r\u\n ]]
+ [[ ip-addr == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --index=01
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ index =~ ^(classify|g)$ ]]
+ [[ index =~ ^(configs|c)$ ]]
+ [[ index =~ ^(file-ext|x)$ ]]
+ [[ index =~ ^(index|n)$ ]]
+ local target_index=01
+ [[ index =~ ^(ip-addr|i)$ ]]
+ [[ index =~ ^(logs|o)$ ]]
+ [[ index =~ ^(matrix|m)$ ]]
+ [[ index =~ ^(reports|r)$ ]]
+ [[ index =~ ^(validate|v)$ ]]
+ [[ index == \h\e\l\p ]]
+ [[ index == \d\e\b\u\g ]]
+ [[ index == \d\r\y\-\r\u\n ]]
+ [[ index == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --matrix=matrix.json
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ matrix =~ ^(classify|g)$ ]]
+ [[ matrix =~ ^(configs|c)$ ]]
+ [[ matrix =~ ^(file-ext|x)$ ]]
+ [[ matrix =~ ^(index|n)$ ]]
+ [[ matrix =~ ^(ip-addr|i)$ ]]
+ [[ matrix =~ ^(logs|o)$ ]]
+ [[ matrix =~ ^(matrix|m)$ ]]
+ local matrix_filename=matrix.json
+ [[ matrix =~ ^(reports|r)$ ]]
+ [[ matrix =~ ^(validate|v)$ ]]
+ [[ matrix == \h\e\l\p ]]
+ [[ matrix == \d\e\b\u\g ]]
+ [[ matrix == \d\r\y\-\r\u\n ]]
+ [[ matrix == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --reports=reports
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ reports =~ ^(classify|g)$ ]]
+ [[ reports =~ ^(configs|c)$ ]]
+ [[ reports =~ ^(file-ext|x)$ ]]
+ [[ reports =~ ^(index|n)$ ]]
+ [[ reports =~ ^(ip-addr|i)$ ]]
+ [[ reports =~ ^(logs|o)$ ]]
+ [[ reports =~ ^(matrix|m)$ ]]
+ [[ reports =~ ^(reports|r)$ ]]
+ local reports_folder=reports
+ [[ reports =~ ^(validate|v)$ ]]
+ [[ reports == \h\e\l\p ]]
+ [[ reports == \d\e\b\u\g ]]
+ [[ reports == \d\r\y\-\r\u\n ]]
+ [[ reports == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --file-ext=cfg,conf,cnf
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ file-ext =~ ^(classify|g)$ ]]
+ [[ file-ext =~ ^(configs|c)$ ]]
+ [[ file-ext =~ ^(file-ext|x)$ ]]
+ file_extensions+=($(print "${value}" | tr ':,;\n ' '\n'))
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ tr ':,;\n ' '\n'
+ [[ file-ext =~ ^(index|n)$ ]]
+ [[ file-ext =~ ^(ip-addr|i)$ ]]
+ [[ file-ext =~ ^(logs|o)$ ]]
+ [[ file-ext =~ ^(matrix|m)$ ]]
+ [[ file-ext =~ ^(reports|r)$ ]]
+ [[ file-ext =~ ^(validate|v)$ ]]
+ [[ file-ext == \h\e\l\p ]]
+ [[ file-ext == \d\e\b\u\g ]]
+ [[ file-ext == \d\r\y\-\r\u\n ]]
+ [[ file-ext == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ export classify_targets=true
+ classify_targets=true
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(index|n)$ ]]
+ [[ classify =~ ^(ip-addr|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(index|n)$ ]]
+ [[ verbose =~ ^(ip-addr|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(index|n)$ ]]
+ [[ debug =~ ^(ip-addr|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ export debug=true
+ debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z x ]]
+ [[ 3 -eq 0 ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ source_configs=()
+ declare -ga source_configs
+ local target_configlist_json=targets/10.0.0.1.json
+ [[ ! -f targets/10.0.0.1.json ]]
+ mapfile -t source_configs
++ jq -r '.configs[] | "\( .config.site )/\( .config.device )"' targets/10.0.0.1.json
+ for i in "${!source_configs[@]}"
+ [[ cisco/fw1.cfg != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/cisco/fw1.cfg
+ [[ true == true ]]
+ print 'Config JSON file used: targets/10.0.0.1.json'
+ [[ -n Config JSON file used: targets/10.0.0.1.json ]]
+ echo -en 'Config JSON file used: targets/10.0.0.1.json'
Config JSON file used: targets/10.0.0.1.json+ print 'Extracted config paths from JSON:'
+ [[ -n Extracted config paths from JSON: ]]
+ echo -en 'Extracted config paths from JSON:'
Extracted config paths from JSON:+ for cfg in "${source_configs[@]}"
+ print ' - configs/cisco/fw1.cfg'
+ [[ -n  - configs/cisco/fw1.cfg ]]
+ echo -en ' - configs/cisco/fw1.cfg'
 - configs/cisco/fw1.cfg+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ [[ -z 01 ]]
+ [[ -z false ]]
+ [[ -z 10.0.0.1 ]]
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ sed -E 's/[[:space:]]+//g'
++ tr -d '\r'
+ target_address=10.0.0.1
+ [[ false == true ]]
+ export tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json
+ tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/cisco/fw1.cfg 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json
+ local config_file=configs/cisco/fw1.cfg
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json
+ [[ ! -f configs/cisco/fw1.cfg ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg'
+ print '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg'
[DEBUG] Checking if config file exists and is readable: configs/cisco/fw1.cfg+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/cisco/fw1.cfg ]]
++ stat -c%s configs/cisco/fw1.cfg
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/cisco/fw1.cfg'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/cisco/fw1.cfg' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/cisco/fw1.cfg'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/cisco/fw1.cfg'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/cisco/fw1.cfg' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/cisco/fw1.cfg'\'' is readable and size is  bytes'
[OK] File 'configs/cisco/fw1.cfg' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!'
+ [[ true == true ]]
+ message 'Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!'
+ [[ -n Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
! ]]
+ local 'message=Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!'
+ print 'Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!'
+ [[ -n Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
! ]]
+ echo -en 'Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!'
Imported Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
!

object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
!

object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
!

object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
!

object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
!

object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
!

access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
!

nat (inside,outside) source static Stark-Tower NAT-Edge
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge'
+ [[ true == true ]]
+ message 'Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge'
+ [[ -n Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge ]]
+ local 'message=Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge'
+ print 'Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge'
+ [[ -n Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge ]]
+ echo -en 'Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge'
Sanitized Content: object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.26
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.51
 network-object host 203.0.113.27
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.52
 network-object host 203.0.113.28
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.53
 network-object host 203.0.113.29
 network-object 192.168.2.0 255.255.255.0
 network-object host 192.0.2.50
 network-object host 192.0.2.54
 network-object host 203.0.113.30
 network-object 192.168.2.0 255.255.255.0
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Rogers-WiFi
 description Wireless guest segment
 network-object host 10.10.10.10
 network-object host 192.168.100.100
object-group network Avengers-DMZ
 description Public access layer
 network-object host 192.0.2.50
 network-object host 203.0.113.25
 network-object 192.168.2.0 255.255.255.0
object network Stark-Tower
 host 10.0.0.1
 description Core services gateway
object network Public-Terminal
 host 192.0.2.50
 description Untrusted guest access
object network NAT-Edge
 host 203.0.113.25
 description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-Edge+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzUzOTg4MTYyMjg2MTAwMAo/g'
+ local 'serialized_objects=object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
+ [[ -n Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo ]]
+ local 'message=Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
+ print 'Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
+ [[ -n Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo ]]
+ echo -en 'Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
Serialized Objects: object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100MTc0NzUzOTg4MTYyMjg2MTAwMAoobject-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gatewayMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest accessMTc0NzUzOTg4MTYyMjg2MTAwMAoobject network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NATMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip host 10.0.0.1 anyMTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended permit ip any host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAoaccess-list OUTSIDE extended deny ip any anyMTc0NzUzOTg4MTYyMjg2MTAwMAonat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzUzOTg4MTYyMjg2MTAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway
object network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest access
object network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100
object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0
object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway
object network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest access
object network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NAT
access-list OUTSIDE extended permit ip host 10.0.0.1 any
access-list OUTSIDE extended permit ip any host 203.0.113.25
access-list OUTSIDE extended deny ip any any
nat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 14 config blocks'
+ [[ -n Loaded 14 config blocks ]]
+ local 'message=Loaded 14 config blocks'
+ print 'Loaded 14 config blocks'
+ [[ -n Loaded 14 config blocks ]]
+ echo -en 'Loaded 14 config blocks'
Loaded 14 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS=' 	
'
+ IFS='
'
++ printf '%s\n' 'object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.26MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.51MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.27MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.52MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.28MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.53MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.29MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.54MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.30MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0' 'object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0' 'object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100' 'object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0' 'object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100' 'object-group network Rogers-WiFiMTc0NzUzOTg4MTYyMjg2MTAwMAo description Wireless guest segmentMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.10.10.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.100.100' 'object-group network Avengers-DMZMTc0NzUzOTg4MTYyMjg2MTAwMAo description Public access layerMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.2.0 255.255.255.0' 'object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway' 'object network Public-TerminalMTc0NzUzOTg4MTYyMjg2MTAwMAo host 192.0.2.50MTc0NzUzOTg4MTYyMjg2MTAwMAo description Untrusted guest access' 'object network NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo host 203.0.113.25MTc0NzUzOTg4MTYyMjg2MTAwMAo description Internet-bound IP NAT' 'access-list OUTSIDE extended permit ip host 10.0.0.1 any' 'access-list OUTSIDE extended permit ip any host 203.0.113.25' 'access-list OUTSIDE extended deny ip any any' 'nat (inside,outside) source static Stark-Tower NAT-EdgeMTc0NzUzOTg4MTYyMjg2MTAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0' 'object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway' 'access-list OUTSIDE extended permit ip host 10.0.0.1 any')
+ declare -a matched_objects
+ IFS=' 	
'
+ [[ true == true ]]
+ message 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ local 'message=Loaded 3 config blocks'
+ print 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ echo -en 'Loaded 3 config blocks'
Loaded 3 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0'
+ [[ -n Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0 ]]
+ local 'message=Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0'
+ print 'Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0'
+ [[ -n Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0 ]]
+ echo -en 'Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0'
Serialized Line: object-group network Stark-CoreMTc0NzUzOTg4MTYyMjg2MTAwMAo description Internal Data PlaneMTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object host 192.168.1.10MTc0NzUzOTg4MTYyMjg2MTAwMAo network-object 192.168.1.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzOTg4MTYyMjg2MTAwMAo/\n/g'
+ restored_block='object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ local cfg_path=configs/cisco/fw1.cfg
+ local rel_path=cisco/fw1.cfg
+ local site=cisco
+ local device_filename=fw1.cfg
+ local extension=cfg
+ local objects_dir=reports/10.0.0.1/cisco
+ local objects_file=reports/10.0.0.1/cisco/fw1.cfg
+ [[ -s reports/10.0.0.1/cisco/fw1.cfg ]]
+ mkdir -p reports/10.0.0.1/cisco
+ message 'object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ local 'message=object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ print 'object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ echo -en 'object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '!'
+ [[ -n ! ]]
+ local 'message=!'
+ print '!'
+ [[ -n ! ]]
+ echo -en '!'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ local 'message=Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ print 'Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
Restored Configuration:
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/cisco/fw1.cfg 'object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/cisco/fw1.cfg
+ local 'restored_block=object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -z object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ print '[process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0'
[process_configs] Raw Block:
object-group network Stark-Core
 description Internal Data Plane
 network-object host 10.0.0.1
 network-object host 192.168.1.10
 network-object 192.168.1.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Stark-Core'
+ [[ -z object-group network Stark-Core ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ wc -l
+ ((         5 > 1  ))
++ sed -E 's/^[^[:space:]]+[[:space:]]+//'
+ type_value='network Stark-Core'
+ [[ -z network Stark-Core ]]
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Stark-Core'
+ [[ -n [process_configs] type     : network Stark-Core ]]
+ echo -en '[process_configs] type     : network Stark-Core'
[process_configs] type     : network Stark-Core+ data_sets=()
+ local -a data_sets
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=object-group network Stark-Core'
+ [[ -z object-group network Stark-Core ]]
+ [[ object-group network stark-core =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=description Internal Data Plane'
+ [[ -z description Internal Data Plane ]]
+ [[ description internal data plane =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object host 192.168.1.10'
+ [[ -z network-object host 192.168.1.10 ]]
+ [[ network-object host 192.168.1.10 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object 192.168.1.0 255.255.255.0'
+ [[ -z network-object 192.168.1.0 255.255.255.0 ]]
+ [[ network-object 192.168.1.0 255.255.255.0 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  4 > 1  ))
+ data_sets=("${data_sets[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ local 'message=[process_configs] Object Sets:'
+ print '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ echo -en '[process_configs] Object Sets:'
[process_configs] Object Sets:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${data_sets[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${data_sets[@]}"
+ print '  - network-object host 192.168.1.10'
+ [[ -n   - network-object host 192.168.1.10 ]]
+ echo -en '  - network-object host 192.168.1.10'
  - network-object host 192.168.1.10+ for e in "${data_sets[@]}"
+ print '  - network-object 192.168.1.0 255.255.255.0'
+ [[ -n   - network-object 192.168.1.0 255.255.255.0 ]]
+ echo -en '  - network-object 192.168.1.0 255.255.255.0'
  - network-object 192.168.1.0 255.255.255.0++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'matched_line=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matched_items=()
+ local -a matched_items
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_items+=("$(sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' <<< "${line}")")
++ sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
++ printf '%s\n' 'network-object host 10.0.0.1'
++ jq -R .
++ jq -s .
+ local 'matched_items_json=[
  "network-object host 10.0.0.1"
]'
++ grep -i '^[[:space:]]*description'
++ head -n 1
++ sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
+ local 'desc_val=Internal Data Plane'
+ [[ -z Internal Data Plane ]]
+ [[ Internal Data Plane =~ 
 ]]
+ [[ true == true ]]
+ message '[process_configs] Description: Internal Data Plane'
+ [[ -n [process_configs] Description: Internal Data Plane ]]
+ local 'message=[process_configs] Description: Internal Data Plane'
+ print '[process_configs] Description: Internal Data Plane'
+ [[ -n [process_configs] Description: Internal Data Plane ]]
+ echo -en '[process_configs] Description: Internal Data Plane'
[process_configs] Description: Internal Data Plane+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Stark-Core
++ jq -r --arg key Stark-Core 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc 'Internal Data Plane' 'map( select( .match[]? == $desc ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object host 192.168.1.10' 'network-object 192.168.1.0 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'items_2json=[
  "network-object host 10.0.0.1",
  "network-object host 192.168.1.10",
  "network-object 192.168.1.0 255.255.255.0"
]'
+ declare -A sets_map
+ for line in "${data_sets[@]}"
+ [[ -n network-object host 10.0.0.1 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z '' ]]
+ sets_map["$key"]=1
+ for line in "${data_sets[@]}"
+ [[ -n network-object host 192.168.1.10 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z x ]]
+ ((  sets_map[network-object]++  ))
+ for line in "${data_sets[@]}"
+ [[ -n network-object 192.168.1.0 255.255.255.0 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z x ]]
+ ((  sets_map[network-object]++  ))
++ for k in "${!sets_map[@]}"
++ printf '{ "key": "%s", "val": %d }\n' network-object 3
++ jq -s 'map({(.key): .val}) | add'
+ local 'sets_json={
  "network-object": 3
}'
++ jq -n --arg object object-group --arg type 'network Stark-Core' --arg description 'Internal Data Plane' --argjson items '[
  "network-object host 10.0.0.1"
]' --argjson sets '{
  "network-object": 3
}' --arg group Unclassified '{
          object: $object,
          type: ( $type | select( . != "" and . != "null" and . != "false" ) // false ),
          description: ( $description | select( . != "" and . != "null" and . != "false" ) // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
+ target_object='{
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ jq .
{
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Stark-Core",
  "description": "Internal Data Plane",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 3
  },
  "group": "Unclassified"
}'
++ jq -s --arg site configs/cisco --arg device fw1.cfg '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n {
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "object-group",
      "type": "network Stark-Core",
      "description": "Internal Data Plane",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 3
      },
      "group": "Unclassified"
    }
  ]
}'
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway'
+ [[ -n Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway ]]
+ local 'message=Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway'
+ print 'Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway'
+ [[ -n Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway ]]
+ echo -en 'Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway'
Serialized Line: object network Stark-TowerMTc0NzUzOTg4MTYyMjg2MTAwMAo host 10.0.0.1MTc0NzUzOTg4MTYyMjg2MTAwMAo description Core services gateway+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzOTg4MTYyMjg2MTAwMAo/\n/g'
+ restored_block='object network Stark-Tower
 host 10.0.0.1
 description Core services gateway'
+ local cfg_path=configs/cisco/fw1.cfg
+ local rel_path=cisco/fw1.cfg
+ local site=cisco
+ local device_filename=fw1.cfg
+ local extension=cfg
+ local objects_dir=reports/10.0.0.1/cisco
+ local objects_file=reports/10.0.0.1/cisco/fw1.cfg
+ [[ -s reports/10.0.0.1/cisco/fw1.cfg ]]
+ grep -Fq -- 'object network Stark-Tower
 host 10.0.0.1
 description Core services gateway' reports/10.0.0.1/cisco/fw1.cfg
+ [[ true == true ]]
+ message 'Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg'
+ [[ -n Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg ]]
+ local 'message=Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg'
+ print 'Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg'
+ [[ -n Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg ]]
+ echo -en 'Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg'
Skipping duplicate block in reports/10.0.0.1/cisco/fw1.cfg+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ continue
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local 'message=Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ print 'Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en 'Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
Serialized Line: access-list OUTSIDE extended permit ip host 10.0.0.1 any+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzOTg4MTYyMjg2MTAwMAo/\n/g'
+ restored_block='access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ local cfg_path=configs/cisco/fw1.cfg
+ local rel_path=cisco/fw1.cfg
+ local site=cisco
+ local device_filename=fw1.cfg
+ local extension=cfg
+ local objects_dir=reports/10.0.0.1/cisco
+ local objects_file=reports/10.0.0.1/cisco/fw1.cfg
+ [[ -s reports/10.0.0.1/cisco/fw1.cfg ]]
+ grep -Fq -- 'access-list OUTSIDE extended permit ip host 10.0.0.1 any' reports/10.0.0.1/cisco/fw1.cfg
+ mkdir -p reports/10.0.0.1/cisco
+ message 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local 'message=access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ print 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '!'
+ [[ -n ! ]]
+ local 'message=!'
+ print '!'
+ [[ -n ! ]]
+ echo -en '!'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ message 'Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local 'message=Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ print 'Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en 'Restored Configuration:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
Restored Configuration:
access-list OUTSIDE extended permit ip host 10.0.0.1 any+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/cisco/fw1.cfg 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ local target_pattern=10.0.0.1
+ local config_path=configs/cisco/fw1.cfg
+ local 'restored_block=access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -z access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n [process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local 'message=[process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ print '[process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n [process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en '[process_configs] Raw Block:\naccess-list OUTSIDE extended permit ip host 10.0.0.1 any'
[process_configs] Raw Block:
access-list OUTSIDE extended permit ip host 10.0.0.1 any+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -z access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=access-list
++ wc -l
+ ((         1 > 1  ))
+ type_value=false
+ [[ true == true ]]
+ print '[process_configs] object   : access-list'
+ [[ -n [process_configs] object   : access-list ]]
+ echo -en '[process_configs] object   : access-list'
[process_configs] object   : access-list+ print '[process_configs] type     : false'
+ [[ -n [process_configs] type     : false ]]
+ echo -en '[process_configs] type     : false'
[process_configs] type     : false+ data_sets=()
+ local -a data_sets
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -z access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ [[ access-list outside extended permit ip host 10.0.0.1 any =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  1 > 1  ))
+ [[ true == true ]]
+ message '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ local 'message=[process_configs] Object Sets:'
+ print '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ echo -en '[process_configs] Object Sets:'
[process_configs] Object Sets:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${data_sets[@]}"
+ print '  - access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n   - access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en '  - access-list OUTSIDE extended permit ip host 10.0.0.1 any'
  - access-list OUTSIDE extended permit ip host 10.0.0.1 any++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'matched_line=access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -z access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n [process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ local 'message=[process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ print '[process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
+ [[ -n [process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
+ echo -en '[process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any'
[process_configs] Matched: access-list OUTSIDE extended permit ip host 10.0.0.1 any+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matched_items=()
+ local -a matched_items
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_items+=("$(sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' <<< "${line}")")
++ sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//'
+ IFS=
+ read -r line
++ printf '%s\n' 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
++ jq -R .
++ jq -s .
+ local 'matched_items_json=[
  "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
]'
++ grep -i '^[[:space:]]*description'
++ head -n 1
++ sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
+ local desc_val=
+ [[ -z '' ]]
+ desc_val=false
+ [[ false =~ 
 ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=false
++ jq -r --arg key false 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc false 'map( select( .match[]? == $desc ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'access-list OUTSIDE extended permit ip host 10.0.0.1 any'
++ jq -R .
++ jq -s .
+ local 'items_2json=[
  "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
]'
+ declare -A sets_map
+ for line in "${data_sets[@]}"
+ [[ -n access-list OUTSIDE extended permit ip host 10.0.0.1 any ]]
++ awk '{print $1}'
+ key=access-list
+ [[ -n access-list ]]
+ [[ -z '' ]]
+ sets_map["$key"]=1
++ for k in "${!sets_map[@]}"
++ printf '{ "key": "%s", "val": %d }\n' access-list 1
++ jq -s 'map({(.key): .val}) | add'
+ local 'sets_json={
  "access-list": 1
}'
++ jq -n --arg object access-list --arg type false --arg description false --argjson items '[
  "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
]' --argjson sets '{
  "access-list": 1
}' --arg group Unclassified '{
          object: $object,
          type: ( $type | select( . != "" and . != "null" and . != "false" ) // false ),
          description: ( $description | select( . != "" and . != "null" and . != "false" ) // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
+ target_object='{
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ jq .
{
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "access-list",
  "type": false,
  "description": false,
  "items": [
    "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
  ],
  "sets": {
    "access-list": 1
  },
  "group": "Unclassified"
}'
++ jq -s --arg site configs/cisco --arg device fw1.cfg '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n {
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '{
  "site": "cisco",
  "device": "fw1.cfg",
  "objects": [
    {
      "object": "access-list",
      "type": false,
      "description": false,
      "items": [
        "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
      ],
      "sets": {
        "access-list": 1
      },
      "group": "Unclassified"
    }
  ]
}'
+ return 0
+ mkdir -p /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/10.0.0.1
+ export json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/10.0.0.1/10.0.0.1--MTc0NzUzOTg4.json
+ json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/10.0.0.1/10.0.0.1--MTc0NzUzOTg4.json
+ [[ -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json ]]
+ jq -s --arg target 10.0.0.1 '{ target: $target, configs: . }' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/fragments.json
++ mktemp
+ tmp_merged=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aExZ9L8iDc
+ local final_outfile=reports/10.0.0.1/10.0.0.1.json
++ dirname reports/10.0.0.1/10.0.0.1.json
+ mkdir -p reports/10.0.0.1
+ local 'jq_merge_expr={
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .sets | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }'
+ [[ -f reports/10.0.0.1/10.0.0.1.json ]]
+ jq -s '{
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .sets | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/10.0.0.1/10.0.0.1--MTc0NzUzOTg4.json
+ mv /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aExZ9L8iDc reports/10.0.0.1/10.0.0.1.json
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS/10.0.0.1/10.0.0.1--MTc0NzUzOTg4.json
+ return 0
+ unset verbose debug
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.aqJf1ioCyS

{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 81,
      "count": 3
    }
  ]
}

{
  "target": "10.0.0.1",
  "configs": [
    {
      "site": "cisco",
      "device": "fw1.cfg",
      "objects": [
        {
          "object": "access-list",
          "type": false,
          "description": false,
          "items": [
            "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
          ],
          "sets": {
            "access-list": 1
          },
          "group": "Unclassified"
        },
        {
          "object": "object-group",
          "type": "network Stark-Core",
          "description": "Internal Data Plane",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 3
          },
          "group": "Unclassified"
        }
      ]
    }
  ]
}

devops: network-resources (master *$%>) $ 
