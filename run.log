$ date && echo ;
$ rm -rf ./reports ./targets ./.cache ./.local 2>/dev/null && echo ;
$ bash -x ./scripts/parse-listings.shell --verbose --debug --classify --logs && echo ;
$ cat .local/jobs/10.0.0.1.job 2>/dev/null && echo ;
$ jq -r . ./reports/json/10.0.0.1.json 2>/dev/null ;

Sat May 17 18:16:52 MST 2025

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzUzMTAxMjc0NjgzMDAwMAo
++ divisor=MTc0NzUzMTAxMjc0NjgzMDAwMAo
+ source ./scripts/tools-listings.shell
++ [[ -n '' ]]
++ readonly __TOOLS_LISTINGS_SOURCED=1
++ __TOOLS_LISTINGS_SOURCED=1
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 5 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs --sites=cisco,juniper,misc
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(sites|s)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(sites|s)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(sites|s)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(sites|s)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --sites=cisco,juniper,misc
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ sites =~ ^(classify|g)$ ]]
+ [[ sites =~ ^(file-ext|x)$ ]]
+ [[ sites =~ ^(configs|c)$ ]]
+ [[ sites =~ ^(interval|l)$ ]]
+ [[ sites =~ ^(ips-list|i)$ ]]
+ [[ sites =~ ^(logs|o)$ ]]
+ [[ sites =~ ^(jobs|j)$ ]]
+ [[ sites =~ ^(matrix|m)$ ]]
+ [[ sites =~ ^(reports|r)$ ]]
+ [[ sites =~ ^(sites|s)$ ]]
+ export target_sites=cisco,juniper,misc
+ target_sites=cisco,juniper,misc
+ [[ sites =~ ^(validate|v)$ ]]
+ [[ sites == \h\e\l\p ]]
+ [[ sites == \d\e\b\u\g ]]
+ [[ sites == \d\r\y\-\r\u\n ]]
+ [[ sites == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z '' ]]
+ listing_filename=ips.list
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z cisco,juniper,misc ]]
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
++ date '+%Y-%m-%d %H:%M:%S'
+ local 'start_time=2025-05-17 18:16:52'
+ SECONDS=0
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
+ sort
+ [[ true == true ]]
+ message 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ local 'message=Generated configs.list at .cache/configs.list'
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n cisco,juniper,misc ]]
+ [[ cisco,juniper,misc != \f\a\l\s\e ]]
+ oIFS=' 	
'
+ IFS=,
+ read -r -a site_filters
+ IFS=' 	
'
+ filtered_configs=()
+ declare -a filtered_configs
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=cisco
+ for site in "${site_filters[@]}"
+ [[ cisco == \c\i\s\c\o ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \j\u\n\i\p\e\r ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \j\u\n\i\p\e\r ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \j\u\n\i\p\e\r ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \j\u\n\i\p\e\r ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
+ message 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ local 'message=Filtered Configurations:'
+ print 'Filtered Configurations:'
+ [[ -n Filtered Configurations: ]]
+ echo -en 'Filtered Configurations:'
Filtered Configurations:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ [[ 12 -eq 0 ]]
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ [[ true == true ]]
+ message '[FILTER] Applied --sites=cisco,juniper,misc'
+ [[ -n [FILTER] Applied --sites=cisco,juniper,misc ]]
+ local 'message=[FILTER] Applied --sites=cisco,juniper,misc'
+ print '[FILTER] Applied --sites=cisco,juniper,misc'
+ [[ -n [FILTER] Applied --sites=cisco,juniper,misc ]]
+ echo -en '[FILTER] Applied --sites=cisco,juniper,misc'
[FILTER] Applied --sites=cisco,juniper,misc+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
++ awk '{print $1}'
+ message '[FILTER] Filtered configs.list now contains: 12 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 12 entries ]]
+ local 'message=[FILTER] Filtered configs.list now contains: 12 entries'
+ print '[FILTER] Filtered configs.list now contains: 12 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 12 entries ]]
+ echo -en '[FILTER] Filtered configs.list now contains: 12 entries'
[FILTER] Filtered configs.list now contains: 12 entries+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file .cache/configs.list
+ [[ -n .cache/configs.list ]]
+ local target_file=.cache/configs.list
+ [[ true == true ]]
+ [[ -f .cache/configs.list ]]
+ case "${target_file}" in
+ cat .cache/configs.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ export output_csv=reports/reports.csv
+ output_csv=reports/reports.csv
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ [[ -z ips.list ]]
+ target_listing_raw=()
+ declare -a target_listing_raw
+ [[ -f ips.list ]]
+ mapfile -t target_listing_raw
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
+ target_listing=()
+ declare -a target_listing
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.0.1
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.0.1 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '0' '1')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ local 'segments=10 0 0 1'
+ local fixed_address=10.0.0.1
+ [[ -n '' ]]
+ [[ 10.0.0.1 != \1\0\.\0\.\0\.\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.1.2
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.1.2 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '1' '2')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ local 'segments=10 0 1 2'
+ local fixed_address=10.0.1.2
+ [[ -n '' ]]
+ [[ 10.0.1.2 != \1\0\.\0\.\1\.\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.2.3
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.2.3 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '2' '3')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 3
++ [[ -n 3 ]]
++ echo -en 3
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=3
+ [[ 3 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=3
+ local 'segments=10 0 2 3'
+ local fixed_address=10.0.2.3
+ [[ -n '' ]]
+ [[ 10.0.2.3 != \1\0\.\0\.\2\.\3 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=192 168 1 10'
+ local fixed_address=192.168.1.10
+ [[ -n '' ]]
+ [[ 192.168.1.10 != \1\9\2\.\1\6\8\.\1\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.11
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.11 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '11')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 11
++ [[ -n 11 ]]
++ echo -en 11
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=11
+ [[ 11 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=11
+ local 'segments=192 168 1 11'
+ local fixed_address=192.168.1.11
+ [[ -n '' ]]
+ [[ 192.168.1.11 != \1\9\2\.\1\6\8\.\1\.\1\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.2.12
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.2.12 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '2' '12')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 12
++ [[ -n 12 ]]
++ echo -en 12
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=12
+ [[ 12 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=12
+ local 'segments=192 168 2 12'
+ local fixed_address=192.168.2.12
+ [[ -n '' ]]
+ [[ 192.168.2.12 != \1\9\2\.\1\6\8\.\2\.\1\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.0.5
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.0.5 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '0' '5')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 5
++ [[ -n 5 ]]
++ echo -en 5
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=5
+ [[ 5 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=5
+ local 'segments=172 16 0 5'
+ local fixed_address=172.16.0.5
+ [[ -n '' ]]
+ [[ 172.16.0.5 != \1\7\2\.\1\6\.\0\.\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.1.6
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.1.6 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '1' '6')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 6
++ [[ -n 6 ]]
++ echo -en 6
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=6
+ [[ 6 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=6
+ local 'segments=172 16 1 6'
+ local fixed_address=172.16.1.6
+ [[ -n '' ]]
+ [[ 172.16.1.6 != \1\7\2\.\1\6\.\1\.\6 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.0.2.50
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.0.2.50 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '0' '2' '50')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 50
++ [[ -n 50 ]]
++ echo -en 50
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=50
+ [[ 50 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=50
+ local 'segments=192 0 2 50'
+ local fixed_address=192.0.2.50
+ [[ -n '' ]]
+ [[ 192.0.2.50 != \1\9\2\.\0\.\2\.\5\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=203.0.113.25
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 203.0.113.25 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('203' '0' '113' '25')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 203
++ [[ -n 203 ]]
++ echo -en 203
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=203
+ [[ 203 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=203
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 113
++ [[ -n 113 ]]
++ echo -en 113
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=113
+ [[ 113 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=113
+ for i in "${!segments[@]}"
++ print 25
++ [[ -n 25 ]]
++ echo -en 25
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=25
+ [[ 25 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=25
+ local 'segments=203 0 113 25'
+ local fixed_address=203.0.113.25
+ [[ -n '' ]]
+ [[ 203.0.113.25 != \2\0\3\.\0\.\1\1\3\.\2\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=198.51.100.75
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 198.51.100.75 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('198' '51' '100' '75')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 198
++ [[ -n 198 ]]
++ echo -en 198
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=198
+ [[ 198 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=198
+ for i in "${!segments[@]}"
++ print 51
++ [[ -n 51 ]]
++ echo -en 51
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=51
+ [[ 51 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=51
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 75
++ [[ -n 75 ]]
++ echo -en 75
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=75
+ [[ 75 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=75
+ local 'segments=198 51 100 75'
+ local fixed_address=198.51.100.75
+ [[ -n '' ]]
+ [[ 198.51.100.75 != \1\9\8\.\5\1\.\1\0\0\.\7\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.18.1.20
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.18.1.20 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '18' '1' '20')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 18
++ [[ -n 18 ]]
++ echo -en 18
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=18
+ [[ 18 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=18
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 20
++ [[ -n 20 ]]
++ echo -en 20
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=20
+ [[ 20 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=20
+ local 'segments=172 18 1 20'
+ local fixed_address=172.18.1.20
+ [[ -n '' ]]
+ [[ 172.18.1.20 != \1\7\2\.\1\8\.\1\.\2\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.10.10.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.10.10.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '10' '10' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=10 10 10 10'
+ local fixed_address=10.10.10.10
+ [[ -n '' ]]
+ [[ 10.10.10.10 != \1\0\.\1\0\.\1\0\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.100.100
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.100.100 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '100' '100')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ local 'segments=192 168 100 100'
+ local fixed_address=192.168.100.100
+ [[ -n '' ]]
+ [[ 192.168.100.100 != \1\9\2\.\1\6\8\.\1\0\0\.\1\0\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.31.255.254
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.31.255.254 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '31' '255' '254')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 31
++ [[ -n 31 ]]
++ echo -en 31
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=31
+ [[ 31 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=31
+ for i in "${!segments[@]}"
++ print 255
++ [[ -n 255 ]]
++ echo -en 255
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=255
+ [[ 255 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=255
+ for i in "${!segments[@]}"
++ print 254
++ [[ -n 254 ]]
++ echo -en 254
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=254
+ [[ 254 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=254
+ local 'segments=172 31 255 254'
+ local fixed_address=172.31.255.254
+ [[ -n '' ]]
+ [[ 172.31.255.254 != \1\7\2\.\3\1\.\2\5\5\.\2\5\4 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ [[ 15 -eq 0 ]]
+ mapfile -t site_folders
++ cut -d/ -f2 .cache/configs.list
++ sort -u
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print cisco,misc
++ [[ -n cisco,misc ]]
++ echo -en cisco,misc
+ message 'Site Folders: cisco,misc'
+ [[ -n Site Folders: cisco,misc ]]
+ local 'message=Site Folders: cisco,misc'
+ print 'Site Folders: cisco,misc'
+ [[ -n Site Folders: cisco,misc ]]
+ echo -en 'Site Folders: cisco,misc'
Site Folders: cisco,misc+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local batch_size=5
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS=' 	
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /cisco/ .cache/configs.list
++ printf '\0'
+ IFS=' 	
'
+ total_files=8
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ local 'message=[BATCH] Processing folder: [cisco]'
+ print '[BATCH] Processing folder: [cisco]'
+ [[ -n [BATCH] Processing folder: [cisco] ]]
+ echo -en '[BATCH] Processing folder: [cisco]'
[BATCH] Processing folder: [cisco]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ local 'message=[BATCH] Found 8 config files'
+ print '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ echo -en '[BATCH] Found 8 config files'
[BATCH] Found 8 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:16:53Z
+ timestamp='[2025-05-18T01:16:53Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:16:53Z
+ printf '%s\n' '[2025-05-18T01:16:53Z] Flushed'
+ grep -qF '[2025-05-18T01:16:53Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747531013129184000 10563
+ export batch_id=MTc0NzUzMTAx
+ batch_id=MTc0NzUzMTAx
++ date +%s
+ batch_suffix=1747531013-7271
+ batch_configs_list=configs--MTc0NzUzMTAx-1747531013-7271.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ printf '%s\n' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ range_first=1
+ range_last=5
+ message '[ MTc0NzUzMTAx ] Files 1 -> 5'
+ [[ -n [ MTc0NzUzMTAx ] Files 1 -> 5 ]]
+ local 'message=[ MTc0NzUzMTAx ] Files 1 -> 5'
+ print '[ MTc0NzUzMTAx ] Files 1 -> 5'
+ [[ -n [ MTc0NzUzMTAx ] Files 1 -> 5 ]]
+ echo -en '[ MTc0NzUzMTAx ] Files 1 -> 5'
[ MTc0NzUzMTAx ] Files 1 -> 5+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local base=configs--MTc0NzUzMTAx-1747531013-7271.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzUzMTAx-1747531013-7271.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzUzMTAx-1747531013-7271.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzUzMTAx-1747531013-7271.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
File: configs--MTc0NzUzMTAx-1747531013-7271.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: 110 bytes
Blocks/Inode: 8 / 237642682
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 17 18:16:53 2025
Modify: May 17 18:16:53 2025
Change: May 17 18:16:53 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list]'
+ print 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list]'
Batch-Config file: [configs--MTc0NzUzMTAx-1747531013-7271.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg
configs/cisco/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=94595
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 94595)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 94595) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 94595)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ local ip_addr=10.0.0.1
+ (( i = 0 ))
+ (( i < count ))
+ local target_file=targets/10.0.0.1.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ job_pid=94601
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw5.cfg ]]
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 94601)'
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 94601) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 94601)'
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      80'
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ job_pid=94610
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 94610)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 94610) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 94610)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw1.cfg
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ wc -l
++ wc -l
++ tr -d ' '
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw1.cfg
+ config_lines='      43'
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ local matched_files=configs/cisco/fw3.cfg
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw2.cfg
+ job_pid=94626
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ job_pids+=("${job_pid}")
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_file=cisco/fw3.cfg
++ wc -l
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 94626)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ tr -d ' '
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 94626) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 94626)'
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 192.168.1.11
++ tr -d '\r'
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
+ match_count=3
+ site=cisco
+ device=fw2.cfg
+ config_lines='      55'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ ip_cleaned=192.168.1.11
+ local 'matched_files=configs/cisco/fw1.cfg
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
configs/cisco/fw3.cfg'
+ target_file=targets/192.168.1.11.json
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
+ job_pid=94642
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 94642)'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ tr -d ' '
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 94642) ]]
+ config_file=cisco/fw5.cfg
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 94642)'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local ip_addr=192.168.1.11
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ wc -l
++ wc -l
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ match_count=3
+ site=cisco
+ device=fw3.cfg
+ config_lines='      80'
+ config_lines='      40'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
+ config_file=cisco/fw2.cfg
++ wc -l
++ tr -d ' '
+ job_pid=94661
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw5.cfg
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
++ wc -l
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 94661)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ tr -d ' '
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 94661) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 94661)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ config_lines='      29'
+ match_count=3
+ site=cisco
+ match_count=1
+ device=fw5.cfg
+ site=cisco
+ device=fw1.cfg
+ config_lines='      43'
++ print '[]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw4.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw2.cfg
++ tr -d ' '
+ ip_cleaned=172.16.0.5
++ wc -l
+ target_file=targets/172.16.0.5.json
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=configs/cisco/fw5.cfg
+ [[ -n configs/cisco/fw5.cfg ]]
+ config_json='[]'
++ tr -d ' '
+ IFS=
+ read -r config_file
+ config_file=cisco/fw5.cfg
+ job_pid=94688
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 94688)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 94688) ]]
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 94688)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ for ip_addr in "${target_listing[@]}"
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ jq '{ configs: . }'
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ match_count=1
+ site=cisco
+ device=fw4.cfg
++ print 172.16.1.6
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      40'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=configs/cisco/fw3.cfg
+ ip_cleaned=172.16.1.6
+ [[ -n configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ target_file=targets/172.16.1.6.json
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=cisco/fw3.cfg
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw5.cfg
++ wc -l
+ job_pid=94710
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 94710)'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
++ tr -d ' '
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 94710) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 94710)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local ip_addr=172.16.1.6
+ newline
++ wc -l
+ local target_file=targets/172.16.1.6.json
+ local count=1
+ (( i = 0 ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
+ (( i < count ))
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
+ echo
]'

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 3
  }
]'
++ jq '{ configs: . }'
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ config_lines='      55'
+ config_json='[
  {
    "config": {
      "site": "cisco",
+ match_count=1
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ site=cisco
+ IFS=
+ read -r config_file
+ device=fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ config_lines='      55'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
++ print '[]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ wc -l
++ [[ -n [] ]]
++ [[ -n [
  {
    "config": {
++ echo -en '[]'
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ ip_cleaned=192.0.2.50
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ jq '{ configs: . }'
+ target_file=targets/192.0.2.50.json
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw3.cfg
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
++ wc -l
+ job_pid=94738
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
++ tr -d ' '
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 94738)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 94738) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 94738)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 3
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ return 0
+ match_count=1
+ site=cisco
+ device=fw3.cfg
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ config_lines='      29'
+ match_count=3
+ site=cisco
+ device=fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw4.cfg
+ config_lines='      43'
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ tr -d ' '
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw2.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
++ wc -l
+ ip_cleaned=203.0.113.25
+ local matched_files=configs/cisco/fw1.cfg
+ target_file=targets/203.0.113.25.json
+ [[ -n configs/cisco/fw1.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ tr -d ' '
+ job_pid=94764
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 94764)'
++ wc -l
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 94764) ]]
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 94764)'
    },
    "lines": 40,
    "count": 1
  }
]'
+ newline
+ local count=1
+ (( i = 0 ))
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=cisco
+ device=fw4.cfg
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ print 198.51.100.75
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ match_count=1
+ site=cisco
+ device=fw2.cfg
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      80'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
++ [[ -n [] ]]
+ IFS=
++ echo -en '[]'
+ read -r config_file
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw1.cfg
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg'
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw3.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
++ wc -l
+ config_file=cisco/fw1.cfg
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 3
  }
]'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
++ jq '{ configs: . }'
+ return 0
+ ip_cleaned=198.51.100.75
++ tr -d ' '
+ target_file=targets/198.51.100.75.json
++ wc -l
+ job_pid=94791
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 1
    }
  ]
}'
+ job_pids+=("${job_pid}")
+ jq -r
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local ip_addr=198.51.100.75
+ job_ip_map["$job_pid"]=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 94791)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 94791) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 94791)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=4
+ site=cisco
+ device=fw1.cfg
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ config_lines='      80'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
+ config_file=cisco/fw5.cfg
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 4 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw1.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 1
    }
  ]
}'
+ jq -r
++ wc -l
++ wc -l
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 3
    }
  ]
}'
+ jq -r
++ tr -d ' '
+ ip_cleaned=172.18.1.20
+ local 'matched_files=configs/cisco/fw2.cfg
configs/cisco/fw5.cfg'
+ [[ -n configs/cisco/fw2.cfg
configs/cisco/fw5.cfg ]]
+ target_file=targets/172.18.1.20.json
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ job_pid=94813
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 94813)'
++ wc -l
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ return 0
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 94813) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 94813)'
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_lines='      40'
+ match_count=4
+ site=cisco
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ device=fw1.cfg
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ print '[]'
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw5.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
++ [[ -n [] ]]
+ jq -r
++ echo -en '[]'
++ wc -l
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 4 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      43'
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
]'
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
]'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
++ jq '{ configs: . }'
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
+ local matched_files=configs/cisco/fw4.cfg
+ [[ -n configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
+ job_pid=94836
++ tr -d ' '
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 94836)'
+ match_count=5
+ site=cisco
+ device=fw5.cfg
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 94836) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 94836)'
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
++ wc -l
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw2.cfg
+ match_count=3
+ site=cisco
+ device=fw2.cfg
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ return 0
++ wc -l
+ config_lines='      29'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 4
    }
  ]
}'
+ jq -r
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg'
+ ip_cleaned=192.168.100.100
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw3.cfg
configs/cisco/fw4.cfg ]]
+ target_file=targets/192.168.100.100.json
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
+ job_pid=94856
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
++ tr -d ' '
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 94856)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 94856) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 94856)'
++ wc -l
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ config_lines='      43'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
++ print 172.31.255.254
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw2.cfg
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
+ match_count=2
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
+ site=cisco
    "count": 5
  }
] ]]
+ device=fw4.cfg
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 5
  }
]'
++ tr -d ' '
++ jq '{ configs: . }'
+ config_lines='      80'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
+ config_file=cisco/fw5.cfg
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw1.cfg
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
++ wc -l
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ ip_cleaned=172.31.255.254
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ target_file=targets/172.31.255.254.json
+ return 0
++ tr -d ' '
+ match_count=3
+ local 'matched_files=configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg'
+ site=cisco
+ device=fw2.cfg
+ [[ -n configs/cisco/fw1.cfg
configs/cisco/fw2.cfg
configs/cisco/fw4.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw1.cfg
+ job_pid=94881
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 94881)'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 94881) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 94881)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531013-7271.list
+ newline
++ wc -l
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 94595
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 94595)'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 94595) ]]
    "count": 4
  }
]'
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 94595)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
++ [[ -n [
+ echo
  {
    "config": {

      "site": "cisco",
      "device": "fw1.cfg"
    },
+ (( i++ ))
    "lines": 80,
    "count": 4
  }
] ]]
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94601
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 94601)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 94601) ]]
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw1.cfg configs/cisco/fw2.cfg configs/cisco/fw3.cfg configs/cisco/fw4.cfg configs/cisco/fw5.cfg
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 94601)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94610
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 94610)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 94610) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 94610)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94626
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 94626)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 94626) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 94626)'
+ match_count=3
+ newline
+ local count=1
+ site=cisco
+ (( i = 0 ))
+ config_lines='      40'
+ device=fw1.cfg
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94642
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 94642)'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 94642) ]]
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 5
    }
  ]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 94642)'
}'
+ jq -r
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94661
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 94661)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 94661) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 94661)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94688
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 94688)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 94688) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 94688)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94710
++ print '[]'
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 94738
+ ip_address=192.0.2.50
++ grep -oE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw5.cfg
++ [[ -n [] ]]
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 94738)'
++ echo -en '[]'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 94738) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 94738)'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ newline
+ local count=1
+ config_lines='      80'
++ wc -l
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94764
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ valid_job_pids+=("$pid")
+ IFS=
+ read -r config_file
+ for pid in "${job_pids[@]}"
+ kill -0 94791
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
++ tr -d ' '
+ kill -0 94813
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 94836
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 94856
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 94881
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ true
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw1.cfg
+ local matched_files=
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ [[ -n '' ]]
+ return 0
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ wc -l
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ jq '{ configs: . }'
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
+ match_count=2
+ site=cisco
+ device=fw5.cfg
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
+ match_count=3
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ site=cisco
+ device=fw1.cfg
++ jq --arg site cisco --arg device fw5.cfg --argjson lines '      40' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw3.cfg
++ print '[]'
++ wc -l
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw1.cfg --argjson lines '      80' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
+ config_lines='      55'
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw3.cfg
++ wc -l
++ tr -d ' '
+ config_lines='      55'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw3.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ match_count=1
+ site=cisco
+ device=fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
+ config_file=cisco/fw2.cfg
++ [[ -n [
++ jq '{ configs: . }'
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw5.cfg"
    },
    "lines": 40,
    "count": 2
  }
]'
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
++ wc -l
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ match_count=5
+ site=cisco
+ device=fw3.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw3.cfg --argjson lines '      55' --argjson count 5 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      43'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw5.cfg"
      },
      "lines": 40,
      "count": 2
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw2.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
+ match_count=1
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
] ]]
+ site=cisco
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 4
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
+ device=fw2.cfg
    "lines": 43,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 1
  }
]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  }
]'
++ jq --arg site cisco --arg device fw2.cfg --argjson lines '      43' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ [[ -n \n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 198.51.100.75 at targets/198.51.100.75.json'
+ return 0
+ config_lines='      29'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 4
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ tr -d ' '
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw4.cfg
++ wc -l
+ match_count=2
+ site=cisco
+ device=fw4.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      29'
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw4.cfg
++ wc -l
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw4.cfg
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw4.cfg --argjson lines '      29' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw3.cfg"
    },
    "lines": 55,
    "count": 5
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 2
  }
]'
++ jq '{ configs: . }'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw3.cfg"
      },
      "lines": 55,
      "count": 5
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 2
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw1.cfg"
    },
    "lines": 80,
    "count": 3
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw2.cfg"
    },
    "lines": 43,
    "count": 1
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw4.cfg"
    },
    "lines": 29,
    "count": 1
  }
]'
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw1.cfg"
      },
      "lines": 80,
      "count": 3
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw2.cfg"
      },
      "lines": 43,
      "count": 1
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw4.cfg"
      },
      "lines": 29,
      "count": 1
    }
  ]
}'
+ jq -r
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ return 0
+ ((  7 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 94710
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 94710)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 94710) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 94710)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94764
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 94764)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 94764) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 94764)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94791
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 94791)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 94791) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 94791)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94813
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 94813)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 94813) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 94813)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94836
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 94836)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 94836) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 94836)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94856
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 94856)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 94856) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 94856)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 94881
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 94881)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 94881) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 94881)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=14
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=95020
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 95020)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 95020) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 95020)'
+ parse_configs 10.0.0.1 01
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=95024
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 95024)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 95024) ]]
+ parse_configs 10.0.1.2 02
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 95024)'
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 3
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=03
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=95028
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ parse_configs 10.0.2.3 03
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 95028)'
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 95028) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 95028)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
++ printf %02d 4
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ padded_index=04
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=95033
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 95033)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 95033) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 95033)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ parse_configs 192.168.1.10 04
+ ip_addr=192.168.1.11
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=05
+ [[ true == true ]]
+ execute+=(--classify)
+ logfile=.local/jobs/10.0.2.3.job
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=95037
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 95037)'
+ parse_configs 192.168.1.11 05
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 95037) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 95037)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=06
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=95043
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 95043)'
+ parse_configs 192.168.2.12 06
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 95043) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 95043)'
+ local ip_addr=192.168.2.12
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
++ printf %02d 7
+ [[ true == true ]]
+ execute+=(--classify)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=07
+ job_pid=95050
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 95050)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 95050) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 95050)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ parse_configs 172.16.0.5 07
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=172.16.0.5
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
++ printf %02d 8
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=08
+ job_pid=95057
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 95057)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 95057) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 95057)'
+ parse_configs 172.16.1.6 08
+ local ip_addr=172.16.1.6
+ newline
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 9
+ [[ true == true ]]
+ logfile=.local/jobs/172.16.0.5.job
+ execute+=(--classify)
+ [[ true == true ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=09
+ job_pid=95063
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 95063)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 95063) ]]
+ parse_configs 192.0.2.50 09
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 95063)'
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--classify)
+ logfile=.local/jobs/172.16.1.6.job
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=10
+ job_pid=95072
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 95072)'
+ parse_configs 203.0.113.25 10
+ local ip_addr=203.0.113.25
+ local padded_index=10
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 95072) ]]
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 95072)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 11
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ padded_index=11
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=95085
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 95085)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 95085) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 95085)'
+ parse_configs 198.51.100.75 11
+ newline
+ local ip_addr=198.51.100.75
+ local count=1
+ local padded_index=11
+ (( i = 0 ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 12
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=12
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=95097
+ job_pids+=("${job_pid}")
+ parse_configs 172.18.1.20 12
+ local ip_addr=172.18.1.20
+ job_ip_map["$job_pid"]=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 95097)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 95097) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 95097)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 13
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=13
+ job_pid=95114
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 95114)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 95114) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 95114)'
+ parse_configs 10.10.10.10 13
+ newline
+ local count=1
+ local ip_addr=10.10.10.10
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
++ IFS=,
++ printf %02d 14
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ padded_index=14
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=95130
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ parse_configs 192.168.100.100 14
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 95130)'
+ local ip_addr=192.168.100.100
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 95130) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 95130)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95020
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95024
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95028
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95033
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95037
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95043
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95050
+ valid_job_pids+=("$pid")
++ IFS=,
+ for pid in "${job_pids[@]}"
+ kill -0 95057
+ valid_job_pids+=("$pid")
++ print cfg,conf,cnf
+ for pid in "${job_pids[@]}"
+ kill -0 95063
+ valid_job_pids+=("$pid")
++ [[ -n cfg,conf,cnf ]]
+ for pid in "${job_pids[@]}"
+ kill -0 95072
++ echo -en cfg,conf,cnf
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95085
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95097
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95130
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95020
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95024
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95028
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95033
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95037
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95043
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95050
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95057
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95063
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95072
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95085
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95097
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95130
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  14 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95020
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95024
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95028
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95033
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 95033)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 95033) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 95033)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95037
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 95037)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 95037) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 95037)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95043
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 95043)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 95043) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 95043)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95050
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95057
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95063
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95072
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95085
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95097
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 95097)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 95097) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 95097)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95130
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  10 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95020
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95024
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 95024)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 95024) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 95024)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95028
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 95028)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 95028) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 95028)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95050
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 95050)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 95050) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 95050)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95057
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95063
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95072
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95085
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 95085)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 95085) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 95085)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95130
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  6 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95020
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 95020)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 95020) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 95020)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95057
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 95057)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 95057) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 95057)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95063
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 95063)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 95063) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 95063)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95072
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 95072)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 95072) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 95072)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 95130
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 95130)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 95130) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 95130)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  1 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 95114
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 95114)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 95114) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 95114)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 8 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747531017449101000 26263
+ export batch_id=MTc0NzUzMTAx
+ batch_id=MTc0NzUzMTAx
++ date +%s
+ batch_suffix=1747531017-11003
+ batch_configs_list=configs--MTc0NzUzMTAx-1747531017-11003.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ printf '%s\n' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ range_first=6
+ range_last=8
+ message '[ MTc0NzUzMTAx ] Files 6 -> 8'
+ [[ -n [ MTc0NzUzMTAx ] Files 6 -> 8 ]]
+ local 'message=[ MTc0NzUzMTAx ] Files 6 -> 8'
+ print '[ MTc0NzUzMTAx ] Files 6 -> 8'
+ [[ -n [ MTc0NzUzMTAx ] Files 6 -> 8 ]]
+ echo -en '[ MTc0NzUzMTAx ] Files 6 -> 8'
[ MTc0NzUzMTAx ] Files 6 -> 8+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local base=configs--MTc0NzUzMTAx-1747531017-11003.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzUzMTAx-1747531017-11003.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzUzMTAx-1747531017-11003.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzUzMTAx-1747531017-11003.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
File: configs--MTc0NzUzMTAx-1747531017-11003.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: 66 bytes
Blocks/Inode: 8 / 237642845
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 17 18:16:57 2025
Modify: May 17 18:16:57 2025
Change: May 17 18:16:57 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list]'
+ print 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list]'
Batch-Config file: [configs--MTc0NzUzMTAx-1747531017-11003.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
configs/cisco/fw6.cfg
configs/cisco/fw7.cfg
configs/cisco/fw8.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=99959
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 99959)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 99959) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 99959)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ local matched_files=configs/cisco/fw8.cfg
+ ip_cleaned=10.0.1.2
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ target_file=targets/10.0.1.2.json
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ job_pid=99965
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 99965)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 99965) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 99965)'
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      21'
+ ip_cleaned=10.0.2.3
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco/fw8.cfg
+ IFS=
+ read -r config_file
+ target_file=targets/10.0.2.3.json
+ config_file=cisco/fw6.cfg
++ wc -l
+ job_pid=99977
++ tr -d ' '
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 99977)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 99977) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 99977)'
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ newline
++ wc -l
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
++ print 192.168.1.10
+ site=cisco
+ device=fw8.cfg
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ config_lines='      26'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco/fw6.cfg
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
++ wc -l
++ tr -d ' '
+ ip_cleaned=192.168.1.10
++ wc -l
+ target_file=targets/192.168.1.10.json
+ job_pid=99993
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 99993)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 99993) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 99993)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ match_count=1
+ site=cisco
+ device=fw6.cfg
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ config_lines='      31'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ print '[]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ tr -d ' '
++ jq '{ configs: . }'
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
+ job_pid=128
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 128)'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 128) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 128)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
+ site=cisco
+ device=fw7.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
+ config_lines='      26'
++ true
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco/fw6.cfg
++ wc -l
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
++ tr -d ' '
+ job_pid=179
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 179)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 179) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 179)'
+ newline
+ local count=1
+ (( i = 0 ))
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=192.168.2.12
+ (( i < count ))
+ local target_file=targets/192.168.2.12.json
+ echo

+ (( i++ ))
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=2
+ site=cisco
+ device=fw6.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
++ [[ -n [] ]]
++ echo -en '[]'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
    }
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
  ]
}'
+ jq -r
+ return 0
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ ip_cleaned=172.16.0.5
+ target_file=targets/172.16.0.5.json
+ job_pid=193
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 193)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 193) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 193)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.16.1.6
++ tr -d '\r'
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      21'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
+ ip_cleaned=172.16.1.6
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ target_file=targets/172.16.1.6.json
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco/fw8.cfg
+ local matched_files=configs/cisco/fw8.cfg
+ [[ -n configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
++ wc -l
++ tr -d ' '
+ job_pid=209
+ job_pids+=("${job_pid}")
++ wc -l
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ job_ip_map["$job_pid"]=172.16.1.6
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 209)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 209) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 209)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=1
+ site=cisco
++ print 192.0.2.50
+ device=fw8.cfg
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ print '[]'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ [[ -n [] ]]
++ echo -en '[]'
+ return 0
+ config_lines='      21'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    }
  ]
}'
+ jq -r
++ true
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco/fw8.cfg
+ local matched_files=
+ [[ -n '' ]]
+ ip_cleaned=192.0.2.50
+ return 0
+ target_file=targets/192.0.2.50.json
++ wc -l
++ tr -d ' '
+ job_pid=252
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 252)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 252) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 252)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=2
+ site=cisco
+ device=fw8.cfg
++ print 203.0.113.25
++ tr -d '\r'
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ config_file=cisco/fw7.cfg
+ job_pid=279
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 279)'
++ wc -l
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 279) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 279)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 198.51.100.75
++ tr -d '\r'
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      31'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 2
  }
]'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco/fw7.cfg
+ ip_cleaned=198.51.100.75
++ wc -l
+ target_file=targets/198.51.100.75.json
+ local 'matched_files=configs/cisco/fw6.cfg
configs/cisco/fw8.cfg'
+ [[ -n configs/cisco/fw6.cfg
configs/cisco/fw8.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ tr -d ' '
+ config_file=cisco/fw6.cfg
+ job_pid=303
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
++ wc -l
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 303)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 303) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 303)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=3
+ site=cisco
+ device=fw7.cfg
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ print '[]'
+ config_lines='      26'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 2
    }
  ]
}'
+ jq -r
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 3 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.2.12 at targets/192.168.2.12.json'
+ return 0
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw6.cfg
++ true
++ wc -l
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ tr -d ' '
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ job_pid=319
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 319)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 319) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 319)'
+ newline
+ local count=1
+ (( i = 0 ))
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ (( i < count ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ match_count=2
+ site=cisco
+ device=fw6.cfg
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
    "lines": 31,
    "count": 3
  }
]'
+ IFS=
+ read -r config_file
+ return 0
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 3
  }
]'
++ jq '{ configs: . }'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ job_pid=371
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 371)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 371) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 371)'
+ newline
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local count=1
+ local ip_addr=10.10.10.10
+ (( i = 0 ))
+ local target_file=targets/10.10.10.10.json
+ (( i < count ))
+ echo

+ (( i++ ))
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw8.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 3
    }
  ]
}'
+ jq -r
++ wc -l
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
+ local matched_files=configs/cisco/fw6.cfg
+ [[ -n configs/cisco/fw6.cfg ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=cisco/fw6.cfg
+ job_pid=387
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 387)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 387) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 387)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ wc -l
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ config_lines='      21'
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ grep -oE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco/fw8.cfg
++ tr -d '\r'
++ wc -l
++ tr -d ' '
+ config_lines='      26'
+ print '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.0.2.50 at targets/192.0.2.50.json'
+ return 0
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco/fw6.cfg
+ ip_cleaned=172.31.255.254
+ local matched_files=configs/cisco/fw7.cfg
+ [[ -n configs/cisco/fw7.cfg ]]
+ config_json='[]'
++ wc -l
+ target_file=targets/172.31.255.254.json
+ IFS=
+ read -r config_file
+ config_file=cisco/fw7.cfg
++ tr -d ' '
+ match_count=1
+ site=cisco
+ device=fw8.cfg
+ job_pid=520
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 520)'
++ wc -l
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAx-1747531017-11003.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 520) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 520)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 99959
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 99959)'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  }
]'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 99959) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 99959)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 99965
++ jq --arg site cisco --arg device fw8.cfg --argjson lines '      21' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 99965)'
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw6.cfg configs/cisco/fw7.cfg configs/cisco/fw8.cfg
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 99965) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 99965)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 99977
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 99977)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 99977) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 99977)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 99993
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 99993)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 99993) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 99993)'
+ match_count=1
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ site=cisco
+ echo

+ (( i++ ))
+ (( i < count ))
+ device=fw6.cfg
+ for pid in "${job_pids[@]}"
+ kill -0 128
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 128)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 128) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 128)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 179
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 179)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 179) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 179)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 193
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 193)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 193) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 193)'
+ config_lines='      31'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 209
++ print '[]'
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 209)'
++ [[ -n [] ]]
++ echo -en '[]'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 209) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 209)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 252
++ jq --arg site cisco --arg device fw6.cfg --argjson lines '      26' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 252)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 252) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 252)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 279
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 303
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 303)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 303) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 303)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local matched_files=configs/cisco/fw7.cfg
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ [[ -n configs/cisco/fw7.cfg ]]
+ kill -0 319
+ config_json='[]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco/fw7.cfg
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 319)'
+ config_file=cisco/fw7.cfg
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 319) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 319)'
+ newline
++ wc -l
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 371
+ valid_job_pids+=("$pid")
++ tr -d ' '
+ for pid in "${job_pids[@]}"
+ kill -0 387
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 520
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ match_count=2
+ site=cisco
+ device=fw7.cfg
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 2
  },
  {
    "config": {
      "site": "cisco",
      "device": "fw8.cfg"
    },
    "lines": 21,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ config_lines='      31'
++ print '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco/fw7.cfg
++ wc -l
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw6.cfg"
    },
    "lines": 26,
    "count": 1
  }
]'
++ tr -d ' '
++ jq '{ configs: . }'
+ match_count=1
+ site=cisco
+ device=fw7.cfg
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 2
    },
    {
      "config": {
        "site": "cisco",
        "device": "fw8.cfg"
      },
      "lines": 21,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site cisco --arg device fw7.cfg --argjson lines '      31' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw6.cfg"
      },
      "lines": 26,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 2
  }
]'
++ jq '{ configs: . }'
+ print '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ [[ -n \n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 203.0.113.25 at targets/203.0.113.25.json'
+ return 0
+ config_json='[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 2
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
++ [[ -n [
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "cisco",
      "device": "fw7.cfg"
    },
    "lines": 31,
    "count": 1
  }
]'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
++ jq '{ configs: . }'
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "cisco",
        "device": "fw7.cfg"
      },
      "lines": 31,
      "count": 1
    }
  ]
}'
+ jq -r
+ return 0
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 279
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 279)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 279) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 279)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 371
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 371)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 371) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 371)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 387
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 387)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 387) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 387)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 520
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 520)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 520) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 520)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=29
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=772
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 772)'
+ parse_configs 10.0.0.1 01
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 772) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 772)'
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
++ printf %02d 2
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=780
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 780)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 780) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 780)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=03
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=786
+ job_pids+=("${job_pid}")
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 786)'
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 786) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 786)'
+ parse_configs 10.0.2.3 03
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
++ printf %02d 4
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=04
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=792
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 792)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 792) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 792)'
+ parse_configs 192.168.1.10 04
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ (( i < count ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
+ padded_index=05
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=797
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 797)'
+ parse_configs 192.168.1.11 05
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 797) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 797)'
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=06
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=803
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ parse_configs 192.168.2.12 06
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 803)'
+ local ip_addr=192.168.2.12
+ local padded_index=06
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 803) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 803)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
++ printf %02d 7
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=07
+ job_pid=813
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 813)'
+ parse_configs 172.16.0.5 07
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 813) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 813)'
+ local ip_addr=172.16.0.5
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=08
+ job_pid=830
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 830)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 830) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 830)'
+ parse_configs 172.16.1.6 08
+ newline
+ local count=1
+ local ip_addr=172.16.1.6
+ (( i = 0 ))
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 9
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.16.0.5.job
+ padded_index=09
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=861
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 861)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 861) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 861)'
+ parse_configs 192.0.2.50 09
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=192.0.2.50
+ local padded_index=09
+ (( i < count ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ padded_index=10
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=892
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 892)'
+ parse_configs 203.0.113.25 10
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 892) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 892)'
+ local ip_addr=203.0.113.25
+ newline
+ local padded_index=10
+ local count=1
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 11
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=11
+ job_pid=905
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 905)'
+ parse_configs 198.51.100.75 11
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 905) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 905)'
+ local ip_addr=198.51.100.75
+ local padded_index=11
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 12
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=12
+ job_pid=933
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 933)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 933) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 933)'
+ newline
+ parse_configs 172.18.1.20 12
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
+ local ip_addr=172.18.1.20
+ local padded_index=12
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ printf %02d 13
++ echo -en cfg,conf,cnf
+ padded_index=13
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
+ [[ true == true ]]
+ execute+=(--classify)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=947
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 947)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 947) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 947)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ parse_configs 10.10.10.10 13
+ local ip_addr=10.10.10.10
+ local padded_index=13
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 14
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=14
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=12 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=977
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 977)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 977) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 977)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ parse_configs 192.168.100.100 14
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
+ local ip_addr=192.168.100.100
+ local padded_index=14
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 15
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=15
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=13 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=998
+ job_pids+=("${job_pid}")
+ parse_configs 10.0.0.1 15
+ job_ip_map["$job_pid"]=10.0.0.1
+ local ip_addr=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 998)'
+ local padded_index=15
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 998) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 998)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=14 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 16
+ padded_index=16
+ job_pid=1030
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 1030)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 1030) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 1030)'
+ newline
+ local count=1
+ parse_configs 10.0.1.2 16
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ local ip_addr=10.0.1.2
+ local padded_index=16
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
++ print cfg,conf,cnf
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=15 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 17
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ padded_index=17
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=1050
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 1050)'
+ parse_configs 10.0.2.3 17
+ local ip_addr=10.0.2.3
+ local padded_index=17
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 1050) ]]
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 1050)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 18
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=16 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=18
+ job_pid=1078
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 1078)'
+ parse_configs 192.168.1.10 18
+ local ip_addr=192.168.1.10
+ local padded_index=18
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 1078) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 1078)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=17 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 19
+ padded_index=19
+ job_pid=1111
+ job_pids+=("${job_pid}")
+ parse_configs 192.168.1.11 19
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 1111)'
+ local ip_addr=192.168.1.11
+ local padded_index=19
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 1111) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 1111)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.2.12
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=18 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 20
+ padded_index=20
+ job_pid=1146
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 1146)'
+ parse_configs 192.168.2.12 20
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 1146) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 1146)'
+ local ip_addr=192.168.2.12
+ newline
+ local count=1
+ local padded_index=20
+ (( i = 0 ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 21
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ true == true ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=19 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=21
+ job_pid=1177
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 1177)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 1177) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 1177)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ parse_configs 172.16.0.5 21
+ local ip_addr=172.16.0.5
+ local padded_index=21
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
+ logfile=.local/jobs/192.168.2.12.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.2.12 --index=20 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 22
+ padded_index=22
+ job_pid=1210
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 1210)'
+ parse_configs 172.16.1.6 22
+ local ip_addr=172.16.1.6
+ local padded_index=22
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 1210) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 1210)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.0.2.50
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=21 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 23
+ padded_index=23
+ job_pid=1255
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ parse_configs 192.0.2.50 23
+ local ip_addr=192.0.2.50
+ local padded_index=23
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 1255)'
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=22 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 1255) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 1255)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=203.0.113.25
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 24
+ padded_index=24
+ job_pid=1297
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 1297)'
+ parse_configs 203.0.113.25 24
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 1297) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 1297)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ local ip_addr=203.0.113.25
+ local padded_index=24
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=198.51.100.75
++ IFS=,
++ print cfg,conf,cnf
+ logfile=.local/jobs/192.0.2.50.job
+ [[ true == true ]]
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.0.2.50 --index=23 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
++ printf %02d 25
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=25
+ job_pid=1335
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 1335)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 1335) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 1335)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.18.1.20
+ parse_configs 198.51.100.75 25
+ local ip_addr=198.51.100.75
+ local padded_index=25
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ logfile=.local/jobs/203.0.113.25.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=203.0.113.25 --index=24 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
++ printf %02d 26
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=26
+ job_pid=1378
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 1378)'
+ parse_configs 172.18.1.20 26
+ local ip_addr=172.18.1.20
+ local padded_index=26
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 1378) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 1378)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.10.10.10
+ logfile=.local/jobs/198.51.100.75.job
+ [[ true == true ]]
++ IFS=,
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=198.51.100.75 --index=25 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 27
+ padded_index=27
+ job_pid=1419
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 1419)'
+ parse_configs 10.10.10.10 27
+ local ip_addr=10.10.10.10
+ local padded_index=27
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 1419) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 1419)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=26 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 28
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=28
+ job_pid=1470
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ parse_configs 192.168.100.100 28
+ local ip_addr=192.168.100.100
+ local padded_index=28
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 1470)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 1470) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 1470)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=27 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 29
+ padded_index=29
+ job_pid=1523
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 1523)'
+ parse_configs 172.31.255.254 29
+ local ip_addr=172.31.255.254
+ local padded_index=29
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 1523) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 1523)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 772
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=28 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 780
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 786
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 792
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 797
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 803
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 813
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 861
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 892
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 905
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 933
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 947
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 977
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 998
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1030
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1050
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1078
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1111
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1146
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1177
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1255
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
]}"
+ kill -0 1297
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1335
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1378
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1419
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1470
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1523
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=29 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 772
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 780
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 786
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 792
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 797
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 803
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 813
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 861
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 892
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 905
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 933
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 947
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 977
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 998
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1030
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1050
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1078
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1111
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1146
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1177
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1255
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1297
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1335
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1378
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1419
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1470
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1523
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  29 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 772
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 772)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 772) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 772)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 780
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 780)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 780) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 780)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 786
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 786)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 786) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 786)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 792
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 797
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 803
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 803)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 803) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 803)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 813
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 861
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 892
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 905
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 933
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 947
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 947)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 947) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 947)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 977
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 998
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 998)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 998) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 998)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1030
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 1030)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 1030) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 1030)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1050
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 1050)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 1050) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 1050)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1078
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1111
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1146
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1177
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1255
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1297
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1335
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1378
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1419
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 1419)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 1419) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 1419)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1470
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1523
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  20 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 792
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 792)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 792) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 792)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 797
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 797)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 797) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 797)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 813
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 813)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 813) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 813)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 861
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 861)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 861) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 861)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 892
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 892)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 892) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 892)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 905
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 933
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 933)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 933) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 933)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 977
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 977)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 977) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 977)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1078
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 1078)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 1078) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 1078)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1111
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 1111)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 1111) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 1111)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1146
+ ip=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 1146)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 1146) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 1146)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1177
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 1177)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 1177) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 1177)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1255
+ ip=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 1255)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 1255) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 1255)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1297
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1335
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1378
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 1378)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 1378) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 1378)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1470
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 1470)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 1470) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 1470)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1523
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 1523)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 1523) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 1523)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  5 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 905
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 905)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 905) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 905)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 1297
+ ip=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 1297)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 1297) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 1297)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1335
+ ip=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 1335)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 1335) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 1335)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  2 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 830
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 830)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 830) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 830)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 1210
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 1210)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 1210) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 1210)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=10
+ [[ 10 -lt 8 ]]
+ generate_csvoutput
++ mktemp
+ local tmp_csv=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.mFxI3OzJnK
+ [[ ! -d reports ]]
+ find reports -type f -name '*.json' -mindepth 2 -maxdepth 2
+ sort
+ read -r json
+ message 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ local 'message=Processing reports/10.0.0.1/10.0.0.1.json'
+ print 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ echo -en 'Processing reports/10.0.0.1/10.0.0.1.json'
Processing reports/10.0.0.1/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.0.1/10.0.0.1.json
+ read -r json
+ message 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ local 'message=Processing reports/10.0.1.2/10.0.1.2.json'
+ print 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ echo -en 'Processing reports/10.0.1.2/10.0.1.2.json'
Processing reports/10.0.1.2/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.1.2/10.0.1.2.json
+ read -r json
+ message 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ local 'message=Processing reports/10.0.2.3/10.0.2.3.json'
+ print 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ echo -en 'Processing reports/10.0.2.3/10.0.2.3.json'
Processing reports/10.0.2.3/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.2.3/10.0.2.3.json
+ read -r json
+ message 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ local 'message=Processing reports/10.10.10.10/10.10.10.10.json'
+ print 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ echo -en 'Processing reports/10.10.10.10/10.10.10.10.json'
Processing reports/10.10.10.10/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.10.10.10/10.10.10.10.json
+ read -r json
+ message 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ local 'message=Processing reports/172.16.0.5/172.16.0.5.json'
+ print 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ echo -en 'Processing reports/172.16.0.5/172.16.0.5.json'
Processing reports/172.16.0.5/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.0.5/172.16.0.5.json
+ read -r json
+ message 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ local 'message=Processing reports/172.16.1.6/172.16.1.6.json'
+ print 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ echo -en 'Processing reports/172.16.1.6/172.16.1.6.json'
Processing reports/172.16.1.6/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.1.6/172.16.1.6.json
+ read -r json
+ message 'Processing reports/172.18.1.20/172.18.1.20.json'
+ [[ -n Processing reports/172.18.1.20/172.18.1.20.json ]]
+ local 'message=Processing reports/172.18.1.20/172.18.1.20.json'
+ print 'Processing reports/172.18.1.20/172.18.1.20.json'
+ [[ -n Processing reports/172.18.1.20/172.18.1.20.json ]]
+ echo -en 'Processing reports/172.18.1.20/172.18.1.20.json'
Processing reports/172.18.1.20/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.18.1.20/172.18.1.20.json
+ read -r json
+ message 'Processing reports/172.31.255.254/172.31.255.254.json'
+ [[ -n Processing reports/172.31.255.254/172.31.255.254.json ]]
+ local 'message=Processing reports/172.31.255.254/172.31.255.254.json'
+ print 'Processing reports/172.31.255.254/172.31.255.254.json'
+ [[ -n Processing reports/172.31.255.254/172.31.255.254.json ]]
+ echo -en 'Processing reports/172.31.255.254/172.31.255.254.json'
Processing reports/172.31.255.254/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.31.255.254/172.31.255.254.json
+ read -r json
+ message 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ local 'message=Processing reports/192.0.2.50/192.0.2.50.json'
+ print 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ echo -en 'Processing reports/192.0.2.50/192.0.2.50.json'
Processing reports/192.0.2.50/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.0.2.50/192.0.2.50.json
+ read -r json
+ message 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ local 'message=Processing reports/192.168.1.10/192.168.1.10.json'
+ print 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ echo -en 'Processing reports/192.168.1.10/192.168.1.10.json'
Processing reports/192.168.1.10/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.10/192.168.1.10.json
+ read -r json
+ message 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ local 'message=Processing reports/192.168.1.11/192.168.1.11.json'
+ print 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ echo -en 'Processing reports/192.168.1.11/192.168.1.11.json'
Processing reports/192.168.1.11/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.11/192.168.1.11.json
+ read -r json
+ message 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ local 'message=Processing reports/192.168.100.100/192.168.100.100.json'
+ print 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ echo -en 'Processing reports/192.168.100.100/192.168.100.100.json'
Processing reports/192.168.100.100/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.100.100/192.168.100.100.json
+ read -r json
+ message 'Processing reports/192.168.2.12/192.168.2.12.json'
+ [[ -n Processing reports/192.168.2.12/192.168.2.12.json ]]
+ local 'message=Processing reports/192.168.2.12/192.168.2.12.json'
+ print 'Processing reports/192.168.2.12/192.168.2.12.json'
+ [[ -n Processing reports/192.168.2.12/192.168.2.12.json ]]
+ echo -en 'Processing reports/192.168.2.12/192.168.2.12.json'
Processing reports/192.168.2.12/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.2.12/192.168.2.12.json
+ read -r json
+ message 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ local 'message=Processing reports/198.51.100.75/198.51.100.75.json'
+ print 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ echo -en 'Processing reports/198.51.100.75/198.51.100.75.json'
Processing reports/198.51.100.75/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/198.51.100.75/198.51.100.75.json
+ read -r json
+ message 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ local 'message=Processing reports/203.0.113.25/203.0.113.25.json'
+ print 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ echo -en 'Processing reports/203.0.113.25/203.0.113.25.json'
Processing reports/203.0.113.25/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/203.0.113.25/203.0.113.25.json
+ read -r json
+ message target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ local message=target,site,device,object,sets,description,group
+ print target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ echo -en target,site,device,object,sets,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ sort -t, -k1,1 -k2,2 -k3,3 -k4,4 /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.mFxI3OzJnK
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.mFxI3OzJnK
+ return 0
+ for site in "${site_folders[@]}"
+ filtered_target_listing=()
+ oIFS=' 	
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /misc/ .cache/configs.list
++ printf '\0'
+ IFS=' 	
'
+ total_files=4
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ local 'message=[BATCH] Processing folder: [misc]'
+ print '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ echo -en '[BATCH] Processing folder: [misc]'
[BATCH] Processing folder: [misc]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ local 'message=[BATCH] Found 4 config files'
+ print '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ echo -en '[BATCH] Found 4 config files'
[BATCH] Found 4 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ timestamp='[2025-05-18T01:17:02Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ printf '%s\n' '[2025-05-18T01:17:02Z] Flushed'
+ grep -qF '[2025-05-18T01:17:02Z] Flushed' .local/stats/targets.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ timestamp='[2025-05-18T01:17:02Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ printf '%s\n' '[2025-05-18T01:17:02Z] Flushed'
+ grep -qF '[2025-05-18T01:17:02Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ timestamp='[2025-05-18T01:17:02Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ printf '%s\n' '[2025-05-18T01:17:02Z] Flushed'
+ grep -qF '[2025-05-18T01:17:02Z] Flushed' .local/stats/success.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ timestamp='[2025-05-18T01:17:02Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-18T01:17:02Z
+ printf '%s\n' '[2025-05-18T01:17:02Z] Flushed'
+ grep -qF '[2025-05-18T01:17:02Z] Flushed' .local/stats/started.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ offset=0
+ [[ 0 -lt 4 ]]
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747531022067522000 18961
+ export batch_id=MTc0NzUzMTAy
+ batch_id=MTc0NzUzMTAy
++ date +%s
+ batch_suffix=1747531022-1799
+ batch_configs_list=configs--MTc0NzUzMTAy-1747531022-1799.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ printf '%s\n' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ range_first=1
+ range_last=4
+ message '[ MTc0NzUzMTAy ] Files 1 -> 4'
+ [[ -n [ MTc0NzUzMTAy ] Files 1 -> 4 ]]
+ local 'message=[ MTc0NzUzMTAy ] Files 1 -> 4'
+ print '[ MTc0NzUzMTAy ] Files 1 -> 4'
+ [[ -n [ MTc0NzUzMTAy ] Files 1 -> 4 ]]
+ echo -en '[ MTc0NzUzMTAy ] Files 1 -> 4'
[ MTc0NzUzMTAy ] Files 1 -> 4+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local base=configs--MTc0NzUzMTAy-1747531022-1799.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzUzMTAy-1747531022-1799.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzUzMTAy-1747531022-1799.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzUzMTAy-1747531022-1799.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
File: configs--MTc0NzUzMTAy-1747531022-1799.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6
Size: 104 bytes
Blocks/Inode: 8 / 237643040
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 17 18:17:02 2025
Modify: May 17 18:17:02 2025
Change: May 17 18:17:02 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list]'
+ print 'Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list]'
Batch-Config file: [configs--MTc0NzUzMTAy-1747531022-1799.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=7027
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 7027)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 7027) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 7027)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch3.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch3.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ job_pid=7033
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 7033)'
++ wc -l
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 7033) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 7033)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      14'
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
+ job_pid=7045
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
++ tr -d ' '
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 7045)'
++ wc -l
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local ip_addr=10.0.2.3
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 7045) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 7045)'
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
+ match_count=1
++ tr -d '\r'
+ site=misc
+ device=switch1.conf
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
++ tr -d ' '
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ job_pid=7060
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 7060)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 7060) ]]
++ wc -l
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 7060)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch1.conf
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      14'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch3.conf
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=misc/switch1.conf
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ tr -d ' '
++ wc -l
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
+ job_pid=7079
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 7079)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 7079) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 7079)'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_lines='      11'
++ print 192.168.2.12
+ match_count=1
++ [[ -n 192.168.2.12 ]]
+ site=misc
++ echo -en 192.168.2.12
+ device=switch2.conf
+ config_json='[
+ config_lines='      14'
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ tr -d '\r'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch3.conf
++ wc -l
++ wc -l
++ tr -d ' '
++ print '[]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf
++ [[ -n [] ]]
++ echo -en '[]'
++ wc -l
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ tr -d ' '
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ config_file=misc/switch2.conf
+ job_pid=7098
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 7098)'
++ wc -l
+ match_count=2
+ site=misc
+ device=switch3.conf
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 7098) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 7098)'
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ config_lines='      14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=misc
+ device=switch1.conf
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch4.conf
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 2 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ wc -l
++ print 172.16.0.5
++ print '[]'
++ tr -d ' '
++ [[ -n [] ]]
++ echo -en '[]'
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      14'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ true
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch2.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ wc -l
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ local matched_files=
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=172.16.0.5
+ match_count=1
++ jq '{ configs: . }'
+ target_file=targets/172.16.0.5.json
+ site=misc
+ device=switch4.conf
++ tr -d ' '
+ job_pid=7123
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 7123)'
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 7123) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 7123)'
++ print '[
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ local ip_addr=172.16.0.5
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ local target_file=targets/172.16.0.5.json
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
    "lines": 14,
    "count": 1
  }
]'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch2.conf
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ wc -l
++ tr -d '\r'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
] ]]
++ jq '{ configs: . }'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ ip_cleaned=172.16.1.6
+ config_lines='      14'
+ target_file=targets/172.16.1.6.json
++ wc -l
+ job_pid=7142
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 7142)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 7142) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 7142)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ newline
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch4.conf
+ local ip_addr=172.16.1.6
+ local count=1
+ (( i = 0 ))
+ local target_file=targets/172.16.1.6.json
+ (( i < count ))
+ echo

+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ wc -l
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
++ jq '{ configs: . }'
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ tr -d ' '
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 2
    }
  ]
}'
+ jq -r
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      14'
+ match_count=1
+ site=misc
+ device=switch4.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch4.conf
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ wc -l
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ tr -d ' '
+ return 0
+ local matched_files=configs/misc/switch3.conf
+ [[ -n configs/misc/switch3.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ config_file=misc/switch3.conf
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ ip_cleaned=192.0.2.50
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ target_file=targets/192.0.2.50.json
+ job_pid=7168
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=192.0.2.50
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 7168)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 7168) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 7168)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=misc
+ device=switch4.conf
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ return 0
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ print '[]'
++ echo -en 203.0.113.25
++ [[ -n [] ]]
++ echo -en '[]'
++ tr -d '\r'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ config_lines='      11'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch3.conf
++ true
++ wc -l
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=
+ [[ -n '' ]]
+ return 0
++ tr -d ' '
+ ip_cleaned=203.0.113.25
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ target_file=targets/203.0.113.25.json
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ job_pid=7186
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 7186)'
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 7186) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 7186)'
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ match_count=1
+ site=misc
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ device=switch3.conf
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ return 0
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ print '[]'
++ tr -d '\r'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ job_pid=7199
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 7199)'
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 7199) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 7199)'
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print 172.18.1.20
++ tr -d '\r'
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ true
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ local matched_files=
+ return 0
+ [[ -n '' ]]
+ return 0
+ job_pid=7210
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 7210)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 7210) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 7210)'
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
++ tr -d '\r'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 1
    }
  ]
}'
+ jq -r
+ ip_cleaned=10.10.10.10
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ target_file=targets/10.10.10.10.json
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
+ job_pid=7217
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 7217)'
++ wc -l
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 7217) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 7217)'
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
++ tr -d '\r'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ return 0
+ config_lines='      14'
+ local matched_files=configs/misc/switch2.conf
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch4.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=misc/switch2.conf
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
++ tr -d ' '
+ job_pid=7230
++ wc -l
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 7230)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 7230) ]]
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 7230)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch4.conf
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ tr -d ' '
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
+ job_pid=7245
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 7245)'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 7245) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 7245)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ newline
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6/configs--MTc0NzUzMTAy-1747531022-1799.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 7027
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 7027)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 7027) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 7027)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7033
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 7033)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 7033) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 7033)'
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ match_count=1
+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7045
+ site=misc
+ device=switch2.conf
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 7045)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 7045) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 7045)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7060
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 7060)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 7060) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 7060)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7079
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 7079)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 7079) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 7079)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7098
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 7098)'
++ print '[]'
++ [[ -n [] ]]
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 7098) ]]
++ echo -en '[]'
+ config_json='[
  {
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 7098)'
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      14'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7123
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 7123)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 7123) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 7123)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7142
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 7142)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 7142) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 7142)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7168
+ ip_address=192.0.2.50
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 7168)'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch2.conf
++ jq '{ configs: . }'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 7168) ]]
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 7168)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
++ wc -l
+ kill -0 7186
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 7186)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 7186) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 7186)'
+ newline
+ local count=1
+ local matched_files=configs/misc/switch1.conf
+ (( i = 0 ))
++ tr -d ' '
+ (( i < count ))
+ echo

+ [[ -n configs/misc/switch1.conf ]]
+ (( i++ ))
+ config_json='[]'
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7199
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 7199)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 7199) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 7199)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7210
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7217
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7230
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7245
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ wc -l
+ match_count=1
+ site=misc
+ device=switch2.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
+ config_lines='      14'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
++ print '[
        "device": "switch4.conf"
  {
      },
    "config": {
      "lines": 14,
      "site": "misc",
      "count": 1
      "device": "switch2.conf"
    }
    },
  ]
    "lines": 14,
}'
    "count": 1
  }
]'
+ jq -r
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
++ tr -d ' '
+ match_count=1
+ site=misc
+ device=switch1.conf
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ IFS=
+ read -r config_file
+ jq -r
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [ { "config": { "site": $site, "device": $device }, "lines": $lines, "count": $count } ]'
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ return 0
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{ configs: . }'
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ return 0
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 7210
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 7210)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 7210) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 7210)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7217
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 7217)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 7217) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 7217)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7230
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 7230)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 7230) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 7230)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7245
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 7245)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 7245) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 7245)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=11
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=7334
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 7334)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 7334) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 7334)'
+ parse_configs 10.0.0.1 01
+ local ip_addr=10.0.0.1
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.1.2
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=7338
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 7338)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 7338) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 7338)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ parse_configs 10.0.1.2 02
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 3
+ [[ true == true ]]
+ padded_index=03
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=7341
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ logfile=.local/jobs/10.0.0.1.job
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 7341)'
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 7341) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 7341)'
+ newline
+ local count=1
+ (( i = 0 ))
+ parse_configs 10.0.2.3 03
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ ip_addr=192.168.1.10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 4
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=04
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=7347
+ job_pids+=("${job_pid}")
+ parse_configs 192.168.1.10 04
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 7347)'
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 7347) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 7347)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/10.0.2.3.job
++ printf %02d 5
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=05
+ job_pid=7353
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 7353)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 7353) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 7353)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ parse_configs 192.168.1.11 05
+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.0.5
+ local ip_addr=192.168.1.11
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=06
+ job_pid=7358
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 7358)'
+ parse_configs 172.16.0.5 06
+ local ip_addr=172.16.0.5
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 7358) ]]
+ local padded_index=06
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 7358)'
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
++ printf %02d 7
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=07
+ job_pid=7365
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 7365)'
+ parse_configs 172.16.1.6 07
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 7365) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 7365)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local ip_addr=172.16.1.6
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local padded_index=07
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=172.18.1.20
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=08
+ job_pid=7371
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 7371)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 7371) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 7371)'
+ parse_configs 172.18.1.20 08
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local ip_addr=172.18.1.20
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local padded_index=08
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=10.10.10.10
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.16.1.6.job
+ [[ true == true ]]
+ [[ true == true ]]
++ printf %02d 9
+ execute+=(--classify)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=09
+ job_pid=7379
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 7379)'
+ parse_configs 10.10.10.10 09
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 7379) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 7379)'
+ local ip_addr=10.10.10.10
+ local padded_index=09
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ true == true ]]
+ [[ false == true ]]
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--verbose)
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=10
+ job_pid=7390
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 7390)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 7390) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 7390)'
+ parse_configs 192.168.100.100 10
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local ip_addr=192.168.100.100
+ echo

+ (( i++ ))
+ (( i < count ))
+ local padded_index=10
+ ((  ip_index < total_ips  ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ ip_addr=172.31.255.254
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
++ printf %02d 11
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=11
+ job_pid=7402
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 7402)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 7402) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 7402)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 7334
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7338
+ parse_configs 172.31.255.254 11
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7341
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7347
+ local ip_addr=172.31.255.254
+ valid_job_pids+=("$pid")
+ local padded_index=11
+ for pid in "${job_pids[@]}"
+ kill -0 7353
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7358
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7365
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7371
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7379
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7390
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7402
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 7334
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7338
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7341
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7347
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7353
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 7353)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 7353) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 7353)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7358
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 7358)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 7358) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 7358)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7365
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 7365)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 7365) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 7365)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7371
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 7371)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 7371) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 7371)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7379
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 7379)'
+ local status=0
+ ((  status != 0  ))
+ return 0
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 7379) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 7379)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7390
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 7402
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ local status=0
+ ((  status != 0  ))
+ return 0
+ ((  6 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 7334
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 7334)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 7334) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 7334)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7338
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 7338)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 7338) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 7338)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7341
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 7341)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 7341) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 7341)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7347
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 7347)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 7347) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 7347)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7390
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 7390)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 7390) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 7390)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 7402
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 7402)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 7402) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 7402)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 4 ]]
+ generate_csvoutput
++ mktemp
+ local tmp_csv=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zGYLMxHLmd
+ [[ ! -d reports ]]
+ find reports -type f -name '*.json' -mindepth 2 -maxdepth 2
+ sort
+ read -r json
+ message 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ local 'message=Processing reports/10.0.0.1/10.0.0.1.json'
+ print 'Processing reports/10.0.0.1/10.0.0.1.json'
+ [[ -n Processing reports/10.0.0.1/10.0.0.1.json ]]
+ echo -en 'Processing reports/10.0.0.1/10.0.0.1.json'
Processing reports/10.0.0.1/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.0.1/10.0.0.1.json
+ read -r json
+ message 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ local 'message=Processing reports/10.0.1.2/10.0.1.2.json'
+ print 'Processing reports/10.0.1.2/10.0.1.2.json'
+ [[ -n Processing reports/10.0.1.2/10.0.1.2.json ]]
+ echo -en 'Processing reports/10.0.1.2/10.0.1.2.json'
Processing reports/10.0.1.2/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.1.2/10.0.1.2.json
+ read -r json
+ message 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ local 'message=Processing reports/10.0.2.3/10.0.2.3.json'
+ print 'Processing reports/10.0.2.3/10.0.2.3.json'
+ [[ -n Processing reports/10.0.2.3/10.0.2.3.json ]]
+ echo -en 'Processing reports/10.0.2.3/10.0.2.3.json'
Processing reports/10.0.2.3/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.0.2.3/10.0.2.3.json
+ read -r json
+ message 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ local 'message=Processing reports/10.10.10.10/10.10.10.10.json'
+ print 'Processing reports/10.10.10.10/10.10.10.10.json'
+ [[ -n Processing reports/10.10.10.10/10.10.10.10.json ]]
+ echo -en 'Processing reports/10.10.10.10/10.10.10.10.json'
Processing reports/10.10.10.10/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/10.10.10.10/10.10.10.10.json
+ read -r json
+ message 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ local 'message=Processing reports/172.16.0.5/172.16.0.5.json'
+ print 'Processing reports/172.16.0.5/172.16.0.5.json'
+ [[ -n Processing reports/172.16.0.5/172.16.0.5.json ]]
+ echo -en 'Processing reports/172.16.0.5/172.16.0.5.json'
Processing reports/172.16.0.5/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.0.5/172.16.0.5.json
+ read -r json
+ message 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ local 'message=Processing reports/172.16.1.6/172.16.1.6.json'
+ print 'Processing reports/172.16.1.6/172.16.1.6.json'
+ [[ -n Processing reports/172.16.1.6/172.16.1.6.json ]]
+ echo -en 'Processing reports/172.16.1.6/172.16.1.6.json'
Processing reports/172.16.1.6/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.16.1.6/172.16.1.6.json
+ read -r json
+ message 'Processing reports/172.18.1.20/172.18.1.20.json'
+ [[ -n Processing reports/172.18.1.20/172.18.1.20.json ]]
+ local 'message=Processing reports/172.18.1.20/172.18.1.20.json'
+ print 'Processing reports/172.18.1.20/172.18.1.20.json'
+ [[ -n Processing reports/172.18.1.20/172.18.1.20.json ]]
+ echo -en 'Processing reports/172.18.1.20/172.18.1.20.json'
Processing reports/172.18.1.20/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.18.1.20/172.18.1.20.json
+ read -r json
+ message 'Processing reports/172.31.255.254/172.31.255.254.json'
+ [[ -n Processing reports/172.31.255.254/172.31.255.254.json ]]
+ local 'message=Processing reports/172.31.255.254/172.31.255.254.json'
+ print 'Processing reports/172.31.255.254/172.31.255.254.json'
+ [[ -n Processing reports/172.31.255.254/172.31.255.254.json ]]
+ echo -en 'Processing reports/172.31.255.254/172.31.255.254.json'
Processing reports/172.31.255.254/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/172.31.255.254/172.31.255.254.json
+ read -r json
+ message 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ local 'message=Processing reports/192.0.2.50/192.0.2.50.json'
+ print 'Processing reports/192.0.2.50/192.0.2.50.json'
+ [[ -n Processing reports/192.0.2.50/192.0.2.50.json ]]
+ echo -en 'Processing reports/192.0.2.50/192.0.2.50.json'
Processing reports/192.0.2.50/192.0.2.50.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.0.2.50/192.0.2.50.json
+ read -r json
+ message 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ local 'message=Processing reports/192.168.1.10/192.168.1.10.json'
+ print 'Processing reports/192.168.1.10/192.168.1.10.json'
+ [[ -n Processing reports/192.168.1.10/192.168.1.10.json ]]
+ echo -en 'Processing reports/192.168.1.10/192.168.1.10.json'
Processing reports/192.168.1.10/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.10/192.168.1.10.json
+ read -r json
+ message 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ local 'message=Processing reports/192.168.1.11/192.168.1.11.json'
+ print 'Processing reports/192.168.1.11/192.168.1.11.json'
+ [[ -n Processing reports/192.168.1.11/192.168.1.11.json ]]
+ echo -en 'Processing reports/192.168.1.11/192.168.1.11.json'
Processing reports/192.168.1.11/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.1.11/192.168.1.11.json
+ read -r json
+ message 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ local 'message=Processing reports/192.168.100.100/192.168.100.100.json'
+ print 'Processing reports/192.168.100.100/192.168.100.100.json'
+ [[ -n Processing reports/192.168.100.100/192.168.100.100.json ]]
+ echo -en 'Processing reports/192.168.100.100/192.168.100.100.json'
Processing reports/192.168.100.100/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.100.100/192.168.100.100.json
+ read -r json
+ message 'Processing reports/192.168.2.12/192.168.2.12.json'
+ [[ -n Processing reports/192.168.2.12/192.168.2.12.json ]]
+ local 'message=Processing reports/192.168.2.12/192.168.2.12.json'
+ print 'Processing reports/192.168.2.12/192.168.2.12.json'
+ [[ -n Processing reports/192.168.2.12/192.168.2.12.json ]]
+ echo -en 'Processing reports/192.168.2.12/192.168.2.12.json'
Processing reports/192.168.2.12/192.168.2.12.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/192.168.2.12/192.168.2.12.json
+ read -r json
+ message 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ local 'message=Processing reports/198.51.100.75/198.51.100.75.json'
+ print 'Processing reports/198.51.100.75/198.51.100.75.json'
+ [[ -n Processing reports/198.51.100.75/198.51.100.75.json ]]
+ echo -en 'Processing reports/198.51.100.75/198.51.100.75.json'
Processing reports/198.51.100.75/198.51.100.75.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/198.51.100.75/198.51.100.75.json
+ read -r json
+ message 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ local 'message=Processing reports/203.0.113.25/203.0.113.25.json'
+ print 'Processing reports/203.0.113.25/203.0.113.25.json'
+ [[ -n Processing reports/203.0.113.25/203.0.113.25.json ]]
+ echo -en 'Processing reports/203.0.113.25/203.0.113.25.json'
Processing reports/203.0.113.25/203.0.113.25.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq_json2csv='.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv'
+ jq -e -r '.target as $target
                    | .configs[]
                    | select( .objects != null and ( .objects | type == "array" and length > 0 ) )
                    | .objects[] as $obj
                    | [
                        $target,
                        ( .site // "none" ),
                        ( .device // "none" ),
                        ( $obj.object // "none" ),
                        ( $obj.items[0] // "none" ),
                        ( $obj.description // "none" ),
                        ( $obj.group // "none" )
                      ]
                    | @csv' reports/203.0.113.25/203.0.113.25.json
+ read -r json
+ message target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ local message=target,site,device,object,sets,description,group
+ print target,site,device,object,sets,description,group
+ [[ -n target,site,device,object,sets,description,group ]]
+ echo -en target,site,device,object,sets,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ sort -t, -k1,1 -k2,2 -k3,3 -k4,4 /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zGYLMxHLmd
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zGYLMxHLmd
+ return 0
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ message '\nCSV Report Summary (tabulated):'
+ [[ -n \nCSV Report Summary (tabulated): ]]
+ local 'message=\nCSV Report Summary (tabulated):'
+ print '\nCSV Report Summary (tabulated):'
+ [[ -n \nCSV Report Summary (tabulated): ]]
+ echo -en '\nCSV Report Summary (tabulated):'

CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ cat reports/reports.csv
target,site,device,object,sets,description,group
"10.0.0.1","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.0.1 any","none","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object","host 10.0.0.1","Core services gateway","Unclassified"
"10.0.0.1","cisco","fw1.cfg","object-group","network-object host 10.0.0.1","Internal Data Plane","Unclassified"
"10.0.0.1","cisco","fw5.cfg","object-group","network-object host 10.0.0.1","Classified subnets","Unclassified"
"10.0.0.1","cisco","fw8.cfg","object-group","network-object host 10.0.0.1","East coast internal network","Unclassified"
"10.0.0.1","misc","switch1.conf","object-group","network-object host 10.0.0.1","VLAN access layer","Unclassified"
"10.0.0.1","misc","switch3.conf","interface","ip address 10.0.0.1 255.255.255.0","none","Business-Unit-Networks"
"10.0.0.1","misc","switch3.conf","object-group","network-object host 10.0.0.1","Web access switches","Unclassified"
"10.0.1.2","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.1.2 any","none","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object","host 10.0.1.2","Application edge firewall","Unclassified"
"10.0.1.2","cisco","fw2.cfg","object-group","network-object host 10.0.1.2","Internal datacenter and backup LAN","Unclassified"
"10.0.1.2","cisco","fw4.cfg","object-group","network-object host 10.0.1.2","Internal LAN segments","Unclassified"
"10.0.1.2","cisco","fw6.cfg","object-group","network-object host 10.0.1.2","Secure base subnets","Unclassified"
"10.0.1.2","misc","switch1.conf","interface","ip address 10.0.1.2 255.255.255.0","none","Unclassified"
"10.0.1.2","misc","switch4.conf","object-group","network-object host 10.0.1.2","Multinetwork convergence","Unclassified"
"10.0.2.3","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.0.2.3 any","none","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object","host 10.0.2.3","Secure outbound concentrator","Unclassified"
"10.0.2.3","cisco","fw3.cfg","object-group","network-object host 10.0.2.3","National Core Routing Zone","Unclassified"
"10.0.2.3","cisco","fw7.cfg","object-group","network-object 10.0.2.3","Secure internal office","Unclassified"
"10.0.2.3","misc","switch2.conf","object-group","network-object host 10.0.2.3","Internal wireless layout","Unclassified"
"10.10.10.10","cisco","fw1.cfg","object-group","network-object host 10.10.10.10","Wireless guest segment","Unclassified"
"10.10.10.10","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip host 10.10.10.10 any","none","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object","host 10.10.10.10","Guest NAT","Unclassified"
"10.10.10.10","cisco","fw3.cfg","object-group","network-object host 10.10.10.10","Shield-controlled wireless network","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object","host 10.10.10.10","none","Unclassified"
"10.10.10.10","cisco","fw4.cfg","object-group","network-object host 10.10.10.10","Staff WiFi clients","Unclassified"
"10.10.10.10","cisco","fw6.cfg","object-group","network-object host 10.10.10.10","Controlled guest devices","Unclassified"
"10.10.10.10","misc","switch2.conf","interface","ip address 10.10.10.10 255.255.255.0","none","Business-Unit-Networks"
"172.16.0.5","cisco","fw3.cfg","access-list","access-list OUTSIDE extended permit ip any host 172.16.0.5","none","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object","host 172.16.0.5","Internet firewall handoff","Unclassified"
"172.16.0.5","cisco","fw3.cfg","object-group","network-object host 172.16.0.5","Internet-facing proxy systems","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object","host 172.16.0.5","none","Unclassified"
"172.16.0.5","cisco","fw8.cfg","object-group","network-object host 172.16.0.5","Guest access","Unclassified"
"172.16.0.5","misc","switch4.conf","interface","ip address 172.16.0.5 255.255.255.0","none","Unclassified"
"172.16.1.6","cisco","fw2.cfg","object-group","network-object host 172.16.1.6","Secure wireless endpoints","Unclassified"
"172.16.1.6","cisco","fw5.cfg","access-list","access-list OUTSIDE extended permit ip host 172.16.1.6 any","none","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object","host 172.16.1.6","none","Unclassified"
"172.16.1.6","cisco","fw5.cfg","object-group","network-object host 172.16.1.6","Classified subnets","Unclassified"
"172.16.1.6","misc","switch3.conf","interface","ip address 172.16.1.6 255.255.255.0","none","Business-Unit-Networks"
"172.18.1.20","cisco","fw4.cfg","object","host 172.18.1.20","Green Lantern HQ core router","Unclassified"
"172.18.1.20","cisco","fw4.cfg","object-group","network-object host 172.18.1.20","Protected but public-facing zone","Unclassified"
"172.18.1.20","misc","switch4.conf","interface","ip address 172.18.1.20 255.255.255.0","none","Business-Unit-Networks"
"172.31.255.254","cisco","fw7.cfg","object-group","network-object host 172.31.255.254","Secure internal office","Unclassified"
"172.31.255.254","misc","switch1.conf","interface","ip address 172.31.255.254 255.255.255.0","none","Business-Unit-Networks"
"192.0.2.50","cisco","fw1.cfg","object","host 192.0.2.50","Untrusted guest access","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.0.2.50","cisco","fw1.cfg","object-group","network-object host 192.0.2.50","Public access layer","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object","host 192.0.2.50","none","Unclassified"
"192.0.2.50","cisco","fw7.cfg","object-group","network-object host 192.0.2.50","Global secure relay","Unclassified"
"192.168.1.10","cisco","fw1.cfg","object-group","network-object host 192.168.1.10","Internal Data Plane","Unclassified"
"192.168.1.10","cisco","fw3.cfg","object-group","network-object host 192.168.1.10","National Core Routing Zone","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object","host 192.168.1.10","none","Unclassified"
"192.168.1.10","cisco","fw6.cfg","object-group","network-object host 192.168.1.10","Secure base subnets","Unclassified"
"192.168.1.10","misc","switch1.conf","interface","ip address 192.168.1.10 255.255.255.0","none","Unclassified"
"192.168.1.10","misc","switch4.conf","interface","ip address 192.168.1.10 255.255.255.0","none","Business-Unit-Networks"
"192.168.1.11","cisco","fw2.cfg","object-group","network-object host 192.168.1.11","Internal datacenter and backup LAN","Unclassified"
"192.168.1.11","cisco","fw4.cfg","object-group","network-object host 192.168.1.11","Protected but public-facing zone","Unclassified"
"192.168.1.11","misc","switch2.conf","interface","ip address 192.168.1.11 255.255.255.0","none","Business-Unit-Networks"
"192.168.100.100","cisco","fw1.cfg","object-group","network-object host 192.168.100.100","Wireless guest segment","Unclassified"
"192.168.100.100","cisco","fw2.cfg","object-group","network-object host 192.168.100.100","Secure wireless endpoints","Unclassified"
"192.168.100.100","cisco","fw4.cfg","object-group","network-object host 192.168.100.100","Staff WiFi clients","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object","host 192.168.100.100","none","Unclassified"
"192.168.100.100","cisco","fw7.cfg","object-group","network-object host 192.168.100.100","Young heroes WiFi","Unclassified"
"192.168.100.100","misc","switch2.conf","interface","ip address 192.168.100.100 255.255.255.0","none","Unclassified"
"192.168.2.12","cisco","fw5.cfg","object-group","network-object host 192.168.2.12","Remote site uplink","Unclassified"
"192.168.2.12","cisco","fw8.cfg","object-group","network-object 192.168.2.12","East coast internal network","Unclassified"
"198.51.100.75","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 198.51.100.75","none","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object","host 198.51.100.75","Encrypted edge gateway","Unclassified"
"198.51.100.75","cisco","fw2.cfg","object-group","network-object host 198.51.100.75","External public resources","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object","host 198.51.100.75","none","Unclassified"
"198.51.100.75","cisco","fw5.cfg","object-group","network-object host 198.51.100.75","Remote site uplink","Unclassified"
"203.0.113.25","cisco","fw1.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","none","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object","host 203.0.113.25","Internet-bound IP NAT","Unclassified"
"203.0.113.25","cisco","fw1.cfg","object-group","network-object host 203.0.113.25","Public access layer","Unclassified"
"203.0.113.25","cisco","fw2.cfg","access-list","access-list OUTSIDE extended permit ip any host 203.0.113.25","none","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object","host 203.0.113.25","Unfiltered outbound NAT IP","Unclassified"
"203.0.113.25","cisco","fw2.cfg","object-group","network-object host 203.0.113.25","External public resources","Unclassified"
"203.0.113.25","cisco","fw3.cfg","object-group","network-object host 203.0.113.25","Internet-facing proxy systems","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object","host 203.0.113.25","none","Unclassified"
"203.0.113.25","cisco","fw6.cfg","object-group","network-object host 203.0.113.25","WAN-facing systems","Unclassified"
"203.0.113.25","cisco","fw8.cfg","object","host 203.0.113.25","none","Unclassified"
+ local elapsed=12
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '[INFO] Started at: %s\n' '2025-05-17 18:16:52'
[INFO] Started at: 2025-05-17 18:16:52
+ printf '[INFO] Total runtime: %02d:%02d:%02d\n' 0 0 12
[INFO] Total runtime: 00:00:12
+ return 0
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6 ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.EoxCniIpV6

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzUzMTAyMzMwNzY5MTAwMAo
++ divisor=MTc0NzUzMTAyMzMwNzY5MTAwMAo
+ source ./scripts/tools-configs.shell
++ [[ -n '' ]]
++ readonly __TOOLS_EXTRACTION_SOURCED=1
++ __TOOLS_EXTRACTION_SOURCED=1
++ alias extract-configs=extract_configs
++ alias process-configs=process_configs
+ alias parse-configs=main
+ matched_blocks_byfile=()
+ declare -gA matched_blocks_byfile
+ export script_name=./scripts/parse-configs.shell
+ script_name=./scripts/parse-configs.shell
+ [[ 9 -ge 1 ]]
+ [[ --configs=configs =~ ^-*(h|help)$ ]]
+ main --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ file_extensions=()
+ declare -a file_extensions
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --configs=configs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ configs =~ ^(classify|g)$ ]]
+ [[ configs =~ ^(file-ext|x)$ ]]
+ [[ configs =~ ^(configs|c)$ ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ [[ configs =~ ^(index|n)$ ]]
+ [[ configs =~ ^(ip-addr|i)$ ]]
+ [[ configs =~ ^(logs|o)$ ]]
+ [[ configs =~ ^(matrix|m)$ ]]
+ [[ configs =~ ^(reports|r)$ ]]
+ [[ configs =~ ^(validate|v)$ ]]
+ [[ configs == \h\e\l\p ]]
+ [[ configs == \d\e\b\u\g ]]
+ [[ configs == \d\r\y\-\r\u\n ]]
+ [[ configs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ip-addr=10.0.0.1
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ip-addr =~ ^(classify|g)$ ]]
+ [[ ip-addr =~ ^(file-ext|x)$ ]]
+ [[ ip-addr =~ ^(configs|c)$ ]]
+ [[ ip-addr =~ ^(index|n)$ ]]
+ [[ ip-addr =~ ^(ip-addr|i)$ ]]
+ local target_address=10.0.0.1
+ [[ ip-addr =~ ^(logs|o)$ ]]
+ [[ ip-addr =~ ^(matrix|m)$ ]]
+ [[ ip-addr =~ ^(reports|r)$ ]]
+ [[ ip-addr =~ ^(validate|v)$ ]]
+ [[ ip-addr == \h\e\l\p ]]
+ [[ ip-addr == \d\e\b\u\g ]]
+ [[ ip-addr == \d\r\y\-\r\u\n ]]
+ [[ ip-addr == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --index=01
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ index =~ ^(classify|g)$ ]]
+ [[ index =~ ^(file-ext|x)$ ]]
+ [[ index =~ ^(configs|c)$ ]]
+ [[ index =~ ^(index|n)$ ]]
+ local target_index=01
+ [[ index =~ ^(ip-addr|i)$ ]]
+ [[ index =~ ^(logs|o)$ ]]
+ [[ index =~ ^(matrix|m)$ ]]
+ [[ index =~ ^(reports|r)$ ]]
+ [[ index =~ ^(validate|v)$ ]]
+ [[ index == \h\e\l\p ]]
+ [[ index == \d\e\b\u\g ]]
+ [[ index == \d\r\y\-\r\u\n ]]
+ [[ index == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --matrix=matrix.json
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ matrix =~ ^(classify|g)$ ]]
+ [[ matrix =~ ^(file-ext|x)$ ]]
+ [[ matrix =~ ^(configs|c)$ ]]
+ [[ matrix =~ ^(index|n)$ ]]
+ [[ matrix =~ ^(ip-addr|i)$ ]]
+ [[ matrix =~ ^(logs|o)$ ]]
+ [[ matrix =~ ^(matrix|m)$ ]]
+ local matrix_filename=matrix.json
+ [[ matrix =~ ^(reports|r)$ ]]
+ [[ matrix =~ ^(validate|v)$ ]]
+ [[ matrix == \h\e\l\p ]]
+ [[ matrix == \d\e\b\u\g ]]
+ [[ matrix == \d\r\y\-\r\u\n ]]
+ [[ matrix == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --reports=reports
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ reports =~ ^(classify|g)$ ]]
+ [[ reports =~ ^(file-ext|x)$ ]]
+ [[ reports =~ ^(configs|c)$ ]]
+ [[ reports =~ ^(index|n)$ ]]
+ [[ reports =~ ^(ip-addr|i)$ ]]
+ [[ reports =~ ^(logs|o)$ ]]
+ [[ reports =~ ^(matrix|m)$ ]]
+ [[ reports =~ ^(reports|r)$ ]]
+ local reports_folder=reports
+ [[ reports =~ ^(validate|v)$ ]]
+ [[ reports == \h\e\l\p ]]
+ [[ reports == \d\e\b\u\g ]]
+ [[ reports == \d\r\y\-\r\u\n ]]
+ [[ reports == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --file-ext=cfg,conf,cnf
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ file-ext =~ ^(classify|g)$ ]]
+ [[ file-ext =~ ^(file-ext|x)$ ]]
+ file_extensions+=($(print "${value}" | tr ':,;\n ' '\n'))
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ tr ':,;\n ' '\n'
++ echo -en cfg,conf,cnf
+ [[ file-ext =~ ^(configs|c)$ ]]
+ [[ file-ext =~ ^(index|n)$ ]]
+ [[ file-ext =~ ^(ip-addr|i)$ ]]
+ [[ file-ext =~ ^(logs|o)$ ]]
+ [[ file-ext =~ ^(matrix|m)$ ]]
+ [[ file-ext =~ ^(reports|r)$ ]]
+ [[ file-ext =~ ^(validate|v)$ ]]
+ [[ file-ext == \h\e\l\p ]]
+ [[ file-ext == \d\e\b\u\g ]]
+ [[ file-ext == \d\r\y\-\r\u\n ]]
+ [[ file-ext == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ export classify_targets=true
+ classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(index|n)$ ]]
+ [[ classify =~ ^(ip-addr|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(index|n)$ ]]
+ [[ verbose =~ ^(ip-addr|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(index|n)$ ]]
+ [[ debug =~ ^(ip-addr|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ export debug=true
+ debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z x ]]
+ [[ 3 -eq 0 ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ source_configs=()
+ declare -ga source_configs
+ local target_configlist_json=targets/10.0.0.1.json
+ [[ ! -f targets/10.0.0.1.json ]]
+ mapfile -t source_configs
++ jq -r '.configs[] | "\( .config.site )/\( .config.device )"' targets/10.0.0.1.json
+ for i in "${!source_configs[@]}"
+ [[ misc/switch1.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch1.conf
+ for i in "${!source_configs[@]}"
+ [[ misc/switch3.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch3.conf
+ [[ true == true ]]
+ print 'Config JSON file used: targets/10.0.0.1.json'
+ [[ -n Config JSON file used: targets/10.0.0.1.json ]]
+ echo -en 'Config JSON file used: targets/10.0.0.1.json'
Config JSON file used: targets/10.0.0.1.json+ print 'Extracted config paths from JSON:'
+ [[ -n Extracted config paths from JSON: ]]
+ echo -en 'Extracted config paths from JSON:'
Extracted config paths from JSON:+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch1.conf'
+ [[ -n  - configs/misc/switch1.conf ]]
+ echo -en ' - configs/misc/switch1.conf'
 - configs/misc/switch1.conf+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch3.conf'
+ [[ -n  - configs/misc/switch3.conf ]]
+ echo -en ' - configs/misc/switch3.conf'
 - configs/misc/switch3.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ [[ -z 01 ]]
+ [[ -z false ]]
+ [[ -z 10.0.0.1 ]]
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ sed -E 's/[[:space:]]+//g'
++ tr -d '\r'
+ target_address=10.0.0.1
+ [[ false == true ]]
+ export tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch1.conf 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ local config_file=configs/misc/switch1.conf
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ [[ ! -f configs/misc/switch1.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch1.conf ]]
++ stat -c%s configs/misc/switch1.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch1.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzUzMTAyMzMwNzY5MTAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzUzMTAyMzMwNzY5MTAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ local 'message=Loaded 4 config blocks'
+ print 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ echo -en 'Loaded 4 config blocks'
Loaded 4 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS=' 	
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.31.255.254 255.255.255.0' 'interface Vlan10MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.1.2 255.255.255.0' 'interface Vlan20MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 192.168.1.10 255.255.255.0' 'object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo')
+ declare -a matched_objects
+ IFS=' 	
'
+ [[ true == true ]]
+ message 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ local 'message=Loaded 1 config blocks'
+ print 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ echo -en 'Loaded 1 config blocks'
Loaded 1 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ local 'message=Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ print 'Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ echo -en 'Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
Serialized Line: object-group network Avengers-OfficeMTc0NzUzMTAyMzMwNzY5MTAwMAo description VLAN access layerMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzMTAyMzMwNzY5MTAwMAo/\n/g'
+ restored_block='object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cfg_path=configs/misc/switch1.conf
+ local rel_path=misc/switch1.conf
+ local site=misc
+ local device_filename=switch1.conf
+ local extension=conf
+ local objects_dir=reports/10.0.0.1/misc
+ local objects_file=reports/10.0.0.1/misc/switch1.conf
+ mkdir -p reports/10.0.0.1/misc
+ message 'object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '!'
+ [[ -n ! ]]
+ local 'message=!'
+ print '!'
+ [[ -n ! ]]
+ echo -en '!'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Restored Configuration:
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch1.conf 'object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch1.conf
+ local 'restored_block=object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -z object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
[process_configs] Raw Block:
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Avengers-Office'
+ [[ -z object-group network Avengers-Office ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ wc -l
+ ((         4 > 1  ))
++ sed -E 's/^[^[:space:]]+[[:space:]]+//'
+ type_value='network Avengers-Office'
+ [[ -z network Avengers-Office ]]
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Avengers-Office'
+ [[ -n [process_configs] type     : network Avengers-Office ]]
+ echo -en '[process_configs] type     : network Avengers-Office'
[process_configs] type     : network Avengers-Office+ data_sets=()
+ local -a data_sets
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=object-group network Avengers-Office'
+ [[ -z object-group network Avengers-Office ]]
+ [[ object-group network avengers-office =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=description VLAN access layer'
+ [[ -z description VLAN access layer ]]
+ [[ description vlan access layer =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object 192.168.12.0 255.255.255.0'
+ [[ -z network-object 192.168.12.0 255.255.255.0 ]]
+ [[ network-object 192.168.12.0 255.255.255.0 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  3 > 1  ))
+ data_sets=("${data_sets[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ local 'message=[process_configs] Object Sets:'
+ print '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ echo -en '[process_configs] Object Sets:'
[process_configs] Object Sets:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${data_sets[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${data_sets[@]}"
+ print '  - network-object 192.168.12.0 255.255.255.0'
+ [[ -n   - network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '  - network-object 192.168.12.0 255.255.255.0'
  - network-object 192.168.12.0 255.255.255.0++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'matched_line=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matched_items=()
+ local -a matched_items
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_items+=("$(sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' <<< "${line}")")
++ sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
++ printf '%s\n' 'network-object host 10.0.0.1'
++ jq -R .
++ jq -s .
+ local 'matched_items_json=[
  "network-object host 10.0.0.1"
]'
++ grep -i '^[[:space:]]*description'
++ head -n 1
++ sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
+ local 'desc_val=VLAN access layer'
+ [[ -z VLAN access layer ]]
+ [[ VLAN access layer =~ 
 ]]
+ [[ true == true ]]
+ message '[process_configs] Description: VLAN access layer'
+ [[ -n [process_configs] Description: VLAN access layer ]]
+ local 'message=[process_configs] Description: VLAN access layer'
+ print '[process_configs] Description: VLAN access layer'
+ [[ -n [process_configs] Description: VLAN access layer ]]
+ echo -en '[process_configs] Description: VLAN access layer'
[process_configs] Description: VLAN access layer+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Avengers-Office
++ jq -r --arg key Avengers-Office 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc 'VLAN access layer' 'map( select( .match[]? == $desc ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object 192.168.12.0 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'items_2json=[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]'
+ declare -A sets_map
+ for line in "${data_sets[@]}"
+ [[ -n network-object host 10.0.0.1 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z '' ]]
+ sets_map["$key"]=1
+ for line in "${data_sets[@]}"
+ [[ -n network-object 192.168.12.0 255.255.255.0 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z x ]]
+ ((  sets_map[network-object]++  ))
++ for k in "${!sets_map[@]}"
++ printf '{ "key": "%s", "val": %d }\n' network-object 2
++ jq -s 'map({(.key): .val}) | add'
+ local 'sets_json={
  "network-object": 2
}'
++ jq -n --arg object object-group --arg type 'network Avengers-Office' --arg description 'VLAN access layer' --argjson items '[
  "network-object host 10.0.0.1"
]' --argjson sets '{
  "network-object": 2
}' --arg group Unclassified '{
          object: $object,
          type: ( $type | select( . != "" and . != "null" and . != "false" ) // false ),
          description: ( $description | select( . != "" and . != "null" and . != "false" ) // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
+ target_object='{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ jq .
+ echo -en '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "VLAN access layer",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
++ jq -s --arg site configs/misc --arg device switch1.conf '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n {
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Avengers-Office",
      "description": "VLAN access layer",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ return 0
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch3.conf 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ local config_file=configs/misc/switch3.conf
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
+ [[ ! -f configs/misc/switch3.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch3.conf ]]
++ stat -c%s configs/misc/switch3.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch3.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch3.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch3.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzUzMTAyMzMwNzY5MTAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
Serialized Objects: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAointerface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAoobject-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzUzMTAyMzMwNzY5MTAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0
interface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0
object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0
interface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0
object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ local 'message=Loaded 3 config blocks'
+ print 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ echo -en 'Loaded 3 config blocks'
Loaded 3 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS=' 	
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0' 'interface Vlan2MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 172.16.1.6 255.255.255.0' 'object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0' 'object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo')
+ declare -a matched_objects
+ IFS=' 	
'
+ [[ true == true ]]
+ message 'Loaded 2 config blocks'
+ [[ -n Loaded 2 config blocks ]]
+ local 'message=Loaded 2 config blocks'
+ print 'Loaded 2 config blocks'
+ [[ -n Loaded 2 config blocks ]]
+ echo -en 'Loaded 2 config blocks'
Loaded 2 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0'
+ print 'Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en 'Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0'
Serialized Line: interface Vlan1MTc0NzUzMTAyMzMwNzY5MTAwMAo ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzMTAyMzMwNzY5MTAwMAo/\n/g'
+ restored_block='interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ local cfg_path=configs/misc/switch3.conf
+ local rel_path=misc/switch3.conf
+ local site=misc
+ local device_filename=switch3.conf
+ local extension=conf
+ local objects_dir=reports/10.0.0.1/misc
+ local objects_file=reports/10.0.0.1/misc/switch3.conf
+ mkdir -p reports/10.0.0.1/misc
+ message 'interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n interface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ print 'interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n interface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en 'interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '!'
+ [[ -n ! ]]
+ local 'message=!'
+ print '!'
+ [[ -n ! ]]
+ echo -en '!'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ message 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ print 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
Restored Configuration:
interface Vlan1
 ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch3.conf 'interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch3.conf
+ local 'restored_block=interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -z interface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ print '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
[process_configs] Raw Block:
interface Vlan1
 ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=interface
++ wc -l
+ ((         2 > 1  ))
++ sed -E 's/^[^[:space:]]+[[:space:]]+//'
+ type_value=Vlan1
+ [[ -z Vlan1 ]]
+ [[ true == true ]]
+ print '[process_configs] object   : interface'
+ [[ -n [process_configs] object   : interface ]]
+ echo -en '[process_configs] object   : interface'
[process_configs] object   : interface+ print '[process_configs] type     : Vlan1'
+ [[ -n [process_configs] type     : Vlan1 ]]
+ echo -en '[process_configs] type     : Vlan1'
[process_configs] type     : Vlan1+ data_sets=()
+ local -a data_sets
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ [[ interface vlan1 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=ip address 10.0.0.1 255.255.255.0'
+ [[ -z ip address 10.0.0.1 255.255.255.0 ]]
+ [[ ip address 10.0.0.1 255.255.255.0 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  2 > 1  ))
+ data_sets=("${data_sets[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ local 'message=[process_configs] Object Sets:'
+ print '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ echo -en '[process_configs] Object Sets:'
[process_configs] Object Sets:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${data_sets[@]}"
+ print '  - ip address 10.0.0.1 255.255.255.0'
+ [[ -n   - ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '  - ip address 10.0.0.1 255.255.255.0'
  - ip address 10.0.0.1 255.255.255.0++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'matched_line=ip address 10.0.0.1 255.255.255.0'
+ [[ -z ip address 10.0.0.1 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ print '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
[process_configs] Matched: ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matched_items=()
+ local -a matched_items
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_items+=("$(sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' <<< "${line}")")
++ sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//'
+ IFS=
+ read -r line
++ printf '%s\n' 'ip address 10.0.0.1 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'matched_items_json=[
  "ip address 10.0.0.1 255.255.255.0"
]'
++ grep -i '^[[:space:]]*description'
++ head -n 1
++ sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
+ local desc_val=
+ [[ -z '' ]]
+ desc_val=false
+ [[ false =~ 
 ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Vlan1
++ jq -r --arg key Vlan1 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=Business-Unit-Networks
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ true == true ]]
+ message '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ local 'message=[process_configs] Group: Business-Unit-Networks'
+ print '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ echo -en '[process_configs] Group: Business-Unit-Networks'
[process_configs] Group: Business-Unit-Networks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'ip address 10.0.0.1 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'items_2json=[
  "ip address 10.0.0.1 255.255.255.0"
]'
+ declare -A sets_map
+ for line in "${data_sets[@]}"
+ [[ -n ip address 10.0.0.1 255.255.255.0 ]]
++ awk '{print $1}'
+ key=ip
+ [[ -n ip ]]
+ [[ -z '' ]]
+ sets_map["$key"]=1
++ for k in "${!sets_map[@]}"
++ printf '{ "key": "%s", "val": %d }\n' ip 1
++ jq -s 'map({(.key): .val}) | add'
+ local 'sets_json={
  "ip": 1
}'
++ jq -n --arg object interface --arg type Vlan1 --arg description false --argjson items '[
  "ip address 10.0.0.1 255.255.255.0"
]' --argjson sets '{
  "ip": 1
}' --arg group Business-Unit-Networks '{
          object: $object,
          type: ( $type | select( . != "" and . != "null" and . != "false" ) // false ),
          description: ( $description | select( . != "" and . != "null" and . != "false" ) // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
+ target_object='{
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
+ [[ -n {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
} ]]
+ jq .
+ echo -en '{
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
{
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
+ print '|-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
|-----> Target Objects: {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
} ]]
++ printf '%s\n' '{
  "object": "interface",
  "type": "Vlan1",
  "description": false,
  "items": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "sets": {
    "ip": 1
  },
  "group": "Business-Unit-Networks"
}'
++ jq -s --arg site configs/misc --arg device switch3.conf '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n {
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ echo -en '{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "interface",
      "type": "Vlan1",
      "description": false,
      "items": [
        "ip address 10.0.0.1 255.255.255.0"
      ],
      "sets": {
        "ip": 1
      },
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ local 'message=Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ print 'Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
+ [[ -n Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo ]]
+ echo -en 'Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo'
Serialized Line: object-group network Spider-NetMTc0NzUzMTAyMzMwNzY5MTAwMAo description Web access switchesMTc0NzUzMTAyMzMwNzY5MTAwMAo network-object host 10.0.0.1MTc0NzUzMTAyMzMwNzY5MTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzUzMTAyMzMwNzY5MTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzUzMTAyMzMwNzY5MTAwMAo/\n/g'
+ restored_block='object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cfg_path=configs/misc/switch3.conf
+ local rel_path=misc/switch3.conf
+ local site=misc
+ local device_filename=switch3.conf
+ local extension=conf
+ local objects_dir=reports/10.0.0.1/misc
+ local objects_file=reports/10.0.0.1/misc/switch3.conf
+ mkdir -p reports/10.0.0.1/misc
+ message 'object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '!'
+ [[ -n ! ]]
+ local 'message=!'
+ print '!'
+ [[ -n ! ]]
+ echo -en '!'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Restored Configuration:
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch3.conf 'object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch3.conf
+ local 'restored_block=object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -z object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
[process_configs] Raw Block:
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Spider-Net'
+ [[ -z object-group network Spider-Net ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ wc -l
+ ((         4 > 1  ))
++ sed -E 's/^[^[:space:]]+[[:space:]]+//'
+ type_value='network Spider-Net'
+ [[ -z network Spider-Net ]]
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Spider-Net'
+ [[ -n [process_configs] type     : network Spider-Net ]]
+ echo -en '[process_configs] type     : network Spider-Net'
[process_configs] type     : network Spider-Net+ data_sets=()
+ local -a data_sets
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=object-group network Spider-Net'
+ [[ -z object-group network Spider-Net ]]
+ [[ object-group network spider-net =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=description Web access switches'
+ [[ -z description Web access switches ]]
+ [[ description web access switches =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'trimmed=network-object 192.168.12.0 255.255.255.0'
+ [[ -z network-object 192.168.12.0 255.255.255.0 ]]
+ [[ network-object 192.168.12.0 255.255.255.0 =~ ^description[[:space:]] ]]
+ data_sets+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  3 > 1  ))
+ data_sets=("${data_sets[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ local 'message=[process_configs] Object Sets:'
+ print '[process_configs] Object Sets:'
+ [[ -n [process_configs] Object Sets: ]]
+ echo -en '[process_configs] Object Sets:'
[process_configs] Object Sets:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${data_sets[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${data_sets[@]}"
+ print '  - network-object 192.168.12.0 255.255.255.0'
+ [[ -n   - network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '  - network-object 192.168.12.0 255.255.255.0'
  - network-object 192.168.12.0 255.255.255.0++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ local 'matched_line=network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ matched_items=()
+ local -a matched_items
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_items+=("$(sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' <<< "${line}")")
++ sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//'
+ IFS=
+ read -r line
+ grep -Eq '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ IFS=
+ read -r line
++ printf '%s\n' 'network-object host 10.0.0.1'
++ jq -R .
++ jq -s .
+ local 'matched_items_json=[
  "network-object host 10.0.0.1"
]'
++ grep -i '^[[:space:]]*description'
++ head -n 1
++ sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
+ local 'desc_val=Web access switches'
+ [[ -z Web access switches ]]
+ [[ Web access switches =~ 
 ]]
+ [[ true == true ]]
+ message '[process_configs] Description: Web access switches'
+ [[ -n [process_configs] Description: Web access switches ]]
+ local 'message=[process_configs] Description: Web access switches'
+ print '[process_configs] Description: Web access switches'
+ [[ -n [process_configs] Description: Web access switches ]]
+ echo -en '[process_configs] Description: Web access switches'
[process_configs] Description: Web access switches+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Spider-Net
++ jq -r --arg key Spider-Net 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc 'Web access switches' 'map( select( .match[]? == $desc ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object 192.168.12.0 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'items_2json=[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]'
+ declare -A sets_map
+ for line in "${data_sets[@]}"
+ [[ -n network-object host 10.0.0.1 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z '' ]]
+ sets_map["$key"]=1
+ for line in "${data_sets[@]}"
+ [[ -n network-object 192.168.12.0 255.255.255.0 ]]
++ awk '{print $1}'
+ key=network-object
+ [[ -n network-object ]]
+ [[ -z x ]]
+ ((  sets_map[network-object]++  ))
++ for k in "${!sets_map[@]}"
++ printf '{ "key": "%s", "val": %d }\n' network-object 2
++ jq -s 'map({(.key): .val}) | add'
+ local 'sets_json={
  "network-object": 2
}'
++ jq -n --arg object object-group --arg type 'network Spider-Net' --arg description 'Web access switches' --argjson items '[
  "network-object host 10.0.0.1"
]' --argjson sets '{
  "network-object": 2
}' --arg group Unclassified '{
          object: $object,
          type: ( $type | select( . != "" and . != "null" and . != "false" ) // false ),
          description: ( $description | select( . != "" and . != "null" and . != "false" ) // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
+ target_object='{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ jq .
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "Web access switches",
  "items": [
    "network-object host 10.0.0.1"
  ],
  "sets": {
    "network-object": 2
  },
  "group": "Unclassified"
}'
++ jq -s --arg site configs/misc --arg device switch3.conf '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n {
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '{
  "site": "misc",
  "device": "switch3.conf",
  "objects": [
    {
      "object": "object-group",
      "type": "network Spider-Net",
      "description": "Web access switches",
      "items": [
        "network-object host 10.0.0.1"
      ],
      "sets": {
        "network-object": 2
      },
      "group": "Unclassified"
    }
  ]
}'
+ return 0
+ mkdir -p /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/10.0.0.1
+ export json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/10.0.0.1/10.0.0.1--MTc0NzUzMTAy.json
+ json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/10.0.0.1/10.0.0.1--MTc0NzUzMTAy.json
+ [[ -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json ]]
+ jq -s --arg target 10.0.0.1 '{ target: $target, configs: . }' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/fragments.json
++ mktemp
+ tmp_merged=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.0rF3fiH3Nl
+ local final_outfile=reports/10.0.0.1/10.0.0.1.json
++ dirname reports/10.0.0.1/10.0.0.1.json
+ mkdir -p reports/10.0.0.1
+ local 'jq_merge_expr={
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .sets | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }'
+ [[ -f reports/10.0.0.1/10.0.0.1.json ]]
+ jq -s '{
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .sets | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }' reports/10.0.0.1/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/10.0.0.1/10.0.0.1--MTc0NzUzMTAy.json
+ mv /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.0rF3fiH3Nl reports/10.0.0.1/10.0.0.1.json
+ rm -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8/10.0.0.1/10.0.0.1--MTc0NzUzMTAy.json
+ return 0
+ unset verbose debug
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8 ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.zsZRDMHrE8

{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 2
    }
  ]
}

{
  "target": "10.0.0.1",
  "configs": [
    {
      "site": "cisco",
      "device": "fw1.cfg",
      "objects": [
        {
          "object": "access-list",
          "type": false,
          "description": false,
          "items": [
            "access-list OUTSIDE extended permit ip host 10.0.0.1 any"
          ],
          "sets": {
            "access-list": 1
          },
          "group": "Unclassified"
        },
        {
          "object": "object-group",
          "type": "network Stark-Core",
          "description": "Internal Data Plane",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 3
          },
          "group": "Unclassified"
        },
        {
          "object": "object",
          "type": "network Stark-Tower",
          "description": "Core services gateway",
          "items": [
            "host 10.0.0.1"
          ],
          "sets": {
            "host": 1
          },
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "cisco",
      "device": "fw5.cfg",
      "objects": [
        {
          "object": "object-group",
          "type": "network RedRoom-Core",
          "description": "Classified subnets",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 2
          },
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "cisco",
      "device": "fw8.cfg",
      "objects": [
        {
          "object": "object-group",
          "type": "network Hellfire-Internal",
          "description": "East coast internal network",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 2
          },
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "misc",
      "device": "switch1.conf",
      "objects": [
        {
          "object": "object-group",
          "type": "network Avengers-Office",
          "description": "VLAN access layer",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 2
          },
          "group": "Unclassified"
        }
      ]
    },
    {
      "site": "misc",
      "device": "switch3.conf",
      "objects": [
        {
          "object": "interface",
          "type": "Vlan1",
          "description": false,
          "items": [
            "ip address 10.0.0.1 255.255.255.0"
          ],
          "sets": {
            "ip": 1
          },
          "group": "Business-Unit-Networks"
        },
        {
          "object": "object-group",
          "type": "network Spider-Net",
          "description": "Web access switches",
          "items": [
            "network-object host 10.0.0.1"
          ],
          "sets": {
            "network-object": 2
          },
          "group": "Unclassified"
        }
      ]
    }
  ]
}

devops: network-resources (master *$=) $ 
