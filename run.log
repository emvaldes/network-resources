$ date && echo ;
$ rm -rf ./reports ./targets ./.cache ./.local && echo ;
$ bash -x ./scripts/parse-listings.shell --verbose --debug --classify --logs --sites='misc' && echo ;
$ cat .local/jobs/10.0.0.1.job && echo ;
$ jq -r . ./targets/10.0.0.1.json && echo ;
$ jq -r . ./reports/json/10.0.0.1.json 2>/dev/null ;

Wed May 14 18:26:04 MST 2025

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzI3MjM2NDgzNzQzNzAwMAo
++ divisor=MTc0NzI3MjM2NDgzNzQzNzAwMAo
+ source ./scripts/tools-listings.shell
++ [[ -n '' ]]
++ readonly __TOOLS_LISTINGS_SOURCED=1
++ __TOOLS_LISTINGS_SOURCED=1
++ alias generate-configslist=generate_configslist
++ alias generate-csvoutput=generate_csvoutput
++ alias manage-configs=manage_configs
++ alias matching-configs=matching_configs
++ alias parse-configs=parse_configs
+ alias parse-listings=main
+ export script_name=./scripts/parse-listings.shell
+ script_name=./scripts/parse-listings.shell
+ file_extensions=()
+ declare -a file_extensions
+ filtered_target_listing=()
+ declare -a filtered_target_listing
+ [[ 5 -ge 1 ]]
+ [[ --verbose =~ ^-*(h|help)$ ]]
+ main --verbose --debug --classify --logs '--sites=cisco something,misc'
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(interval|l)$ ]]
+ [[ verbose =~ ^(ips-list|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(jobs|j)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(sites|s)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ local verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(interval|l)$ ]]
+ [[ debug =~ ^(ips-list|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(jobs|j)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(sites|s)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ local debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ local classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(interval|l)$ ]]
+ [[ classify =~ ^(ips-list|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(jobs|j)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(sites|s)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --logs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ logs =~ ^(classify|g)$ ]]
+ [[ logs =~ ^(file-ext|x)$ ]]
+ [[ logs =~ ^(configs|c)$ ]]
+ [[ logs =~ ^(interval|l)$ ]]
+ [[ logs =~ ^(ips-list|i)$ ]]
+ [[ logs =~ ^(logs|o)$ ]]
+ export enable_logging=true
+ enable_logging=true
+ [[ logs =~ ^(jobs|j)$ ]]
+ [[ logs =~ ^(matrix|m)$ ]]
+ [[ logs =~ ^(reports|r)$ ]]
+ [[ logs =~ ^(sites|s)$ ]]
+ [[ logs =~ ^(validate|v)$ ]]
+ [[ logs == \h\e\l\p ]]
+ [[ logs == \d\e\b\u\g ]]
+ [[ logs == \d\r\y\-\r\u\n ]]
+ [[ logs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e '--sites=cisco something,misc'
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ sites =~ ^(classify|g)$ ]]
+ [[ sites =~ ^(file-ext|x)$ ]]
+ [[ sites =~ ^(configs|c)$ ]]
+ [[ sites =~ ^(interval|l)$ ]]
+ [[ sites =~ ^(ips-list|i)$ ]]
+ [[ sites =~ ^(logs|o)$ ]]
+ [[ sites =~ ^(jobs|j)$ ]]
+ [[ sites =~ ^(matrix|m)$ ]]
+ [[ sites =~ ^(reports|r)$ ]]
+ [[ sites =~ ^(sites|s)$ ]]
+ export 'target_sites=cisco something,misc'
+ target_sites='cisco something,misc'
+ [[ sites =~ ^(validate|v)$ ]]
+ [[ sites == \h\e\l\p ]]
+ [[ sites == \d\e\b\u\g ]]
+ [[ sites == \d\r\y\-\r\u\n ]]
+ [[ sites == \v\e\r\b\o\s\e ]]
+ IFS='
'
+ [[ -z '' ]]
+ delaying_factor=0.05
+ [[ -z '' ]]
+ listing_filename=ips.list
+ [[ -z '' ]]
+ parallel_threads=100
+ [[ -z cisco something,misc ]]
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
++ date '+%Y-%m-%d %H:%M:%S'
+ local 'start_time=2025-05-14 18:26:04'
+ SECONDS=0
+ [[ -z true ]]
+ [[ -z '' ]]
+ file_extensions=(cfg conf cnf)
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ local configs_list_cache=.cache/configs.list
+ mkdir -p .cache
+ [[ ! -f .cache/configs.list ]]
+ find_cmd=('find' 'configs' '-type' 'f' '(')
+ local -a find_cmd
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ for ext in "${file_extensions[@]}"
+ find_cmd+=(-iname "*.${ext}" -o)
+ unset 'find_cmd[-1]'
+ find_cmd+=(\))
+ find configs -type f '(' -iname '*.cfg' -o -iname '*.conf' -o -iname '*.cnf' ')'
+ sort
+ [[ true == true ]]
+ message 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ local 'message=Generated configs.list at .cache/configs.list'
+ print 'Generated configs.list at .cache/configs.list'
+ [[ -n Generated configs.list at .cache/configs.list ]]
+ echo -en 'Generated configs.list at .cache/configs.list'
Generated configs.list at .cache/configs.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n cisco something,misc ]]
+ [[ cisco something,misc != \f\a\l\s\e ]]
+ oIFS='
'
+ IFS=,
+ read -r -a site_filters
+ IFS='
'
+ filtered_configs=()
+ declare -a filtered_configs
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder='cisco something'
+ for site in "${site_filters[@]}"
+ [[ cisco something == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
++ sed -E 's|^configs/||'
++ sed -E 's|/.*||'
+ site_folder=misc
+ for site in "${site_filters[@]}"
+ [[ misc == \c\i\s\c\o\ \s\o\m\e\t\h\i\n\g ]]
+ for site in "${site_filters[@]}"
+ [[ misc == \m\i\s\c ]]
+ filtered_configs+=("${path}")
+ break
+ IFS=
+ read -r path
+ [[ 12 -eq 0 ]]
+ printf '%s\n' 'configs/cisco something/fw1.cfg' 'configs/cisco something/fw2.cfg' 'configs/cisco something/fw3.cfg' 'configs/cisco something/fw4.cfg' 'configs/cisco something/fw5.cfg' 'configs/cisco something/fw6.cfg' 'configs/cisco something/fw7.cfg' 'configs/cisco something/fw8.cfg' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ [[ true == true ]]
+ message '[FILTER] Applied --sites=cisco something,misc'
+ [[ -n [FILTER] Applied --sites=cisco something,misc ]]
+ local 'message=[FILTER] Applied --sites=cisco something,misc'
+ print '[FILTER] Applied --sites=cisco something,misc'
+ [[ -n [FILTER] Applied --sites=cisco something,misc ]]
+ echo -en '[FILTER] Applied --sites=cisco something,misc'
[FILTER] Applied --sites=cisco something,misc+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ wc -l
++ awk '{print $1}'
+ message '[FILTER] Filtered configs.list now contains: 12 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 12 entries ]]
+ local 'message=[FILTER] Filtered configs.list now contains: 12 entries'
+ print '[FILTER] Filtered configs.list now contains: 12 entries'
+ [[ -n [FILTER] Filtered configs.list now contains: 12 entries ]]
+ echo -en '[FILTER] Filtered configs.list now contains: 12 entries'
[FILTER] Filtered configs.list now contains: 12 entries+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file .cache/configs.list
+ [[ -n .cache/configs.list ]]
+ local target_file=.cache/configs.list
+ [[ true == true ]]
+ [[ -f .cache/configs.list ]]
+ case "${target_file}" in
+ cat .cache/configs.list
configs/cisco something/fw1.cfg
configs/cisco something/fw2.cfg
configs/cisco something/fw3.cfg
configs/cisco something/fw4.cfg
configs/cisco something/fw5.cfg
configs/cisco something/fw6.cfg
configs/cisco something/fw7.cfg
configs/cisco something/fw8.cfg
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -z '' ]]
+ export matrix_filename=matrix.json
+ matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports
+ :
+ [[ -z '' ]]
+ export validate_address=false
+ validate_address=false
+ [[ -z ips.list ]]
+ target_listing_raw=()
+ declare -a target_listing_raw
+ [[ -f ips.list ]]
+ mapfile -t target_listing_raw
++ grep -v '^\s*$' ips.list
++ tr -d '\r'
+ target_listing=()
+ declare -a target_listing
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.0.1
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.0.1 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '0' '1')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ local 'segments=10 0 0 1'
+ local fixed_address=10.0.0.1
+ [[ -n '' ]]
+ [[ 10.0.0.1 != \1\0\.\0\.\0\.\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.1.2
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.1.2 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '1' '2')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
++ echo -en 2
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ local 'segments=10 0 1 2'
+ local fixed_address=10.0.1.2
+ [[ -n '' ]]
+ [[ 10.0.1.2 != \1\0\.\0\.\1\.\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.0.2.3
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.0.2.3 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '0' '2' '3')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 3
++ [[ -n 3 ]]
++ echo -en 3
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=3
+ [[ 3 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=3
+ local 'segments=10 0 2 3'
+ local fixed_address=10.0.2.3
+ [[ -n '' ]]
+ [[ 10.0.2.3 != \1\0\.\0\.\2\.\3 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=192 168 1 10'
+ local fixed_address=192.168.1.10
+ [[ -n '' ]]
+ [[ 192.168.1.10 != \1\9\2\.\1\6\8\.\1\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.1.11
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.1.11 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '1' '11')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 11
++ [[ -n 11 ]]
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
++ echo -en 11
+ segment=11
+ [[ 11 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=11
+ local 'segments=192 168 1 11'
+ local fixed_address=192.168.1.11
+ [[ -n '' ]]
+ [[ 192.168.1.11 != \1\9\2\.\1\6\8\.\1\.\1\1 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.2.12
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.2.12 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '2' '12')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 12
++ [[ -n 12 ]]
++ echo -en 12
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=12
+ [[ 12 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=12
+ local 'segments=192 168 2 12'
+ local fixed_address=192.168.2.12
+ [[ -n '' ]]
+ [[ 192.168.2.12 != \1\9\2\.\1\6\8\.\2\.\1\2 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.0.5
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.0.5 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '0' '5')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 5
++ [[ -n 5 ]]
++ echo -en 5
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=5
+ [[ 5 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=5
+ local 'segments=172 16 0 5'
+ local fixed_address=172.16.0.5
+ [[ -n '' ]]
+ [[ 172.16.0.5 != \1\7\2\.\1\6\.\0\.\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.16.1.6
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.16.1.6 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '16' '1' '6')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 16
++ [[ -n 16 ]]
++ echo -en 16
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=16
+ [[ 16 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=16
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 6
++ [[ -n 6 ]]
++ echo -en 6
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=6
+ [[ 6 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=6
+ local 'segments=172 16 1 6'
+ local fixed_address=172.16.1.6
+ [[ -n '' ]]
+ [[ 172.16.1.6 != \1\7\2\.\1\6\.\1\.\6 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.0.2.50
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.0.2.50 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '0' '2' '50')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 2
++ [[ -n 2 ]]
++ echo -en 2
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=2
+ [[ 2 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=2
+ for i in "${!segments[@]}"
++ print 50
++ [[ -n 50 ]]
++ echo -en 50
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=50
+ [[ 50 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=50
+ local 'segments=192 0 2 50'
+ local fixed_address=192.0.2.50
+ [[ -n '' ]]
+ [[ 192.0.2.50 != \1\9\2\.\0\.\2\.\5\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=203.0.113.25
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 203.0.113.25 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('203' '0' '113' '25')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 203
++ [[ -n 203 ]]
++ echo -en 203
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=203
+ [[ 203 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=203
+ for i in "${!segments[@]}"
++ print 0
++ [[ -n 0 ]]
++ echo -en 0
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=0
+ [[ 0 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=0
+ for i in "${!segments[@]}"
++ print 113
++ [[ -n 113 ]]
++ echo -en 113
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=113
+ [[ 113 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=113
+ for i in "${!segments[@]}"
++ print 25
++ [[ -n 25 ]]
++ echo -en 25
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=25
+ [[ 25 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=25
+ local 'segments=203 0 113 25'
+ local fixed_address=203.0.113.25
+ [[ -n '' ]]
+ [[ 203.0.113.25 != \2\0\3\.\0\.\1\1\3\.\2\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=198.51.100.75
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 198.51.100.75 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('198' '51' '100' '75')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 198
++ [[ -n 198 ]]
++ echo -en 198
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=198
+ [[ 198 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=198
+ for i in "${!segments[@]}"
++ print 51
++ [[ -n 51 ]]
++ echo -en 51
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=51
+ [[ 51 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=51
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 75
++ [[ -n 75 ]]
++ echo -en 75
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=75
+ [[ 75 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=75
+ local 'segments=198 51 100 75'
+ local fixed_address=198.51.100.75
+ [[ -n '' ]]
+ [[ 198.51.100.75 != \1\9\8\.\5\1\.\1\0\0\.\7\5 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.18.1.20
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.18.1.20 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '18' '1' '20')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 18
++ [[ -n 18 ]]
++ echo -en 18
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=18
+ [[ 18 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=18
+ for i in "${!segments[@]}"
++ print 1
++ [[ -n 1 ]]
++ echo -en 1
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=1
+ [[ 1 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=1
+ for i in "${!segments[@]}"
++ print 20
++ [[ -n 20 ]]
++ echo -en 20
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=20
+ [[ 20 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=20
+ local 'segments=172 18 1 20'
+ local fixed_address=172.18.1.20
+ [[ -n '' ]]
+ [[ 172.18.1.20 != \1\7\2\.\1\8\.\1\.\2\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=10.10.10.10
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 10.10.10.10 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('10' '10' '10' '10')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ for i in "${!segments[@]}"
++ print 10
++ [[ -n 10 ]]
++ echo -en 10
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=10
+ [[ 10 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=10
+ local 'segments=10 10 10 10'
+ local fixed_address=10.10.10.10
+ [[ -n '' ]]
+ [[ 10.10.10.10 != \1\0\.\1\0\.\1\0\.\1\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=192.168.100.100
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 192.168.100.100 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('192' '168' '100' '100')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 192
++ [[ -n 192 ]]
++ echo -en 192
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=192
+ [[ 192 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=192
+ for i in "${!segments[@]}"
++ print 168
++ [[ -n 168 ]]
++ echo -en 168
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=168
+ [[ 168 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=168
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ for i in "${!segments[@]}"
++ print 100
++ [[ -n 100 ]]
++ echo -en 100
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=100
+ [[ 100 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=100
+ local 'segments=192 168 100 100'
+ local fixed_address=192.168.100.100
+ [[ -n '' ]]
+ [[ 192.168.100.100 != \1\9\2\.\1\6\8\.\1\0\0\.\1\0\0 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ for raw_ip in "${target_listing_raw[@]}"
+ target_address=172.31.255.254
+ validate_address
+ local 'ip_cidr_regex=^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$'
+ [[ 172.31.255.254 =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$ ]]
+ segments=('172' '31' '255' '254')
+ local -a segments
+ local cidr=
+ [[ -n '' ]]
+ for i in "${!segments[@]}"
++ print 172
++ [[ -n 172 ]]
++ echo -en 172
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=172
+ [[ 172 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=172
+ for i in "${!segments[@]}"
++ print 31
++ [[ -n 31 ]]
++ echo -en 31
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=31
+ [[ 31 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=31
+ for i in "${!segments[@]}"
++ print 255
++ [[ -n 255 ]]
++ echo -en 255
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=255
+ [[ 255 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=255
+ for i in "${!segments[@]}"
++ print 254
++ [[ -n 254 ]]
++ echo -en 254
++ sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
+ segment=254
+ [[ 254 =~ ^[0-9]+$ ]]
+ ((  segment < 0 || segment > 255  ))
+ segments[$i]=254
+ local 'segments=172 31 255 254'
+ local fixed_address=172.31.255.254
+ [[ -n '' ]]
+ [[ 172.31.255.254 != \1\7\2\.\3\1\.\2\5\5\.\2\5\4 ]]
+ [[ -n '' ]]
+ return 0
+ target_listing+=("${target_address}")
+ [[ 15 -eq 0 ]]
+ mapfile -t site_folders
++ cut -d/ -f2 .cache/configs.list
++ sort -u
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ IFS=,
++ print 'cisco something,misc'
++ [[ -n cisco something,misc ]]
++ echo -en 'cisco something,misc'
+ message 'Site Folders: cisco something,misc'
+ [[ -n Site Folders: cisco something,misc ]]
+ local 'message=Site Folders: cisco something,misc'
+ print 'Site Folders: cisco something,misc'
+ [[ -n Site Folders: cisco something,misc ]]
+ echo -en 'Site Folders: cisco something,misc'
Site Folders: cisco something,misc+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local batch_size=5
+ for site in "${site_folders[@]}"
+ oIFS='
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F '/cisco something/' .cache/configs.list
++ printf '\0'
+ IFS='
'
+ total_files=8
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [cisco something]'
+ [[ -n [BATCH] Processing folder: [cisco something] ]]
+ local 'message=[BATCH] Processing folder: [cisco something]'
+ print '[BATCH] Processing folder: [cisco something]'
+ [[ -n [BATCH] Processing folder: [cisco something] ]]
+ echo -en '[BATCH] Processing folder: [cisco something]'
[BATCH] Processing folder: [cisco something]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ local 'message=[BATCH] Found 8 config files'
+ print '[BATCH] Found 8 config files'
+ [[ -n [BATCH] Found 8 config files ]]
+ echo -en '[BATCH] Found 8 config files'
[BATCH] Found 8 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ offset=0
+ [[ 0 -lt 8 ]]
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ timestamp='[2025-05-15T01:26:05Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ printf '%s\n' '[2025-05-15T01:26:05Z] Flushed'
+ grep -qF '[2025-05-15T01:26:05Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
+++ date +%s%N
++ tr -dc a-zA-Z0-9
++ cut -c1-12
++ printf %s-%s 1747272365223424000 621
+ export batch_id=MTc0NzI3MjM2
+ batch_id=MTc0NzI3MjM2
++ date +%s
+ batch_suffix=1747272365-7760
+ batch_configs_list=configs--MTc0NzI3MjM2-1747272365-7760.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ printf '%s\n' 'configs/cisco something/fw1.cfg' 'configs/cisco something/fw2.cfg' 'configs/cisco something/fw3.cfg' 'configs/cisco something/fw4.cfg' 'configs/cisco something/fw5.cfg'
+ range_first=1
+ range_last=5
+ message '[ MTc0NzI3MjM2 ] Files 1 -> 5'
+ [[ -n [ MTc0NzI3MjM2 ] Files 1 -> 5 ]]
+ local 'message=[ MTc0NzI3MjM2 ] Files 1 -> 5'
+ print '[ MTc0NzI3MjM2 ] Files 1 -> 5'
+ [[ -n [ MTc0NzI3MjM2 ] Files 1 -> 5 ]]
+ echo -en '[ MTc0NzI3MjM2 ] Files 1 -> 5'
[ MTc0NzI3MjM2 ] Files 1 -> 5+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local base=configs--MTc0NzI3MjM2-1747272365-7760.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzI3MjM2-1747272365-7760.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzI3MjM2-1747272365-7760.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzI3MjM2-1747272365-7760.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
File: configs--MTc0NzI3MjM2-1747272365-7760.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: 160 bytes
Blocks/Inode: 8 / 237083274
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 14 18:26:05 2025
Modify: May 14 18:26:05 2025
Change: May 14 18:26:05 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list]'
+ print 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list]'
Batch-Config file: [configs--MTc0NzI3MjM2-1747272365-7760.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
configs/cisco something/fw1.cfg
configs/cisco something/fw2.cfg
configs/cisco something/fw3.cfg
configs/cisco something/fw4.cfg
configs/cisco something/fw5.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=56627
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 56627)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 56627) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 56627)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=10.0.0.1
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local target_file=targets/10.0.0.1.json
+ for ip_addr in "${target_listing[@]}"
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ true
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56633
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 56633)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 56633) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 56633)'
+ newline
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ true
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56639
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 56639)'
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 56639) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 56639)'
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ true
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56645
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 56645)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 56645) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 56645)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 192.168.1.11
++ tr -d '\r'
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ true
+ ip_cleaned=192.168.1.11
+ target_file=targets/192.168.1.11.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56651
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 56651)'
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 56651) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 56651)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ true
+ local matched_files=
+ ip_cleaned=192.168.2.12
+ [[ -n '' ]]
+ target_file=targets/192.168.2.12.json
+ return 0
+ job_pid=56657
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 56657)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 56657) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 56657)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ true
+ ip_cleaned=172.16.0.5
+ target_file=targets/172.16.0.5.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56663
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 56663)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 56663) ]]
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 56663)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
+ job_pid=56669
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 56669)'
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 56669) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 56669)'
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
+ job_pid=56675
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 56675)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local ip_addr=192.0.2.50
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 56675) ]]
+ local target_file=targets/192.0.2.50.json
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 56675)'
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ true
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56681
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 56681)'
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 56681) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 56681)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ job_pid=56687
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 56687)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 56687) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 56687)'
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ local ip_addr=198.51.100.75
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local target_file=targets/198.51.100.75.json
+ for ip_addr in "${target_listing[@]}"
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ true
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56693
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 56693)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 56693) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 56693)'
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ true
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56699
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 56699)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 56699) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 56699)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=10.10.10.10
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local target_file=targets/10.10.10.10.json
+ for ip_addr in "${target_listing[@]}"
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ true
+ ip_cleaned=192.168.100.100
+ local matched_files=
+ target_file=targets/192.168.100.100.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56705
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 56705)'
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 56705) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 56705)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ local ip_addr=192.168.100.100
+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ true
+ ip_cleaned=172.31.255.254
+ local matched_files=
+ target_file=targets/172.31.255.254.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56711
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 56711)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 56711) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 56711)'
+ newline
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ local ip_addr=172.31.255.254
+ for pid in "${job_pids[@]}"
+ local target_file=targets/172.31.255.254.json
+ kill -0 56627
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272365-7760.list
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 56627)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 56627) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 56627)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56633
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 56633)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 56633) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 56633)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56639
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco something/fw1.cfg configs/cisco something/fw2.cfg configs/cisco something/fw3.cfg configs/cisco something/fw4.cfg configs/cisco something/fw5.cfg
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 56639)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 56639) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 56639)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56645
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 56645)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 56645) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 56645)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56651
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 56651)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 56651) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 56651)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56657
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 56657)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 56657) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 56657)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56663
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 56663)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 56663) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 56663)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56669
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 56669)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 56669) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 56669)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56675
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 56675)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 56675) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 56675)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56681
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 56681)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 56681) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 56681)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56687
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 56687)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 56687) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 56687)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56693
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 56693)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 56693) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 56693)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ true
+ for pid in "${job_pids[@]}"
+ kill -0 56699
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 56699)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 56699) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 56699)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matched_files=
+ for pid in "${job_pids[@]}"
+ kill -0 56705
+ [[ -n '' ]]
+ return 0
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 56705)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 56705) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 56705)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56711
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 56711)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 56711) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 56711)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ filtered_target_listing=()
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ local total_requested=15
+ local total_mapped=0
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    0'
+ [[ -n Total IPs mapped:    0 ]]
+ local 'message=Total IPs mapped:    0'
+ print 'Total IPs mapped:    0'
+ [[ -n Total IPs mapped:    0 ]]
+ echo -en 'Total IPs mapped:    0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        15'
+ [[ -n \nUnmapped IPs:        15 ]]
+ local 'message=\nUnmapped IPs:        15'
+ print '\nUnmapped IPs:        15'
+ [[ -n \nUnmapped IPs:        15 ]]
+ echo -en '\nUnmapped IPs:        15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ message '  - 10.0.0.1'
+ [[ -n   - 10.0.0.1 ]]
+ local 'message=  - 10.0.0.1'
+ print '  - 10.0.0.1'
+ [[ -n   - 10.0.0.1 ]]
+ echo -en '  - 10.0.0.1'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ message '  - 10.0.1.2'
+ [[ -n   - 10.0.1.2 ]]
+ local 'message=  - 10.0.1.2'
+ print '  - 10.0.1.2'
+ [[ -n   - 10.0.1.2 ]]
+ echo -en '  - 10.0.1.2'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ message '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ local 'message=  - 10.0.2.3'
+ print '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ echo -en '  - 10.0.2.3'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ message '  - 192.168.1.10'
+ [[ -n   - 192.168.1.10 ]]
+ local 'message=  - 192.168.1.10'
+ print '  - 192.168.1.10'
+ [[ -n   - 192.168.1.10 ]]
+ echo -en '  - 192.168.1.10'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ message '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ local 'message=  - 192.168.1.11'
+ print '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ echo -en '  - 192.168.1.11'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ message '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ local 'message=  - 192.168.2.12'
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ message '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ local 'message=  - 172.16.0.5'
+ print '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ echo -en '  - 172.16.0.5'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ message '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ local 'message=  - 172.16.1.6'
+ print '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ echo -en '  - 172.16.1.6'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ message '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ local 'message=  - 192.0.2.50'
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ message '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ local 'message=  - 203.0.113.25'
+ print '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ echo -en '  - 203.0.113.25'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ message '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ local 'message=  - 198.51.100.75'
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ message '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ local 'message=  - 172.18.1.20'
+ print '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ echo -en '  - 172.18.1.20'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ message '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ local 'message=  - 10.10.10.10'
+ print '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ echo -en '  - 10.10.10.10'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ message '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ local 'message=  - 192.168.100.100'
+ print '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ echo -en '  - 192.168.100.100'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ message '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ local 'message=  - 172.31.255.254'
+ print '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ echo -en '  - 172.31.255.254'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=0
+ ((  ip_index < total_ips  ))
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 8 ]]
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ timestamp='[2025-05-15T01:26:05Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ printf '%s\n' '[2025-05-15T01:26:05Z] Flushed'
+ grep -qF '[2025-05-15T01:26:05Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ timestamp='[2025-05-15T01:26:05Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ printf '%s\n' '[2025-05-15T01:26:05Z] Flushed'
+ grep -qF '[2025-05-15T01:26:05Z] Flushed' .local/stats/success.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ timestamp='[2025-05-15T01:26:05Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:05Z
+ printf '%s\n' '[2025-05-15T01:26:05Z] Flushed'
+ grep -qF '[2025-05-15T01:26:05Z] Flushed' .local/stats/started.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747272365998510000 951
+ export batch_id=MTc0NzI3MjM2
+ batch_id=MTc0NzI3MjM2
++ date +%s
+ batch_suffix=1747272366-17116
+ batch_configs_list=configs--MTc0NzI3MjM2-1747272366-17116.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ printf '%s\n' 'configs/cisco something/fw6.cfg' 'configs/cisco something/fw7.cfg' 'configs/cisco something/fw8.cfg'
+ range_first=6
+ range_last=8
+ message '[ MTc0NzI3MjM2 ] Files 6 -> 8'
+ [[ -n [ MTc0NzI3MjM2 ] Files 6 -> 8 ]]
+ local 'message=[ MTc0NzI3MjM2 ] Files 6 -> 8'
+ print '[ MTc0NzI3MjM2 ] Files 6 -> 8'
+ [[ -n [ MTc0NzI3MjM2 ] Files 6 -> 8 ]]
+ echo -en '[ MTc0NzI3MjM2 ] Files 6 -> 8'
[ MTc0NzI3MjM2 ] Files 6 -> 8+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local base=configs--MTc0NzI3MjM2-1747272366-17116.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzI3MjM2-1747272366-17116.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzI3MjM2-1747272366-17116.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzI3MjM2-1747272366-17116.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
File: configs--MTc0NzI3MjM2-1747272366-17116.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: 96 bytes
Blocks/Inode: 8 / 237083280
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 14 18:26:06 2025
Modify: May 14 18:26:06 2025
Change: May 14 18:26:06 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list]'
+ print 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list]'
Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-17116.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
configs/cisco something/fw6.cfg
configs/cisco something/fw7.cfg
configs/cisco something/fw8.cfg
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=56854
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 56854)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 56854) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 56854)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ local ip_addr=10.0.0.1
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ true
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56860
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 56860)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 56860) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 56860)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ true
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56866
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 56866)'
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=10.0.2.3
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 56866) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 56866)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=192.168.1.10
+ target_file=targets/192.168.1.10.json
+ job_pid=56872
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 56872)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 56872) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 56872)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ true
+ ip_cleaned=192.168.1.11
+ local matched_files=
+ target_file=targets/192.168.1.11.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56878
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 56878)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 56878) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 56878)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ true
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56884
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 56884)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 56884) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 56884)'
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ newline
+ local ip_addr=192.168.2.12
+ local count=1
+ (( i = 0 ))
+ local target_file=targets/192.168.2.12.json
+ (( i < count ))
+ echo
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ true
+ ip_cleaned=172.16.0.5
+ local matched_files=
+ target_file=targets/172.16.0.5.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56890
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 56890)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 56890) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 56890)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
+ job_pid=56896
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 56896)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 56896) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 56896)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ true
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56902
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 56902)'
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 56902) ]]
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 56902)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ true
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56908
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=203.0.113.25
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 56908)'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 56908) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 56908)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ true
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56914
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 56914)'
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 56914) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 56914)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=198.51.100.75
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ true
+ ip_cleaned=172.18.1.20
+ local matched_files=
+ target_file=targets/172.18.1.20.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56920
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 56920)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 56920) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 56920)'
+ newline
+ local count=1
+ (( i = 0 ))
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ true
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=56926
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 56926)'
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 56926) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 56926)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local ip_addr=10.10.10.10
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ true
+ ip_cleaned=192.168.100.100
+ local matched_files=
+ target_file=targets/192.168.100.100.json
+ [[ -n '' ]]
+ return 0
+ job_pid=56932
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 56932)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 56932) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 56932)'
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ newline
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ true
+ ip_cleaned=172.31.255.254
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ target_file=targets/172.31.255.254.json
+ job_pid=56938
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 56938)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 56938) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 56938)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 56854
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 56854)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 56854) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-17116.list
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 56854)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56860
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 56860)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 56860) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 56860)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56866
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 56866)'
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/cisco something/fw6.cfg configs/cisco something/fw7.cfg configs/cisco something/fw8.cfg
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 56866) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 56866)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56872
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 56872)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 56872) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 56872)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56878
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 56878)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 56878) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 56878)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56884
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 56884)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 56884) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 56884)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56890
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 56890)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 56890) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 56890)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56896
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 56896)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 56896) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 56896)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56902
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 56902)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 56902) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 56902)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56908
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 56908)'
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 56908) ]]
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 56908)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56914
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 56914)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 56914) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 56914)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56920
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 56920)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 56920) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 56920)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56926
+ ip_address=10.10.10.10
++ true
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 56926)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 56926) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 56926)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56932
+ local matched_files=
+ ip_address=192.168.100.100
+ [[ -n '' ]]
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 56932)'
+ return 0
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 56932) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 56932)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 56938
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 56938)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 56938) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 56938)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ filtered_target_listing=()
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ local total_requested=15
+ local total_mapped=0
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    0'
+ [[ -n Total IPs mapped:    0 ]]
+ local 'message=Total IPs mapped:    0'
+ print 'Total IPs mapped:    0'
+ [[ -n Total IPs mapped:    0 ]]
+ echo -en 'Total IPs mapped:    0'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        15'
+ [[ -n \nUnmapped IPs:        15 ]]
+ local 'message=\nUnmapped IPs:        15'
+ print '\nUnmapped IPs:        15'
+ [[ -n \nUnmapped IPs:        15 ]]
+ echo -en '\nUnmapped IPs:        15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ message '  - 10.0.0.1'
+ [[ -n   - 10.0.0.1 ]]
+ local 'message=  - 10.0.0.1'
+ print '  - 10.0.0.1'
+ [[ -n   - 10.0.0.1 ]]
+ echo -en '  - 10.0.0.1'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ message '  - 10.0.1.2'
+ [[ -n   - 10.0.1.2 ]]
+ local 'message=  - 10.0.1.2'
+ print '  - 10.0.1.2'
+ [[ -n   - 10.0.1.2 ]]
+ echo -en '  - 10.0.1.2'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ message '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ local 'message=  - 10.0.2.3'
+ print '  - 10.0.2.3'
+ [[ -n   - 10.0.2.3 ]]
+ echo -en '  - 10.0.2.3'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ message '  - 192.168.1.10'
+ [[ -n   - 192.168.1.10 ]]
+ local 'message=  - 192.168.1.10'
+ print '  - 192.168.1.10'
+ [[ -n   - 192.168.1.10 ]]
+ echo -en '  - 192.168.1.10'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ message '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ local 'message=  - 192.168.1.11'
+ print '  - 192.168.1.11'
+ [[ -n   - 192.168.1.11 ]]
+ echo -en '  - 192.168.1.11'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ message '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ local 'message=  - 192.168.2.12'
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ message '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ local 'message=  - 172.16.0.5'
+ print '  - 172.16.0.5'
+ [[ -n   - 172.16.0.5 ]]
+ echo -en '  - 172.16.0.5'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ message '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ local 'message=  - 172.16.1.6'
+ print '  - 172.16.1.6'
+ [[ -n   - 172.16.1.6 ]]
+ echo -en '  - 172.16.1.6'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ message '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ local 'message=  - 192.0.2.50'
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ message '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ local 'message=  - 203.0.113.25'
+ print '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ echo -en '  - 203.0.113.25'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ message '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ local 'message=  - 198.51.100.75'
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ message '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ local 'message=  - 172.18.1.20'
+ print '  - 172.18.1.20'
+ [[ -n   - 172.18.1.20 ]]
+ echo -en '  - 172.18.1.20'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ message '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ local 'message=  - 10.10.10.10'
+ print '  - 10.10.10.10'
+ [[ -n   - 10.10.10.10 ]]
+ echo -en '  - 10.10.10.10'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ message '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ local 'message=  - 192.168.100.100'
+ print '  - 192.168.100.100'
+ [[ -n   - 192.168.100.100 ]]
+ echo -en '  - 192.168.100.100'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ message '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ local 'message=  - 172.31.255.254'
+ print '  - 172.31.255.254'
+ [[ -n   - 172.31.255.254 ]]
+ echo -en '  - 172.31.255.254'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=0
+ ((  ip_index < total_ips  ))
+ ((  0 > 0  ))
+ return 0
+ offset=10
+ [[ 10 -lt 8 ]]
+ for site in "${site_folders[@]}"
+ oIFS='
'
+ IFS='
'
+ read -r -d '' -a site_files
++ grep -F /misc/ .cache/configs.list
++ printf '\0'
+ IFS='
'
+ total_files=4
+ [[ true == true ]]
+ message '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ local 'message=[BATCH] Processing folder: [misc]'
+ print '[BATCH] Processing folder: [misc]'
+ [[ -n [BATCH] Processing folder: [misc] ]]
+ echo -en '[BATCH] Processing folder: [misc]'
[BATCH] Processing folder: [misc]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ local 'message=[BATCH] Found 4 config files'
+ print '[BATCH] Found 4 config files'
+ [[ -n [BATCH] Found 4 config files ]]
+ echo -en '[BATCH] Found 4 config files'
[BATCH] Found 4 config files+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ offset=0
+ [[ 0 -lt 4 ]]
+ rm -rf ./targets
+ [[ -d ./targets ]]
+ [[ -d ./targets ]]
+ rm -rf .local/jobs
+ [[ -d .local/jobs ]]
+ [[ -d .local/jobs ]]
+ stat_flush_success=true
+ find .local/stats/ -type f -name '*.jobs'
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ timestamp='[2025-05-15T01:26:06Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ printf '%s\n' '[2025-05-15T01:26:06Z] Flushed'
+ grep -qF '[2025-05-15T01:26:06Z] Flushed' .local/stats/reports.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ timestamp='[2025-05-15T01:26:06Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ printf '%s\n' '[2025-05-15T01:26:06Z] Flushed'
+ grep -qF '[2025-05-15T01:26:06Z] Flushed' .local/stats/success.jobs
+ read -r stat_file
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ timestamp='[2025-05-15T01:26:06Z] Flushed'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ UTC_NOW=2025-05-15T01:26:06Z
+ printf '%s\n' '[2025-05-15T01:26:06Z] Flushed'
+ grep -qF '[2025-05-15T01:26:06Z] Flushed' .local/stats/started.jobs
+ read -r stat_file
+ [[ true != true ]]
+ mkdir -p targets .local/errors .local/jobs .local/stats
+ batch_slice=("${site_files[@]:offset:batch_size}")
++ base64
++ tr -dc a-zA-Z0-9
+++ date +%s%N
++ cut -c1-12
++ printf %s-%s 1747272366778990000 29955
+ export batch_id=MTc0NzI3MjM2
+ batch_id=MTc0NzI3MjM2
++ date +%s
+ batch_suffix=1747272366-26392
+ batch_configs_list=configs--MTc0NzI3MjM2-1747272366-26392.list
+ BATCH_CONFIGS=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ export BATCH_CONFIGS
+ touch /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ printf '%s\n' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ range_first=1
+ range_last=4
+ message '[ MTc0NzI3MjM2 ] Files 1 -> 4'
+ [[ -n [ MTc0NzI3MjM2 ] Files 1 -> 4 ]]
+ local 'message=[ MTc0NzI3MjM2 ] Files 1 -> 4'
+ print '[ MTc0NzI3MjM2 ] Files 1 -> 4'
+ [[ -n [ MTc0NzI3MjM2 ] Files 1 -> 4 ]]
+ echo -en '[ MTc0NzI3MjM2 ] Files 1 -> 4'
[ MTc0NzI3MjM2 ] Files 1 -> 4+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ list_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ basename /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local base=configs--MTc0NzI3MjM2-1747272366-26392.list
++ dirname /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local parent=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ local format_common=
+ local format_os=
+ local format=
+ format_common+='File: configs--MTc0NzI3MjM2-1747272366-26392.list
'
+ format_common+='Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ uname
+ [[ Darwin == \D\a\r\w\i\n ]]
+ format_os+='Size: %z bytes
'
+ format_os+='Blocks/Inode: %b / %i
'
+ format_os+='Mode: %Sp
'
+ format_os+='UID/GID: %u / %g
'
+ format_os+='Access: %Sa
'
+ format_os+='Modify: %Sm
'
+ format_os+='Change: %Sc
'
+ format='File: configs--MTc0NzI3MjM2-1747272366-26392.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
'
+ stat -f 'File: configs--MTc0NzI3MjM2-1747272366-26392.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: %z bytes
Blocks/Inode: %b / %i
Mode: %Sp
UID/GID: %u / %g
Access: %Sa
Modify: %Sm
Change: %Sc
' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
File: configs--MTc0NzI3MjM2-1747272366-26392.list
Parent: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk
Size: 104 bytes
Blocks/Inode: 8 / 237083284
Mode: -rw-r--r--
UID/GID: 501 / 20
Access: May 14 18:26:06 2025
Modify: May 14 18:26:06 2025
Change: May 14 18:26:06 2025
+ return 0
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list] ]]
+ local 'message=Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list]'
+ print 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list]'
+ [[ -n Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list] ]]
+ echo -en 'Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list]'
Batch-Config file: [configs--MTc0NzI3MjM2-1747272366-26392.list]+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print_file /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ local target_file=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ true == true ]]
+ [[ -f /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ case "${target_file}" in
+ cat /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
configs/misc/switch1.conf
configs/misc/switch2.conf
configs/misc/switch3.conf
configs/misc/switch4.conf
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ matching_configs /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ message '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ local 'message=[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list'
+ print '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list'
+ [[ -n [matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list ]]
+ echo -en '[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list'
[matching_configs] Configurations File: /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=()
+ declare -a job_pids
+ declare -A job_ip_map
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ target_file=targets/10.0.0.1.json
+ job_pid=57082
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 57082)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 57082) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 57082)'
+ generate_configslist 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ newline
+ local count=1
+ (( i = 0 ))
+ local ip_addr=10.0.0.1
+ local target_file=targets/10.0.0.1.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ target_file=targets/10.0.1.2.json
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch3.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch3.conf ]]
+ config_json='[]'
+ job_pid=57088
+ IFS=
+ read -r config_file
+ job_pids+=("${job_pid}")
+ config_file=misc/switch1.conf
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 57088)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 57088) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 57088)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ generate_configslist 10.0.1.2 targets/10.0.1.2.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=10.0.1.2
+ local target_file=targets/10.0.1.2.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ for ip_addr in "${target_listing[@]}"
++ wc -l
++ grep -lE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ config_lines='      14'
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ config_json='[]'
+ ip_cleaned=10.0.2.3
+ target_file=targets/10.0.2.3.json
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ job_pid=57097
+ job_pids+=("${job_pid}")
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch1.conf
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 57097)'
++ wc -l
++ wc -l
+ generate_configslist 10.0.2.3 targets/10.0.2.3.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=10.0.2.3
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 57097) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 57097)'
+ local target_file=targets/10.0.2.3.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ tr -d ' '
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ match_count=1
+ site=misc
+ device=switch1.conf
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ local matched_files=configs/misc/switch2.conf
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch1.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ ip_cleaned=192.168.1.10
++ wc -l
+ target_file=targets/192.168.1.10.json
++ tr -d ' '
+ job_pid=57116
++ wc -l
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 57116)'
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 57116) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 57116)'
+ generate_configslist 192.168.1.10 targets/192.168.1.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=192.168.1.10
+ local target_file=targets/192.168.1.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ match_count=1
+ site=misc
+ device=switch1.conf
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_file=misc/switch3.conf
++ grep -oE '(^|[^0-9.])10\.0\.2\.3([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ tr -d ' '
++ wc -l
+ ip_cleaned=192.168.1.11
+ local 'matched_files=configs/misc/switch1.conf
configs/misc/switch4.conf'
+ [[ -n configs/misc/switch1.conf
configs/misc/switch4.conf ]]
+ target_file=targets/192.168.1.11.json
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
+ job_pid=57132
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 57132)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 57132) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 57132)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ generate_configslist 192.168.1.11 targets/192.168.1.11.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=192.168.1.11
+ local target_file=targets/192.168.1.11.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ grep -lE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch2.conf
+ config_lines='      11'
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ grep -oE '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)' configs/misc/switch3.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
    "lines": 14,
+ config_lines='      14'
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
++ wc -l
++ tr -d ' '
++ wc -l
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch1.conf
++ wc -l
++ tr -d ' '
+ ip_cleaned=192.168.2.12
+ target_file=targets/192.168.2.12.json
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch2.conf
+ job_pid=57153
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.2.12
+ print '\n[INFO] Started IP: 192.168.2.12 (PID: 57153)'
+ [[ -n \n[INFO] Started IP: 192.168.2.12 (PID: 57153) ]]
+ echo -en '\n[INFO] Started IP: 192.168.2.12 (PID: 57153)'
+ newline
+ generate_configslist 192.168.2.12 targets/192.168.2.12.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=192.168.2.12
+ local target_file=targets/192.168.2.12.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ match_count=2
+ local count=1
++ wc -l
+ (( i = 0 ))
+ site=misc
+ device=switch3.conf
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.2\.12([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_lines='      14'
+ match_count=1
+ site=misc
+ device=switch1.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 2 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print 172.16.0.5
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n 172.16.0.5 ]]
+ IFS=
+ read -r config_file
++ echo -en 172.16.0.5
++ tr -d '\r'
++ grep -oE '(^|[^0-9.])10\.0\.1\.2([^0-9.]|$)' configs/misc/switch4.conf
++ print '[]'
++ wc -l
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ config_lines='      14'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ true
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=172.16.0.5
+ target_file=targets/172.16.0.5.json
++ grep -oE '(^|[^0-9.])192\.168\.1\.11([^0-9.]|$)' configs/misc/switch2.conf
++ wc -l
++ tr -d ' '
+ job_pid=57178
+ job_pids+=("${job_pid}")
+ match_count=1
+ site=misc
+ job_ip_map["$job_pid"]=172.16.0.5
+ device=switch4.conf
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 57178)'
+ generate_configslist 172.16.0.5 targets/172.16.0.5.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=172.16.0.5
+ local target_file=targets/172.16.0.5.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 57178) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 57178)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ grep -lE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
+ IFS=
+ read -r config_file
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
+ match_count=1
+ site=misc
+ device=switch2.conf
+ config_json='[
++ tr -d '\r'
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
] ]]
++ jq '{configs: .}'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 2
  }
]'
++ wc -l
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
+ ip_cleaned=172.16.1.6
+ target_file=targets/172.16.1.6.json
++ wc -l
+ job_pid=57197
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ config_lines='      14'
+ IFS=
+ read -r config_file
+ generate_configslist 172.16.1.6 targets/172.16.1.6.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ job_pids+=("${job_pid}")
+ local ip_addr=172.16.1.6
+ local target_file=targets/172.16.1.6.json
+ job_ip_map["$job_pid"]=172.16.1.6
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 57197)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 57197) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 57197)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ grep -oE '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)' configs/misc/switch4.conf
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ final_json='{
  "configs": [
++ wc -l
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 2
    }
  ]
}'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ jq -r
++ jq '{configs: .}'
++ tr -d ' '
+ print '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ print 192.0.2.50
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.2.3 at targets/10.0.2.3.json'
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
+ return 0
++ tr -d '\r'
+ config_lines='      14'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ grep -oE '(^|[^0-9.])172\.16\.0\.5([^0-9.]|$)' configs/misc/switch4.conf
++ wc -l
++ tr -d ' '
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ match_count=1
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ site=misc
+ device=switch4.conf
++ jq '{configs: .}'
+ local matched_files=configs/misc/switch3.conf
+ [[ -n configs/misc/switch3.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch3.conf
+ ip_cleaned=192.0.2.50
+ target_file=targets/192.0.2.50.json
++ wc -l
+ job_pid=57222
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ job_pids+=("${job_pid}")
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ job_ip_map["$job_pid"]=192.0.2.50
+ print '\n[INFO] Started IP: 192.0.2.50 (PID: 57222)'
+ generate_configslist 192.0.2.50 targets/192.0.2.50.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=192.0.2.50
+ local target_file=targets/192.0.2.50.json
+ [[ -n \n[INFO] Started IP: 192.0.2.50 (PID: 57222) ]]
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ echo -en '\n[INFO] Started IP: 192.0.2.50 (PID: 57222)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ for ip_addr in "${target_listing[@]}"
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.0.1 at targets/10.0.0.1.json'
+ match_count=1
+ site=misc
+ return 0
+ device=switch4.conf
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -lE '(^|[^0-9.])192\.0\.2\.50([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ config_lines='      11'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])172\.16\.1\.6([^0-9.]|$)' configs/misc/switch3.conf
++ wc -l
++ tr -d ' '
++ true
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ ip_cleaned=203.0.113.25
+ target_file=targets/203.0.113.25.json
+ job_pid=57241
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ job_pids+=("${job_pid}")
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
+ job_ip_map["$job_pid"]=203.0.113.25
    "lines": 14,
    "count": 1
  },
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ print '\n[INFO] Started IP: 203.0.113.25 (PID: 57241)'
++ jq '{configs: .}'
+ print '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ [[ -n \n[INFO] Started IP: 203.0.113.25 (PID: 57241) ]]
+ echo -en '\n[INFO] Started IP: 203.0.113.25 (PID: 57241)'
+ [[ -n \n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.0.1.2 at targets/10.0.1.2.json'
+ newline
+ generate_configslist 203.0.113.25 targets/203.0.113.25.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ return 0
+ local ip_addr=203.0.113.25
+ local target_file=targets/203.0.113.25.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ match_count=1
+ site=misc
+ device=switch3.conf
++ grep -lE '(^|[^0-9.])203\.0\.113\.25([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
+ print '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
++ print '[]'
++ tr -d '\r'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.11 at targets/192.168.1.11.json'
++ [[ -n [] ]]
++ echo -en '[]'
+ return 0
++ jq --arg site misc --arg device switch3.conf --argjson lines '      11' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ true
+ ip_cleaned=198.51.100.75
+ target_file=targets/198.51.100.75.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
+ job_pid=57254
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=198.51.100.75
+ generate_configslist 198.51.100.75 targets/198.51.100.75.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local ip_addr=198.51.100.75
+ print '\n[INFO] Started IP: 198.51.100.75 (PID: 57254)'
+ local target_file=targets/198.51.100.75.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n \n[INFO] Started IP: 198.51.100.75 (PID: 57254) ]]
+ echo -en '\n[INFO] Started IP: 198.51.100.75 (PID: 57254)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])198\.51\.100\.75([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
++ tr -d '\r'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch3.conf"
    },
    "lines": 11,
    "count": 1
  }
]'
++ jq '{configs: .}'
++ true
+ ip_cleaned=172.18.1.20
+ target_file=targets/172.18.1.20.json
+ local matched_files=
+ [[ -n '' ]]
+ return 0
+ job_pid=57265
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 57265)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 57265) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 57265)'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.1.10 at targets/192.168.1.10.json'
+ return 0
+ newline
+ generate_configslist 172.18.1.20 targets/172.18.1.20.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local ip_addr=172.18.1.20
+ local target_file=targets/172.18.1.20.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ grep -lE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.0.5 at targets/172.16.0.5.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf"
      },
      "lines": 11,
      "count": 1
    }
  ]
}'
+ jq -r
+ ip_cleaned=10.10.10.10
+ target_file=targets/10.10.10.10.json
+ local matched_files=configs/misc/switch4.conf
+ [[ -n configs/misc/switch4.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
+ config_file=misc/switch4.conf
+ job_pid=57272
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 57272)'
+ generate_configslist 10.10.10.10 targets/10.10.10.10.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 57272) ]]
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 57272)'
++ wc -l
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ local ip_addr=10.10.10.10
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
+ local target_file=targets/10.10.10.10.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ grep -lE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ print '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.16.1.6 at targets/172.16.1.6.json'
+ return 0
+ config_lines='      14'
+ ip_cleaned=192.168.100.100
+ target_file=targets/192.168.100.100.json
++ grep -oE '(^|[^0-9.])172\.18\.1\.20([^0-9.]|$)' configs/misc/switch4.conf
+ local matched_files=configs/misc/switch2.conf
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ wc -l
+ config_file=misc/switch2.conf
++ tr -d ' '
+ job_pid=57285
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 57285)'
+ generate_configslist 192.168.100.100 targets/192.168.100.100.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
++ wc -l
+ local ip_addr=192.168.100.100
+ local target_file=targets/192.168.100.100.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 57285) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 57285)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for ip_addr in "${target_listing[@]}"
++ grep -lE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ match_count=1
+ site=misc
+ device=switch4.conf
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ config_lines='      14'
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
++ jq --arg site misc --arg device switch4.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
++ grep -oE '(^|[^0-9.])10\.10\.10\.10([^0-9.]|$)' configs/misc/switch2.conf
+ local matched_files=configs/misc/switch2.conf
++ wc -l
+ [[ -n configs/misc/switch2.conf ]]
+ config_json='[]'
+ IFS=
+ read -r config_file
++ tr -d ' '
+ config_file=misc/switch2.conf
+ ip_cleaned=172.31.255.254
+ target_file=targets/172.31.255.254.json
+ job_pid=57301
+ job_pids+=("${job_pid}")
++ wc -l
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 57301)'
+ generate_configslist 172.31.255.254 targets/172.31.255.254.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 57301) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 57301)'
+ local ip_addr=172.31.255.254
+ local target_file=targets/172.31.255.254.json
+ local source_configs_list=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk/configs--MTc0NzI3MjM2-1747272366-26392.list
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  15 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57082
+ ip_address=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 57082)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 57082) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 57082)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57088
++ grep -lE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf configs/misc/switch2.conf configs/misc/switch3.conf configs/misc/switch4.conf
+ ip_address=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 57088)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 57088) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 57088)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57097
+ ip_address=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 57097)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 57097) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 57097)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57116
+ match_count=1
+ ip_address=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 57116)'
+ site=misc
+ device=switch2.conf
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 57116) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 57116)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57132
+ ip_address=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 57132)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 57132) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 57132)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57153
+ ip_address=192.168.2.12
+ print '\n[INFO] Completed IP: 192.168.2.12 (PID: 57153)'
+ [[ -n \n[INFO] Completed IP: 192.168.2.12 (PID: 57153) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.2.12 (PID: 57153)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57178
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ config_lines='      14'
+ ip_address=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 57178)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 57178) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 57178)'
++ print '[]'
++ [[ -n [] ]]
+ newline
++ echo -en '[]'
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57197
+ ip_address=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 57197)'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 57197) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 57197)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57222
+ ip_address=192.0.2.50
+ print '\n[INFO] Completed IP: 192.0.2.50 (PID: 57222)'
+ [[ -n \n[INFO] Completed IP: 192.0.2.50 (PID: 57222) ]]
+ echo -en '\n[INFO] Completed IP: 192.0.2.50 (PID: 57222)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57241
+ ip_address=203.0.113.25
+ print '\n[INFO] Completed IP: 203.0.113.25 (PID: 57241)'
++ grep -oE '(^|[^0-9.])192\.168\.100\.100([^0-9.]|$)' configs/misc/switch2.conf
+ [[ -n \n[INFO] Completed IP: 203.0.113.25 (PID: 57241) ]]
++ print '[
+ echo -en '\n[INFO] Completed IP: 203.0.113.25 (PID: 57241)'
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ newline
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch4.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
+ local count=1
+ (( i = 0 ))
++ wc -l
+ (( i < count ))
++ echo -en '[
  {
    "config": {
      "site": "misc",
+ echo
      "device": "switch4.conf"
    },

    "lines": 14,
    "count": 1
  }
+ (( i++ ))
]'
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57254
++ jq '{configs: .}'
+ ip_address=198.51.100.75
+ print '\n[INFO] Completed IP: 198.51.100.75 (PID: 57254)'
+ [[ -n \n[INFO] Completed IP: 198.51.100.75 (PID: 57254) ]]
+ echo -en '\n[INFO] Completed IP: 198.51.100.75 (PID: 57254)'
++ tr -d ' '
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57265
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57272
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57285
+ local matched_files=configs/misc/switch1.conf
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57301
+ [[ -n configs/misc/switch1.conf ]]
+ config_json='[]'
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ IFS=
+ read -r config_file
+ config_file=misc/switch1.conf
++ wc -l
+ match_count=1
+ site=misc
+ device=switch2.conf
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq --arg site misc --arg device switch2.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ IFS=
+ read -r config_file
+ config_lines='      14'
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ grep -oE '(^|[^0-9.])172\.31\.255\.254([^0-9.]|$)' configs/misc/switch1.conf
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ wc -l
++ jq '{configs: .}'
++ tr -d ' '
+ match_count=1
+ site=misc
+ device=switch1.conf
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
++ print '[]'
++ [[ -n [] ]]
++ echo -en '[]'
+ print '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
++ jq --arg site misc --arg device switch1.conf --argjson lines '      14' --argjson count 1 '. += [{"config": {"site": $site, "device": $device}, "lines": $lines, "count": $count}]'
+ [[ -n \n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.18.1.20 at targets/172.18.1.20.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch2.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ config_json='[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
+ IFS=
+ read -r config_file
+ print '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ [[ -n \n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 10.10.10.10 at targets/10.10.10.10.json'
+ return 0
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ jq -r
++ print '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ [[ -n [
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
] ]]
++ echo -en '[
  {
    "config": {
      "site": "misc",
      "device": "switch1.conf"
    },
    "lines": 14,
    "count": 1
  }
]'
++ jq '{configs: .}'
+ print '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ [[ -n \n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json ]]
+ final_json='{
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf"
      },
      "lines": 14,
      "count": 1
    }
  ]
}'
+ echo -en '\n[INFO] Generated JSON for IP: 192.168.100.100 at targets/192.168.100.100.json'
+ jq -r
+ return 0
+ print '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ [[ -n \n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json ]]
+ echo -en '\n[INFO] Generated JSON for IP: 172.31.255.254 at targets/172.31.255.254.json'
+ return 0
+ ((  4 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57265
+ ip_address=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 57265)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 57265) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 57265)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57272
+ ip_address=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 57272)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 57272) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 57272)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57285
+ ip_address=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 57285)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 57285) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 57285)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57301
+ ip_address=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 57301)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 57301) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 57301)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ filtered_target_listing=()
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
+ ip_cleaned=10.0.0.1
+ [[ -f targets/10.0.0.1.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
+ ip_cleaned=10.0.1.2
+ [[ -f targets/10.0.1.2.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
+ ip_cleaned=10.0.2.3
+ [[ -f targets/10.0.2.3.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
+ ip_cleaned=192.168.1.10
+ [[ -f targets/192.168.1.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
+ ip_cleaned=192.168.1.11
+ [[ -f targets/192.168.1.11.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
+ ip_cleaned=192.168.2.12
+ [[ -f targets/192.168.2.12.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
+ ip_cleaned=172.16.0.5
+ [[ -f targets/172.16.0.5.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
+ ip_cleaned=172.16.1.6
+ [[ -f targets/172.16.1.6.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
+ ip_cleaned=192.0.2.50
+ [[ -f targets/192.0.2.50.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
+ ip_cleaned=203.0.113.25
+ [[ -f targets/203.0.113.25.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
+ ip_cleaned=198.51.100.75
+ [[ -f targets/198.51.100.75.json ]]
+ for ip_addr in "${target_listing[@]}"
++ print 172.18.1.20
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ tr -d '\r'
+ ip_cleaned=172.18.1.20
+ [[ -f targets/172.18.1.20.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
+ ip_cleaned=10.10.10.10
+ [[ -f targets/10.10.10.10.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
+ ip_cleaned=192.168.100.100
+ [[ -f targets/192.168.100.100.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ for ip_addr in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
+ ip_cleaned=172.31.255.254
+ [[ -f targets/172.31.255.254.json ]]
+ filtered_target_listing+=("${ip_cleaned}")
+ local total_requested=15
+ local total_mapped=11
+ message 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ local 'message=Total IPs requested: 15'
+ print 'Total IPs requested: 15'
+ [[ -n Total IPs requested: 15 ]]
+ echo -en 'Total IPs requested: 15'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message 'Total IPs mapped:    11'
+ [[ -n Total IPs mapped:    11 ]]
+ local 'message=Total IPs mapped:    11'
+ print 'Total IPs mapped:    11'
+ [[ -n Total IPs mapped:    11 ]]
+ echo -en 'Total IPs mapped:    11'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ message '\nUnmapped IPs:        4'
+ [[ -n \nUnmapped IPs:        4 ]]
+ local 'message=\nUnmapped IPs:        4'
+ print '\nUnmapped IPs:        4'
+ [[ -n \nUnmapped IPs:        4 ]]
+ echo -en '\nUnmapped IPs:        4'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.0.1
+ [[ -n 10.0.0.1 ]]
+ [[ ! -f targets/10.0.0.1.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.1.2
++ [[ -n 10.0.1.2 ]]
++ echo -en 10.0.1.2
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.1.2
+ [[ -n 10.0.1.2 ]]
+ [[ ! -f targets/10.0.1.2.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.0.2.3
++ [[ -n 10.0.2.3 ]]
++ echo -en 10.0.2.3
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.0.2.3
+ [[ -n 10.0.2.3 ]]
+ [[ ! -f targets/10.0.2.3.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.10
+ [[ -n 192.168.1.10 ]]
+ [[ ! -f targets/192.168.1.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.1.11
++ [[ -n 192.168.1.11 ]]
++ echo -en 192.168.1.11
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.1.11
+ [[ -n 192.168.1.11 ]]
+ [[ ! -f targets/192.168.1.11.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.2.12
++ [[ -n 192.168.2.12 ]]
++ echo -en 192.168.2.12
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.2.12
+ [[ -n 192.168.2.12 ]]
+ [[ ! -f targets/192.168.2.12.json ]]
+ message '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ local 'message=  - 192.168.2.12'
+ print '  - 192.168.2.12'
+ [[ -n   - 192.168.2.12 ]]
+ echo -en '  - 192.168.2.12'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.16.0.5
++ [[ -n 172.16.0.5 ]]
++ echo -en 172.16.0.5
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.0.5
+ [[ -n 172.16.0.5 ]]
+ [[ ! -f targets/172.16.0.5.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.16.1.6
++ [[ -n 172.16.1.6 ]]
++ echo -en 172.16.1.6
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.16.1.6
+ [[ -n 172.16.1.6 ]]
+ [[ ! -f targets/172.16.1.6.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.0.2.50
++ [[ -n 192.0.2.50 ]]
++ echo -en 192.0.2.50
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.0.2.50
+ [[ -n 192.0.2.50 ]]
+ [[ ! -f targets/192.0.2.50.json ]]
+ message '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ local 'message=  - 192.0.2.50'
+ print '  - 192.0.2.50'
+ [[ -n   - 192.0.2.50 ]]
+ echo -en '  - 192.0.2.50'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 203.0.113.25
++ [[ -n 203.0.113.25 ]]
++ echo -en 203.0.113.25
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=203.0.113.25
+ [[ -n 203.0.113.25 ]]
+ [[ ! -f targets/203.0.113.25.json ]]
+ message '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ local 'message=  - 203.0.113.25'
+ print '  - 203.0.113.25'
+ [[ -n   - 203.0.113.25 ]]
+ echo -en '  - 203.0.113.25'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 198.51.100.75
++ [[ -n 198.51.100.75 ]]
++ echo -en 198.51.100.75
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=198.51.100.75
+ [[ -n 198.51.100.75 ]]
+ [[ ! -f targets/198.51.100.75.json ]]
+ message '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ local 'message=  - 198.51.100.75'
+ print '  - 198.51.100.75'
+ [[ -n   - 198.51.100.75 ]]
+ echo -en '  - 198.51.100.75'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ for ip in "${target_listing[@]}"
++ print 172.18.1.20
++ tr -d '\r'
++ [[ -n 172.18.1.20 ]]
++ echo -en 172.18.1.20
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.18.1.20
+ [[ -n 172.18.1.20 ]]
+ [[ ! -f targets/172.18.1.20.json ]]
+ for ip in "${target_listing[@]}"
++ print 10.10.10.10
++ [[ -n 10.10.10.10 ]]
++ echo -en 10.10.10.10
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=10.10.10.10
+ [[ -n 10.10.10.10 ]]
+ [[ ! -f targets/10.10.10.10.json ]]
+ for ip in "${target_listing[@]}"
++ print 192.168.100.100
++ [[ -n 192.168.100.100 ]]
++ echo -en 192.168.100.100
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=192.168.100.100
+ [[ -n 192.168.100.100 ]]
+ [[ ! -f targets/192.168.100.100.json ]]
+ for ip in "${target_listing[@]}"
++ print 172.31.255.254
++ [[ -n 172.31.255.254 ]]
++ echo -en 172.31.255.254
++ tr -d '\r'
++ sed -E 's/[[:space:]]+//g'
+ ip_cleaned=172.31.255.254
+ [[ -n 172.31.255.254 ]]
+ [[ ! -f targets/172.31.255.254.json ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ manage_configs
+ job_pids=()
+ declare -a job_pids
+ job_ip_map=()
+ declare -A job_ip_map
+ ip_index=0
+ total_ips=11
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.0.1
++ printf %02d 1
+ padded_index=01
+ job_pid=57451
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.0.1
+ print '\n[INFO] Started IP: 10.0.0.1 (PID: 57451)'
+ [[ -n \n[INFO] Started IP: 10.0.0.1 (PID: 57451) ]]
+ echo -en '\n[INFO] Started IP: 10.0.0.1 (PID: 57451)'
+ newline
+ local count=1
+ parse_configs 10.0.0.1 01
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=10.0.0.1
+ ip_addr=10.0.1.2
+ local padded_index=01
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 2
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=02
+ job_pid=57455
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.1.2
+ print '\n[INFO] Started IP: 10.0.1.2 (PID: 57455)'
+ [[ -n \n[INFO] Started IP: 10.0.1.2 (PID: 57455) ]]
+ echo -en '\n[INFO] Started IP: 10.0.1.2 (PID: 57455)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=10.0.2.3
+ parse_configs 10.0.1.2 02
+ local ip_addr=10.0.1.2
+ local padded_index=02
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 3
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=03
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=57458
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.0.2.3
+ print '\n[INFO] Started IP: 10.0.2.3 (PID: 57458)'
+ logfile=.local/jobs/10.0.0.1.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ -n \n[INFO] Started IP: 10.0.2.3 (PID: 57458) ]]
+ echo -en '\n[INFO] Started IP: 10.0.2.3 (PID: 57458)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.10
+ parse_configs 10.0.2.3 03
+ local ip_addr=10.0.2.3
+ local padded_index=03
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ printf %02d 4
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ padded_index=04
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ job_pid=57463
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.10
+ print '\n[INFO] Started IP: 192.168.1.10 (PID: 57463)'
+ logfile=.local/jobs/10.0.1.2.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.1.2 --index=02 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ parse_configs 192.168.1.10 04
+ [[ -n \n[INFO] Started IP: 192.168.1.10 (PID: 57463) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.10 (PID: 57463)'
+ local ip_addr=192.168.1.10
+ local padded_index=04
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.1.11
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 5
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=05
+ logfile=.local/jobs/10.0.2.3.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.0.2.3 --index=03 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57469
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.1.11
+ print '\n[INFO] Started IP: 192.168.1.11 (PID: 57469)'
+ [[ -n \n[INFO] Started IP: 192.168.1.11 (PID: 57469) ]]
+ echo -en '\n[INFO] Started IP: 192.168.1.11 (PID: 57469)'
+ parse_configs 192.168.1.11 05
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ local ip_addr=192.168.1.11
+ ip_addr=172.16.0.5
+ local padded_index=05
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 6
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ logfile=.local/jobs/192.168.1.10.job
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ padded_index=06
+ job_pid=57475
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.0.5
+ print '\n[INFO] Started IP: 172.16.0.5 (PID: 57475)'
+ parse_configs 172.16.0.5 06
+ [[ -n \n[INFO] Started IP: 172.16.0.5 (PID: 57475) ]]
+ echo -en '\n[INFO] Started IP: 172.16.0.5 (PID: 57475)'
+ local ip_addr=172.16.0.5
+ local padded_index=06
+ newline
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.16.1.6
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 7
+ [[ true == true ]]
+ execute+=(--classify)
+ padded_index=07
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/192.168.1.11.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.1.11 --index=05 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57479
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.16.1.6
+ print '\n[INFO] Started IP: 172.16.1.6 (PID: 57479)'
+ [[ -n \n[INFO] Started IP: 172.16.1.6 (PID: 57479) ]]
+ echo -en '\n[INFO] Started IP: 172.16.1.6 (PID: 57479)'
+ parse_configs 172.16.1.6 07
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local ip_addr=172.16.1.6
+ ((  ip_index < total_ips  ))
+ local padded_index=07
+ ip_addr=172.18.1.20
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 8
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=08
+ logfile=.local/jobs/172.16.0.5.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.0.5 --index=06 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57486
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.18.1.20
+ print '\n[INFO] Started IP: 172.18.1.20 (PID: 57486)'
+ [[ -n \n[INFO] Started IP: 172.18.1.20 (PID: 57486) ]]
+ echo -en '\n[INFO] Started IP: 172.18.1.20 (PID: 57486)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ parse_configs 172.18.1.20 08
+ local ip_addr=172.18.1.20
+ local padded_index=08
+ ip_addr=10.10.10.10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ printf %02d 9
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ padded_index=09
+ [[ true == true ]]
+ logfile=.local/jobs/172.16.1.6.job
+ mkdir -p .local/jobs .local/errors
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.16.1.6 --index=07 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ job_pid=57494
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=10.10.10.10
+ print '\n[INFO] Started IP: 10.10.10.10 (PID: 57494)'
+ parse_configs 10.10.10.10 09
+ [[ -n \n[INFO] Started IP: 10.10.10.10 (PID: 57494) ]]
+ local ip_addr=10.10.10.10
+ local padded_index=09
+ echo -en '\n[INFO] Started IP: 10.10.10.10 (PID: 57494)'
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=192.168.100.100
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/172.18.1.20.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.18.1.20 --index=08 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ printf %02d 10
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ padded_index=10
+ job_pid=57505
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=192.168.100.100
+ print '\n[INFO] Started IP: 192.168.100.100 (PID: 57505)'
+ parse_configs 192.168.100.100 10
+ local ip_addr=192.168.100.100
+ local padded_index=10
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ [[ -n \n[INFO] Started IP: 192.168.100.100 (PID: 57505) ]]
+ echo -en '\n[INFO] Started IP: 192.168.100.100 (PID: 57505)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ip_addr=172.31.255.254
++ IFS=,
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ logfile=.local/jobs/10.10.10.10.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=10.10.10.10 --index=09 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
++ printf %02d 11
+ padded_index=11
+ job_pid=57519
+ job_pids+=("${job_pid}")
+ job_ip_map["$job_pid"]=172.31.255.254
+ print '\n[INFO] Started IP: 172.31.255.254 (PID: 57519)'
+ [[ -n \n[INFO] Started IP: 172.31.255.254 (PID: 57519) ]]
+ echo -en '\n[INFO] Started IP: 172.31.255.254 (PID: 57519)'
+ parse_configs 172.31.255.254 11
+ local ip_addr=172.31.255.254
+ newline
+ local padded_index=11
+ local count=1
+ (( i = 0 ))
+ execute=(./scripts/parse-configs.shell --configs="${configs_dirpath}" --ip-addr="${ip_addr}" --index="${padded_index}" --matrix="${matrix_filename}" --reports="${reports_folder}" --file-ext="$(IFS=,; print "${file_extensions[*]}")")
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ ((  ip_index < total_ips  ))
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57451
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57455
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57458
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57463
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57469
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57475
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57479
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57486
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57494
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57505
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57519
+ valid_job_pids+=("$pid")
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ logfile=.local/jobs/192.168.100.100.job
+ [[ true == true ]]
++ IFS=,
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=192.168.100.100 --index=10 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
+ [[ true == true ]]
+ execute+=(--classify)
+ [[ false == true ]]
+ [[ true == true ]]
+ execute+=(--verbose)
+ [[ true == true ]]
+ execute+=(--debug)
+ [[ true == true ]]
+ mkdir -p .local/jobs .local/errors
+ logfile=.local/jobs/172.31.255.254.job
+ [[ true == true ]]
+ bash -x ./scripts/parse-configs.shell --configs=configs --ip-addr=172.31.255.254 --index=11 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.11'
+ [[ -n \n[DONE] IP: 192.168.1.11 ]]
+ echo -en '\n[DONE] IP: 192.168.1.11'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.1.6'
+ [[ -n \n[DONE] IP: 172.16.1.6 ]]
+ echo -en '\n[DONE] IP: 172.16.1.6'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.16.0.5'
+ [[ -n \n[DONE] IP: 172.16.0.5 ]]
+ echo -en '\n[DONE] IP: 172.16.0.5'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.18.1.20'
+ print '\n[DONE] IP: 10.10.10.10'
+ [[ -n \n[DONE] IP: 172.18.1.20 ]]
+ [[ -n \n[DONE] IP: 10.10.10.10 ]]
+ echo -en '\n[DONE] IP: 172.18.1.20'
+ echo -en '\n[DONE] IP: 10.10.10.10'
+ return 0
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.2.3'
+ [[ -n \n[DONE] IP: 10.0.2.3 ]]
+ echo -en '\n[DONE] IP: 10.0.2.3'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.100.100'
+ [[ -n \n[DONE] IP: 192.168.100.100 ]]
+ echo -en '\n[DONE] IP: 192.168.100.100'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 172.31.255.254'
+ [[ -n \n[DONE] IP: 172.31.255.254 ]]
+ echo -en '\n[DONE] IP: 172.31.255.254'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 192.168.1.10'
+ [[ -n \n[DONE] IP: 192.168.1.10 ]]
+ echo -en '\n[DONE] IP: 192.168.1.10'
+ return 0
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.1.2'
+ [[ -n \n[DONE] IP: 10.0.1.2 ]]
+ echo -en '\n[DONE] IP: 10.0.1.2'
+ return 0
+ ((  11 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57451
+ valid_job_pids+=("$pid")
+ for pid in "${job_pids[@]}"
+ kill -0 57455
+ ip=10.0.1.2
+ print '\n[INFO] Completed IP: 10.0.1.2 (PID: 57455)'
+ [[ -n \n[INFO] Completed IP: 10.0.1.2 (PID: 57455) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.1.2 (PID: 57455)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57458
+ ip=10.0.2.3
+ print '\n[INFO] Completed IP: 10.0.2.3 (PID: 57458)'
+ [[ -n \n[INFO] Completed IP: 10.0.2.3 (PID: 57458) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.2.3 (PID: 57458)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57463
+ ip=192.168.1.10
+ print '\n[INFO] Completed IP: 192.168.1.10 (PID: 57463)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.10 (PID: 57463) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.10 (PID: 57463)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57469
+ ip=192.168.1.11
+ print '\n[INFO] Completed IP: 192.168.1.11 (PID: 57469)'
+ [[ -n \n[INFO] Completed IP: 192.168.1.11 (PID: 57469) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.1.11 (PID: 57469)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57475
+ ip=172.16.0.5
+ print '\n[INFO] Completed IP: 172.16.0.5 (PID: 57475)'
+ [[ -n \n[INFO] Completed IP: 172.16.0.5 (PID: 57475) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.0.5 (PID: 57475)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57479
+ ip=172.16.1.6
+ print '\n[INFO] Completed IP: 172.16.1.6 (PID: 57479)'
+ [[ -n \n[INFO] Completed IP: 172.16.1.6 (PID: 57479) ]]
+ echo -en '\n[INFO] Completed IP: 172.16.1.6 (PID: 57479)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57486
+ ip=172.18.1.20
+ print '\n[INFO] Completed IP: 172.18.1.20 (PID: 57486)'
+ [[ -n \n[INFO] Completed IP: 172.18.1.20 (PID: 57486) ]]
+ echo -en '\n[INFO] Completed IP: 172.18.1.20 (PID: 57486)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57494
+ ip=10.10.10.10
+ print '\n[INFO] Completed IP: 10.10.10.10 (PID: 57494)'
+ [[ -n \n[INFO] Completed IP: 10.10.10.10 (PID: 57494) ]]
+ echo -en '\n[INFO] Completed IP: 10.10.10.10 (PID: 57494)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57505
+ ip=192.168.100.100
+ print '\n[INFO] Completed IP: 192.168.100.100 (PID: 57505)'
+ [[ -n \n[INFO] Completed IP: 192.168.100.100 (PID: 57505) ]]
+ echo -en '\n[INFO] Completed IP: 192.168.100.100 (PID: 57505)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for pid in "${job_pids[@]}"
+ kill -0 57519
+ ip=172.31.255.254
+ print '\n[INFO] Completed IP: 172.31.255.254 (PID: 57519)'
+ [[ -n \n[INFO] Completed IP: 172.31.255.254 (PID: 57519) ]]
+ echo -en '\n[INFO] Completed IP: 172.31.255.254 (PID: 57519)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ local status=0
+ ((  status != 0  ))
+ print '\n[DONE] IP: 10.0.0.1'
+ [[ -n \n[DONE] IP: 10.0.0.1 ]]
+ echo -en '\n[DONE] IP: 10.0.0.1'
+ return 0
+ ((  1 > 0  ))
+ valid_job_pids=()
+ for pid in "${job_pids[@]}"
+ kill -0 57451
+ ip=10.0.0.1
+ print '\n[INFO] Completed IP: 10.0.0.1 (PID: 57451)'
+ [[ -n \n[INFO] Completed IP: 10.0.0.1 (PID: 57451) ]]
+ echo -en '\n[INFO] Completed IP: 10.0.0.1 (PID: 57451)'
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ job_pids=("${valid_job_pids[@]}")
+ sleep 0.5
+ ((  0 > 0  ))
+ return 0
+ offset=5
+ [[ 5 -lt 4 ]]
+ local json_dir=reports/json
+ expected_reports=11
++ find reports/json -type f -name '*.json'
++ wc -l
++ sed -e 's|\ ||g'
+ actual_reports=11
+ timeout=5
+ elapsed=0
+ ((  actual_reports < expected_reports && elapsed < timeout * 10  ))
+ ((  actual_reports < expected_reports  ))
+ generate_csvoutput
+ local output_csv=reports/reports.csv
+ local json_dir=reports/json
+ [[ ! -d reports/json ]]
+ find reports/json -type f -name '*.json'
+ sort
reports/json/10.0.0.1.json
reports/json/10.0.1.2.json
reports/json/10.0.2.3.json
reports/json/10.10.10.10.json
reports/json/172.16.0.5.json
reports/json/172.16.1.6.json
reports/json/172.18.1.20.json
reports/json/172.31.255.254.json
reports/json/192.168.1.10.json
reports/json/192.168.1.11.json
reports/json/192.168.100.100.json
+ message target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ local message=target,site,device,object,entry,description,group
+ print target,site,device,object,entry,description,group
+ [[ -n target,site,device,object,entry,description,group ]]
+ echo -en target,site,device,object,entry,description,group
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo
+ (( i++ ))
+ (( i < count ))
+ find reports/json -type f -name '*.json'
+ sort
+ read -r json
+ message 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ local 'message=Processing reports/json/10.0.0.1.json'
+ print 'Processing reports/json/10.0.0.1.json'
+ [[ -n Processing reports/json/10.0.0.1.json ]]
+ echo -en 'Processing reports/json/10.0.0.1.json'
Processing reports/json/10.0.0.1.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.0.1.json
{
  "target": "10.0.0.1",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Avengers-Office",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 10.0.0.1 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Spider-Net",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.0.1.json
+ read -r json
+ message 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ local 'message=Processing reports/json/10.0.1.2.json'
+ print 'Processing reports/json/10.0.1.2.json'
+ [[ -n Processing reports/json/10.0.1.2.json ]]
+ echo -en 'Processing reports/json/10.0.1.2.json'
Processing reports/json/10.0.1.2.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.1.2.json
{
  "target": "10.0.1.2",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 10.0.1.2 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Guardians-Zone",
            "description": "false",
            "entries": [
              "network-object host 10.0.1.2",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.1.2.json
+ read -r json
+ message 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ local 'message=Processing reports/json/10.0.2.3.json'
+ print 'Processing reports/json/10.0.2.3.json'
+ [[ -n Processing reports/json/10.0.2.3.json ]]
+ echo -en 'Processing reports/json/10.0.2.3.json'
Processing reports/json/10.0.2.3.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.0.2.3.json
{
  "target": "10.0.2.3",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Stark-WiFi",
            "description": "false",
            "entries": [
              "network-object host 10.0.2.3",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.0.2.3.json
+ read -r json
+ message 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ local 'message=Processing reports/json/10.10.10.10.json'
+ print 'Processing reports/json/10.10.10.10.json'
+ [[ -n Processing reports/json/10.10.10.10.json ]]
+ echo -en 'Processing reports/json/10.10.10.10.json'
Processing reports/json/10.10.10.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/10.10.10.10.json
{
  "target": "10.10.10.10",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 10.10.10.10 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/10.10.10.10.json
+ read -r json
+ message 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ local 'message=Processing reports/json/172.16.0.5.json'
+ print 'Processing reports/json/172.16.0.5.json'
+ [[ -n Processing reports/json/172.16.0.5.json ]]
+ echo -en 'Processing reports/json/172.16.0.5.json'
Processing reports/json/172.16.0.5.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.16.0.5.json
{
  "target": "172.16.0.5",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 172.16.0.5 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.16.0.5.json
+ read -r json
+ message 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ local 'message=Processing reports/json/172.16.1.6.json'
+ print 'Processing reports/json/172.16.1.6.json'
+ [[ -n Processing reports/json/172.16.1.6.json ]]
+ echo -en 'Processing reports/json/172.16.1.6.json'
Processing reports/json/172.16.1.6.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.16.1.6.json
{
  "target": "172.16.1.6",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 172.16.1.6 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.16.1.6.json
+ read -r json
+ message 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ local 'message=Processing reports/json/172.18.1.20.json'
+ print 'Processing reports/json/172.18.1.20.json'
+ [[ -n Processing reports/json/172.18.1.20.json ]]
+ echo -en 'Processing reports/json/172.18.1.20.json'
Processing reports/json/172.18.1.20.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.18.1.20.json
{
  "target": "172.18.1.20",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 172.18.1.20 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.18.1.20.json
+ read -r json
+ message 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ local 'message=Processing reports/json/172.31.255.254.json'
+ print 'Processing reports/json/172.31.255.254.json'
+ [[ -n Processing reports/json/172.31.255.254.json ]]
+ echo -en 'Processing reports/json/172.31.255.254.json'
Processing reports/json/172.31.255.254.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/172.31.255.254.json
{
  "target": "172.31.255.254",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 172.31.255.254 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/172.31.255.254.json
+ read -r json
+ message 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ local 'message=Processing reports/json/192.168.1.10.json'
+ print 'Processing reports/json/192.168.1.10.json'
+ [[ -n Processing reports/json/192.168.1.10.json ]]
+ echo -en 'Processing reports/json/192.168.1.10.json'
Processing reports/json/192.168.1.10.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.1.10.json
{
  "target": "192.168.1.10",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 192.168.1.10 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch4.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 192.168.1.10 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.1.10.json
+ read -r json
+ message 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ local 'message=Processing reports/json/192.168.1.11.json'
+ print 'Processing reports/json/192.168.1.11.json'
+ [[ -n Processing reports/json/192.168.1.11.json ]]
+ echo -en 'Processing reports/json/192.168.1.11.json'
Processing reports/json/192.168.1.11.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.1.11.json
{
  "target": "192.168.1.11",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 192.168.1.11 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.1.11.json
+ read -r json
+ message 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ local 'message=Processing reports/json/192.168.100.100.json'
+ print 'Processing reports/json/192.168.100.100.json'
+ [[ -n Processing reports/json/192.168.100.100.json ]]
+ echo -en 'Processing reports/json/192.168.100.100.json'
Processing reports/json/192.168.100.100.json+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ jq -r . reports/json/192.168.100.100.json
{
  "target": "192.168.100.100",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch2.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 192.168.100.100 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
+ jq -e -r '
                .target as $target
                | .configs[]
                | .config as $cfg
                | select($cfg.objects != null and ($cfg.objects | type == "array" and length > 0))
                | $cfg.objects[]
                | [
                    $target,
                    ($cfg.site // "none"),
                    ($cfg.device // "none"),
                    (.object // "none"),
                    (.entries[0] // "none"),
                    (.description // "none"),
                    (.group // "none")
                  ]
                | @csv' reports/json/192.168.100.100.json
+ read -r json
+ print_file reports/reports.csv
+ [[ -n reports/reports.csv ]]
+ local target_file=reports/reports.csv
+ [[ true == true ]]
+ [[ -f reports/reports.csv ]]
+ case "${target_file}" in
+ cat reports/reports.csv
target,site,device,object,entry,description,group

"10.0.0.1","misc","switch1.conf","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.0.1","misc","switch3.conf","interface","ip address 10.0.0.1 255.255.255.0","false","Business-Unit-Networks"
"10.0.0.1","misc","switch3.conf","object-group","network-object host 10.0.0.1","false","Unclassified"
"10.0.1.2","misc","switch1.conf","interface","ip address 10.0.1.2 255.255.255.0","false","Unclassified"
"10.0.1.2","misc","switch4.conf","object-group","network-object host 10.0.1.2","false","Unclassified"
"10.0.2.3","misc","switch2.conf","object-group","network-object host 10.0.2.3","false","Unclassified"
"10.10.10.10","misc","switch2.conf","interface","ip address 10.10.10.10 255.255.255.0","false","Business-Unit-Networks"
"172.16.0.5","misc","switch4.conf","interface","ip address 172.16.0.5 255.255.255.0","false","Unclassified"
"172.16.1.6","misc","switch3.conf","interface","ip address 172.16.1.6 255.255.255.0","false","Business-Unit-Networks"
"172.18.1.20","misc","switch4.conf","interface","ip address 172.18.1.20 255.255.255.0","false","Business-Unit-Networks"
"172.31.255.254","misc","switch1.conf","interface","ip address 172.31.255.254 255.255.255.0","false","Business-Unit-Networks"
"192.168.1.10","misc","switch1.conf","interface","ip address 192.168.1.10 255.255.255.0","false","Unclassified"
"192.168.1.10","misc","switch4.conf","interface","ip address 192.168.1.10 255.255.255.0","false","Business-Unit-Networks"
"192.168.1.11","misc","switch2.conf","interface","ip address 192.168.1.11 255.255.255.0","false","Business-Unit-Networks"
"192.168.100.100","misc","switch2.conf","interface","ip address 192.168.100.100 255.255.255.0","false","Unclassified"
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ true == true ]]
+ [[ -s reports/reports.csv ]]
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ message 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ local 'message=CSV Report Summary (tabulated):'
+ print 'CSV Report Summary (tabulated):'
+ [[ -n CSV Report Summary (tabulated): ]]
+ echo -en 'CSV Report Summary (tabulated):'
CSV Report Summary (tabulated):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ column -t -s, reports/reports.csv
+ less -SFX
target             site    device          object          entry                                       description  group
"10.0.0.1"         "misc"  "switch1.conf"  "object-group"  "network-object host 10.0.0.1"              "false"      "Unclassified"
"10.0.0.1"         "misc"  "switch3.conf"  "interface"     "ip address 10.0.0.1 255.255.255.0"         "false"      "Business-Unit-Networks"
"10.0.0.1"         "misc"  "switch3.conf"  "object-group"  "network-object host 10.0.0.1"              "false"      "Unclassified"
"10.0.1.2"         "misc"  "switch1.conf"  "interface"     "ip address 10.0.1.2 255.255.255.0"         "false"      "Unclassified"
"10.0.1.2"         "misc"  "switch4.conf"  "object-group"  "network-object host 10.0.1.2"              "false"      "Unclassified"
"10.0.2.3"         "misc"  "switch2.conf"  "object-group"  "network-object host 10.0.2.3"              "false"      "Unclassified"
"10.10.10.10"      "misc"  "switch2.conf"  "interface"     "ip address 10.10.10.10 255.255.255.0"      "false"      "Business-Unit-Networks"
"172.16.0.5"       "misc"  "switch4.conf"  "interface"     "ip address 172.16.0.5 255.255.255.0"       "false"      "Unclassified"
"172.16.1.6"       "misc"  "switch3.conf"  "interface"     "ip address 172.16.1.6 255.255.255.0"       "false"      "Business-Unit-Networks"
"172.18.1.20"      "misc"  "switch4.conf"  "interface"     "ip address 172.18.1.20 255.255.255.0"      "false"      "Business-Unit-Networks"
"172.31.255.254"   "misc"  "switch1.conf"  "interface"     "ip address 172.31.255.254 255.255.255.0"   "false"      "Business-Unit-Networks"
"192.168.1.10"     "misc"  "switch1.conf"  "interface"     "ip address 192.168.1.10 255.255.255.0"     "false"      "Unclassified"
"192.168.1.10"     "misc"  "switch4.conf"  "interface"     "ip address 192.168.1.10 255.255.255.0"     "false"      "Business-Unit-Networks"
"192.168.1.11"     "misc"  "switch2.conf"  "interface"     "ip address 192.168.1.11 255.255.255.0"     "false"      "Business-Unit-Networks"
"192.168.100.100"  "misc"  "switch2.conf"  "interface"     "ip address 192.168.100.100 255.255.255.0"  "false"      "Unclassified"
+ return 0
+ local elapsed=5
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ printf '[INFO] Started at: %s\n' '2025-05-14 18:26:04'
[INFO] Started at: 2025-05-14 18:26:04
+ printf '[INFO] Total runtime: %02d:%02d:%02d\n' 0 0 5
[INFO] Total runtime: 00:00:05
+ return 0
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.ifkEcfpOkk

+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ
+ TMP_DIR=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ date +%s%N
+++ base64
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzI3MjM2ODA3MTAwNzAwMAo
++ divisor=MTc0NzI3MjM2ODA3MTAwNzAwMAo
+ source ./scripts/tools-extraction.shell
++ [[ -n '' ]]
++ readonly __TOOLS_EXTRACTION_SOURCED=1
++ __TOOLS_EXTRACTION_SOURCED=1
++ alias extract-configs=extract_configs
++ alias process-configs=process_configs
+ alias parse-configs=main
+ matched_blocks_byfile=()
+ declare -gA matched_blocks_byfile
+ export script_name=./scripts/parse-configs.shell
+ script_name=./scripts/parse-configs.shell
+ [[ 9 -ge 1 ]]
+ [[ --configs=configs =~ ^-*(h|help)$ ]]
+ main --configs=configs --ip-addr=10.0.0.1 --index=01 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ file_extensions=()
+ declare -a file_extensions
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --configs=configs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ configs =~ ^(classify|g)$ ]]
+ [[ configs =~ ^(file-ext|x)$ ]]
+ [[ configs =~ ^(configs|c)$ ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ [[ configs =~ ^(index|n)$ ]]
+ [[ configs =~ ^(ip-addr|i)$ ]]
+ [[ configs =~ ^(logs|o)$ ]]
+ [[ configs =~ ^(matrix|m)$ ]]
+ [[ configs =~ ^(reports|r)$ ]]
+ [[ configs =~ ^(validate|v)$ ]]
+ [[ configs == \h\e\l\p ]]
+ [[ configs == \d\e\b\u\g ]]
+ [[ configs == \d\r\y\-\r\u\n ]]
+ [[ configs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ip-addr=10.0.0.1
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ip-addr =~ ^(classify|g)$ ]]
+ [[ ip-addr =~ ^(file-ext|x)$ ]]
+ [[ ip-addr =~ ^(configs|c)$ ]]
+ [[ ip-addr =~ ^(index|n)$ ]]
+ [[ ip-addr =~ ^(ip-addr|i)$ ]]
+ local target_address=10.0.0.1
+ [[ ip-addr =~ ^(logs|o)$ ]]
+ [[ ip-addr =~ ^(matrix|m)$ ]]
+ [[ ip-addr =~ ^(reports|r)$ ]]
+ [[ ip-addr =~ ^(validate|v)$ ]]
+ [[ ip-addr == \h\e\l\p ]]
+ [[ ip-addr == \d\e\b\u\g ]]
+ [[ ip-addr == \d\r\y\-\r\u\n ]]
+ [[ ip-addr == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --index=01
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ index =~ ^(classify|g)$ ]]
+ [[ index =~ ^(file-ext|x)$ ]]
+ [[ index =~ ^(configs|c)$ ]]
+ [[ index =~ ^(index|n)$ ]]
+ local target_index=01
+ [[ index =~ ^(ip-addr|i)$ ]]
+ [[ index =~ ^(logs|o)$ ]]
+ [[ index =~ ^(matrix|m)$ ]]
+ [[ index =~ ^(reports|r)$ ]]
+ [[ index =~ ^(validate|v)$ ]]
+ [[ index == \h\e\l\p ]]
+ [[ index == \d\e\b\u\g ]]
+ [[ index == \d\r\y\-\r\u\n ]]
+ [[ index == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --matrix=matrix.json
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ matrix =~ ^(classify|g)$ ]]
+ [[ matrix =~ ^(file-ext|x)$ ]]
+ [[ matrix =~ ^(configs|c)$ ]]
+ [[ matrix =~ ^(index|n)$ ]]
+ [[ matrix =~ ^(ip-addr|i)$ ]]
+ [[ matrix =~ ^(logs|o)$ ]]
+ [[ matrix =~ ^(matrix|m)$ ]]
+ local matrix_filename=matrix.json
+ [[ matrix =~ ^(reports|r)$ ]]
+ [[ matrix =~ ^(validate|v)$ ]]
+ [[ matrix == \h\e\l\p ]]
+ [[ matrix == \d\e\b\u\g ]]
+ [[ matrix == \d\r\y\-\r\u\n ]]
+ [[ matrix == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --reports=reports
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ reports =~ ^(classify|g)$ ]]
+ [[ reports =~ ^(file-ext|x)$ ]]
+ [[ reports =~ ^(configs|c)$ ]]
+ [[ reports =~ ^(index|n)$ ]]
+ [[ reports =~ ^(ip-addr|i)$ ]]
+ [[ reports =~ ^(logs|o)$ ]]
+ [[ reports =~ ^(matrix|m)$ ]]
+ [[ reports =~ ^(reports|r)$ ]]
+ local reports_folder=reports
+ [[ reports =~ ^(validate|v)$ ]]
+ [[ reports == \h\e\l\p ]]
+ [[ reports == \d\e\b\u\g ]]
+ [[ reports == \d\r\y\-\r\u\n ]]
+ [[ reports == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --file-ext=cfg,conf,cnf
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ file-ext =~ ^(classify|g)$ ]]
+ [[ file-ext =~ ^(file-ext|x)$ ]]
+ file_extensions+=($(print "${value}" | tr ':,;\n ' '\n'))
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ tr ':,;\n ' '\n'
+ [[ file-ext =~ ^(configs|c)$ ]]
+ [[ file-ext =~ ^(index|n)$ ]]
+ [[ file-ext =~ ^(ip-addr|i)$ ]]
+ [[ file-ext =~ ^(logs|o)$ ]]
+ [[ file-ext =~ ^(matrix|m)$ ]]
+ [[ file-ext =~ ^(reports|r)$ ]]
+ [[ file-ext =~ ^(validate|v)$ ]]
+ [[ file-ext == \h\e\l\p ]]
+ [[ file-ext == \d\e\b\u\g ]]
+ [[ file-ext == \d\r\y\-\r\u\n ]]
+ [[ file-ext == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ export classify_targets=true
+ classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(index|n)$ ]]
+ [[ classify =~ ^(ip-addr|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(index|n)$ ]]
+ [[ verbose =~ ^(ip-addr|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(index|n)$ ]]
+ [[ debug =~ ^(ip-addr|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ export debug=true
+ debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ IFS='
'
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z x ]]
+ [[ 3 -eq 0 ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ source_configs=()
+ declare -ga source_configs
+ target_configlist_json=targets/10.0.0.1.json
+ [[ ! -f targets/10.0.0.1.json ]]
+ mapfile -t source_configs
++ jq -r '.configs[] | "\(.config.site)/\(.config.device)"' targets/10.0.0.1.json
+ for i in "${!source_configs[@]}"
+ [[ misc/switch1.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch1.conf
+ for i in "${!source_configs[@]}"
+ [[ misc/switch3.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch3.conf
+ [[ true == true ]]
+ print 'Config JSON file used: targets/10.0.0.1.json'
+ [[ -n Config JSON file used: targets/10.0.0.1.json ]]
+ echo -en 'Config JSON file used: targets/10.0.0.1.json'
Config JSON file used: targets/10.0.0.1.json+ print 'Extracted config paths from JSON:'
+ [[ -n Extracted config paths from JSON: ]]
+ echo -en 'Extracted config paths from JSON:'
Extracted config paths from JSON:+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch1.conf'
+ [[ -n  - configs/misc/switch1.conf ]]
+ echo -en ' - configs/misc/switch1.conf'
 - configs/misc/switch1.conf+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch3.conf'
+ [[ -n  - configs/misc/switch3.conf ]]
+ echo -en ' - configs/misc/switch3.conf'
 - configs/misc/switch3.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports/json reports/objects
+ [[ -z 01 ]]
+ [[ -z false ]]
+ [[ -z 10.0.0.1 ]]
++ print 10.0.0.1
++ [[ -n 10.0.0.1 ]]
++ echo -en 10.0.0.1
++ sed -E 's/[[:space:]]+//g'
++ tr -d '\r'
+ target_address=10.0.0.1
+ [[ false == true ]]
+ export tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ tmp_fragments=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch1.conf 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ local config_file=configs/misc/switch1.conf
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ [[ ! -f configs/misc/switch1.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch1.conf ]]
++ stat -c%s configs/misc/switch1.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch1.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzI3MjM2ODA3MTAwNzAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzI3MjM2ODA3MTAwNzAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ local 'message=Loaded 4 config blocks'
+ print 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ echo -en 'Loaded 4 config blocks'
Loaded 4 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS='
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.31.255.254 255.255.255.0' 'interface Vlan10MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.1.2 255.255.255.0' 'interface Vlan20MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 192.168.1.10 255.255.255.0' 'object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo')
+ declare -a matched_objects
+ IFS='
'
+ [[ true == true ]]
+ message 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ local 'message=Loaded 1 config blocks'
+ print 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ echo -en 'Loaded 1 config blocks'
Loaded 1 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ restored_block=()
+ declare -a restored_block
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ local 'message=Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ print 'Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ echo -en 'Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
Serialized Line: object-group network Avengers-OfficeMTc0NzI3MjM2ODA3MTAwNzAwMAo description VLAN access layerMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzI3MjM2ODA3MTAwNzAwMAo/\n/g'
+ restored_block='object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Restored Configuration:
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch1.conf 'object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch1.conf
+ local 'restored_block=object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -z object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
[process_configs] Raw Block:
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Avengers-Office'
+ [[ -z object-group network Avengers-Office ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ awk '{$1=""; print substr($0,2)}'
+ type_value='network Avengers-Office'
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Avengers-Office'
+ [[ -n [process_configs] type     : network Avengers-Office ]]
+ echo -en '[process_configs] type     : network Avengers-Office'
[process_configs] type     : network Avengers-Office+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='object-group network Avengers-Office'
+ [[ -z object-group network Avengers-Office ]]
+ [[ object-group network avengers-office =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='description VLAN access layer'
+ [[ -z description VLAN access layer ]]
+ [[ description vlan access layer =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object 192.168.12.0 255.255.255.0'
+ [[ -z network-object 192.168.12.0 255.255.255.0 ]]
+ [[ network-object 192.168.12.0 255.255.255.0 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  3 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${entries[@]}"
+ print '  - network-object 192.168.12.0 255.255.255.0'
+ [[ -n   - network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '  - network-object 192.168.12.0 255.255.255.0'
  - network-object 192.168.12.0 255.255.255.0+ local matched_line
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Avengers-Office
++ jq -r --arg key Avengers-Office 'map(select(.match[]? | contains($key))) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc false 'map(select(.match[]? == $desc)) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object 192.168.12.0 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]'
+ [[ 2 -eq 1 ]]
++ jq -n --arg object object-group --arg type 'network Avengers-Office' --arg description false --argjson entries '[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]' --arg group Unclassified '{
                  object: $object,
                  type: $type,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
+ jq .
}'
{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Avengers-Office",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
++ jq -s --arg site configs/misc --arg device switch1.conf '{
              config: {
                site: ($site | gsub("^.*/"; "")),
                device: $device,
                objects: .
              }
            }'
+ wrapped_block='{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ local 'message=|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ print '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
|-----> Config Objects:
{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n {
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '{
  "config": {
    "site": "misc",
    "device": "switch1.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Avengers-Office",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ return 0
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch3.conf 10.0.0.1 targets/10.0.0.1.json /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ local config_file=configs/misc/switch3.conf
+ local target_pattern=10.0.0.1
+ local target_listing=targets/10.0.0.1.json
+ local json_output=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ [[ ! -f configs/misc/switch3.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch3.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch3.conf ]]
++ stat -c%s configs/misc/switch3.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch3.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch3.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch3.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch3.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0

interface Vlan2
 ip address 172.16.1.6 255.255.255.0

object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 10.0.0.1 255.255.255.0
interface Vlan2
 ip address 172.16.1.6 255.255.255.0
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzI3MjM2ODA3MTAwNzAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
Serialized Objects: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAointerface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAoobject-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzI3MjM2ODA3MTAwNzAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0
interface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0
object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0
interface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0
object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ local 'message=Loaded 3 config blocks'
+ print 'Loaded 3 config blocks'
+ [[ -n Loaded 3 config blocks ]]
+ echo -en 'Loaded 3 config blocks'
Loaded 3 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS='
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0' 'interface Vlan2MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 172.16.1.6 255.255.255.0' 'object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
+ matched_objects=('interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0' 'object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo')
+ declare -a matched_objects
+ IFS='
'
+ [[ true == true ]]
+ message 'Loaded 2 config blocks'
+ [[ -n Loaded 2 config blocks ]]
+ local 'message=Loaded 2 config blocks'
+ print 'Loaded 2 config blocks'
+ [[ -n Loaded 2 config blocks ]]
+ echo -en 'Loaded 2 config blocks'
Loaded 2 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ restored_block=()
+ declare -a restored_block
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0'
+ print 'Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en 'Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0'
Serialized Line: interface Vlan1MTc0NzI3MjM2ODA3MTAwNzAwMAo ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzI3MjM2ODA3MTAwNzAwMAo/\n/g'
+ restored_block='interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ true == true ]]
+ message 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ print 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
Restored Configuration:
interface Vlan1
 ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch3.conf 'interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch3.conf
+ local 'restored_block=interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='interface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -z interface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ print '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\ninterface Vlan1
 ip address 10.0.0.1 255.255.255.0'
[process_configs] Raw Block:
interface Vlan1
 ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=interface
++ awk '{$1=""; print substr($0,2)}'
+ type_value=Vlan1
+ [[ true == true ]]
+ print '[process_configs] object   : interface'
+ [[ -n [process_configs] object   : interface ]]
+ echo -en '[process_configs] object   : interface'
[process_configs] object   : interface+ print '[process_configs] type     : Vlan1'
+ [[ -n [process_configs] type     : Vlan1 ]]
+ echo -en '[process_configs] type     : Vlan1'
[process_configs] type     : Vlan1+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ [[ interface vlan1 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='ip address 10.0.0.1 255.255.255.0'
+ [[ -z ip address 10.0.0.1 255.255.255.0 ]]
+ [[ ip address 10.0.0.1 255.255.255.0 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  2 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - ip address 10.0.0.1 255.255.255.0'
+ [[ -n   - ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '  - ip address 10.0.0.1 255.255.255.0'
  - ip address 10.0.0.1 255.255.255.0+ local matched_line
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='ip address 10.0.0.1 255.255.255.0'
+ [[ -z ip address 10.0.0.1 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 10.0.0.1 255.255.255.0 ]]
+ local 'message=[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ print '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 10.0.0.1 255.255.255.0 ]]
+ echo -en '[process_configs] Matched: ip address 10.0.0.1 255.255.255.0'
[process_configs] Matched: ip address 10.0.0.1 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Vlan1
++ jq -r --arg key Vlan1 'map(select(.match[]? | contains($key))) | .[0].group'
+ group_val=Business-Unit-Networks
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ true == true ]]
+ message '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ local 'message=[process_configs] Group: Business-Unit-Networks'
+ print '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ echo -en '[process_configs] Group: Business-Unit-Networks'
[process_configs] Group: Business-Unit-Networks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'ip address 10.0.0.1 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "ip address 10.0.0.1 255.255.255.0"
]'
+ [[ 1 -eq 1 ]]
++ jq -n --arg object interface --arg description false --argjson entries '[
  "ip address 10.0.0.1 255.255.255.0"
]' --arg group Business-Unit-Networks '{
                  object: $object,
                  type: false,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ echo -en '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ jq .
{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ print '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
++ printf '%s\n' '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 10.0.0.1 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
++ jq -s --arg site configs/misc --arg device switch3.conf '{
              config: {
                site: ($site | gsub("^.*/"; "")),
                device: $device,
                objects: .
              }
            }'
+ wrapped_block='{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
} ]]
+ local 'message=|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ print '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
} ]]
+ echo -en '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
|-----> Config Objects:
{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ [[ -n {
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
} ]]
+ echo -en '{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "interface",
        "type": false,
        "description": "false",
        "entries": [
          "ip address 10.0.0.1 255.255.255.0"
        ],
        "group": "Business-Unit-Networks"
      }
    ]
  }
}'
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ local 'message=Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ print 'Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
+ [[ -n Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo ]]
+ echo -en 'Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo'
Serialized Line: object-group network Spider-NetMTc0NzI3MjM2ODA3MTAwNzAwMAo description Web access switchesMTc0NzI3MjM2ODA3MTAwNzAwMAo network-object host 10.0.0.1MTc0NzI3MjM2ODA3MTAwNzAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzI3MjM2ODA3MTAwNzAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzI3MjM2ODA3MTAwNzAwMAo/\n/g'
+ restored_block='object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Restored Configuration:
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 10.0.0.1 configs/misc/switch3.conf 'object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local target_pattern=10.0.0.1
+ local config_path=configs/misc/switch3.conf
+ local 'restored_block=object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -z object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\nobject-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
[process_configs] Raw Block:
object-group network Spider-Net
 description Web access switches
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='object-group network Spider-Net'
+ [[ -z object-group network Spider-Net ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=object-group
++ awk '{$1=""; print substr($0,2)}'
+ type_value='network Spider-Net'
+ [[ true == true ]]
+ print '[process_configs] object   : object-group'
+ [[ -n [process_configs] object   : object-group ]]
+ echo -en '[process_configs] object   : object-group'
[process_configs] object   : object-group+ print '[process_configs] type     : network Spider-Net'
+ [[ -n [process_configs] type     : network Spider-Net ]]
+ echo -en '[process_configs] type     : network Spider-Net'
[process_configs] type     : network Spider-Net+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='object-group network Spider-Net'
+ [[ -z object-group network Spider-Net ]]
+ [[ object-group network spider-net =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='description Web access switches'
+ [[ -z description Web access switches ]]
+ [[ description web access switches =~ ^description[[:space:]] ]]
+ continue
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ network-object host 10.0.0.1 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='network-object 192.168.12.0 255.255.255.0'
+ [[ -z network-object 192.168.12.0 255.255.255.0 ]]
+ [[ network-object 192.168.12.0 255.255.255.0 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  3 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - network-object host 10.0.0.1'
+ [[ -n   - network-object host 10.0.0.1 ]]
+ echo -en '  - network-object host 10.0.0.1'
  - network-object host 10.0.0.1+ for e in "${entries[@]}"
+ print '  - network-object 192.168.12.0 255.255.255.0'
+ [[ -n   - network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en '  - network-object 192.168.12.0 255.255.255.0'
  - network-object 192.168.12.0 255.255.255.0+ local matched_line
++ grep -E '(^|[^0-9.])10\.0\.0\.1([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='network-object host 10.0.0.1'
+ [[ -z network-object host 10.0.0.1 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ local 'message=[process_configs] Matched: network-object host 10.0.0.1'
+ print '[process_configs] Matched: network-object host 10.0.0.1'
+ [[ -n [process_configs] Matched: network-object host 10.0.0.1 ]]
+ echo -en '[process_configs] Matched: network-object host 10.0.0.1'
[process_configs] Matched: network-object host 10.0.0.1+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Spider-Net
++ jq -r --arg key Spider-Net 'map(select(.match[]? | contains($key))) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc false 'map(select(.match[]? == $desc)) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'network-object host 10.0.0.1' 'network-object 192.168.12.0 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]'
+ [[ 2 -eq 1 ]]
++ jq -n --arg object object-group --arg type 'network Spider-Net' --arg description false --argjson entries '[
  "network-object host 10.0.0.1",
  "network-object 192.168.12.0 255.255.255.0"
]' --arg group Unclassified '{
                  object: $object,
                  type: $type,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ jq .
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "object-group",
  "type": "network Spider-Net",
  "description": "false",
  "entries": [
    "network-object host 10.0.0.1",
    "network-object 192.168.12.0 255.255.255.0"
  ],
  "group": "Unclassified"
}'
++ jq -s --arg site configs/misc --arg device switch3.conf '{
              config: {
                site: ($site | gsub("^.*/"; "")),
                device: $device,
                objects: .
              }
            }'
+ wrapped_block='{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ local 'message=|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ print '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n |-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '|-----> Config Objects:\n{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
|-----> Config Objects:
{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ [[ -n {
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
} ]]
+ echo -en '{
  "config": {
    "site": "misc",
    "device": "switch3.conf",
    "objects": [
      {
        "object": "object-group",
        "type": "network Spider-Net",
        "description": "false",
        "entries": [
          "network-object host 10.0.0.1",
          "network-object 192.168.12.0 255.255.255.0"
        ],
        "group": "Unclassified"
      }
    ]
  }
}'
+ return 0
+ mkdir -p /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/json
+ export json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/json/10.0.0.1--MTc0NzI3MjM2.json
+ json_outfile=/var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/json/10.0.0.1--MTc0NzI3MjM2.json
+ [[ -s /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json ]]
+ jq -s --arg target 10.0.0.1 '{ target: $target, configs: . }' /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/fragments.json
+ final_outfile=reports/json/10.0.0.1.json
+ [[ ! -f reports/json/10.0.0.1.json ]]
+ mv /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ/json/10.0.0.1--MTc0NzI3MjM2.json reports/json/10.0.0.1.json
+ return 0
+ unset verbose debug
+ [[ -d /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ ]]
+ rm -rf /var/folders/vp/4k9xy96d7zx8lhmgrr4khsj80000gn/T/tmp.58DUBBVxKQ

{
  "target": "10.0.0.1",
  "configs": [
    {
      "config": {
        "site": "misc",
        "device": "switch1.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Avengers-Office",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf",
        "objects": [
          {
            "object": "interface",
            "type": false,
            "description": "false",
            "entries": [
              "ip address 10.0.0.1 255.255.255.0"
            ],
            "group": "Business-Unit-Networks"
          }
        ]
      }
    },
    {
      "config": {
        "site": "misc",
        "device": "switch3.conf",
        "objects": [
          {
            "object": "object-group",
            "type": "network Spider-Net",
            "description": "false",
            "entries": [
              "network-object host 10.0.0.1",
              "network-object 192.168.12.0 255.255.255.0"
            ],
            "group": "Unclassified"
          }
        ]
      }
    }
  ]
}
devops: network-resources (master *$=) $
