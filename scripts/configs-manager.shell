#!/usr/bin/env bash

## File: scripts/configs-manager.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__CONFIGS_MANAGE_SOURCED:-}" ]]; then return 0; fi;
readonly __CONFIGS_MANAGE_SOURCED=1;

## -------------------------------------------------------------------------- ##
## Function: configs-manager :: manage-configs ()
##
## Purpose:
##   Launches background parsing jobs for a batch of target IPs and monitors completion.
##
## Input:
##   None (uses global array: ${target_listing[@]})
##
## Behavior:
##   - Spawns a background job for each IP in `target_listing` using `parse_configs`.
##   - Tracks each job’s PID and associates it with the corresponding IP.
##   - Continuously monitors active jobs, filtering out completed ones.
##   - Waits until all parsing jobs are done before exiting.
##
## Logging:
##   - Logs job start metadata and PID-to-IP mapping to tracking log file.
##   - Optionally logs job completion (currently commented out).
##
## Notes:
##   - This function is always run synchronously — no nested async logic inside parse_configs.
##   - Designed to be called once per config batch within inner loop.
## -------------------------------------------------------------------------- ##

function manage_configs () {

    declare -a configs_jobs_pid=();          ## Array to hold the PIDs of background jobs
    declare -A configs_jobs2ips_mapping=();  ## Associative array to map PIDs to IPs

    ip_index=0;
    local total_ips=${#target_listing[@]};

    #### -----------------------------------------------------------------------
    local parse_configs__logfile="${TMP_DIR}/tools-listings--parse-configs.logs";
    :> "${parse_configs__logfile}";

    while (( ip_index < total_ips )); do
      ip_addr="${target_listing[ip_index++]}";
      padded_index="$(
        printf "%0${#total_ips}d" "${ip_index}"
      )";
      (
        parse_configs "${ip_addr}" \
                      "${padded_index}" \
                      "${parse_configs__logfile}" \
        ;
      ) &
      job_pid=$!;
      configs_jobs_pid+=( "${job_pid}" );
      configs_jobs2ips_mapping["$job_pid"]="${ip_addr}";
      # if [[ "${verbose}" == true ]]; then
      #   {
      #     message "[INFO] Started Managed-Configs (${job_pid}): ${ip_addr}";
      #   } >> "${actions_logfile:-/dev/null}";
      # fi;
    done;

    ## Monitor background jobs
    while (( ${#configs_jobs_pid[@]} > 0 )); do
      valid_configs_jobs_pid=();
      for pid in "${configs_jobs_pid[@]}"; do
        if ! kill -0 "$pid" 2>/dev/null; then
                ip="${configs_jobs2ips_mapping[$pid]}"
                # message "[INFO] Completed ($pid): ${ip}" >> "${actions_logfile:-/dev/null}";
          else  valid_configs_jobs_pid+=( "$pid" );
        fi;
      done;
      configs_jobs_pid=( "${valid_configs_jobs_pid[@]}" );
      sleep ${delaying_factor};  ## Short delay to prevent excessive CPU usage
    done;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        message "Background Jobs -> Managed Configs:";
        message "PID   | IP Address (${#configs_jobs2ips_mapping[@]})";
        message "-------------------------";
        for pid in "${!configs_jobs2ips_mapping[@]}"; do
          printf "%-5s | %s\n" "${pid}" "${configs_jobs2ips_mapping[$pid]}";
        done;
        newline;
      } >> "${actions_logfile:-/dev/null}";
    fi;

    # #### -----------------------------------------------------------------------
    # if [[ "${verbose}" == true ]]; then
    #   {
    #     print_file "${parse_configs__logfile:-/dev/null}";
    #   } >> "${actions_logfile:-/dev/null}";
    # fi;

    return 0;
}; alias manage-configs='manage_configs';

## -------------------------------------------------------------------------- ##
## Function: configs-manager :: parse-configs ()
##
## Purpose:
##   Executes the `parse-configs.shell` script to process a single IP address.
##   Dynamically assembles CLI arguments based on current environment settings.
##
## Inputs:
##   $1 = IP address to parse
##   $2 = Padded index used for output identification and job tracking
##
## Behavior:
##   - Constructs the execution command for `parse-configs.shell` with flags:
##     --configs, --ip-addr, --index, --matrix, --reports, --file-ext
##   - Conditionally appends --classify, --validate, --verbose, --debug
##   - Redirects all output to a log file if logging is enabled.
##   - Executes the command synchronously (no nested backgrounding).
##
## Output:
##   - Log output written to: ${logs_location}/jobs/${ip_addr}.job
##   - On failure, error is logged to: ${logs_location}/errors/errors.log
##
## Notes:
##   - Designed to run as a background task from `manage_configs()`.
##   - Must remain synchronous to preserve PID tracking integrity.
## -------------------------------------------------------------------------- ##

function parse_configs () {

    local ip_addr="${1}";
    local padded_index="${2}";

    ## Recording the generated_configslist actions
    local target_logfile="${3:-${TMP_DIR:-/tmp}/tools-listings--parse-configs--${ip_addr}.log}";

    declare -a execute=(
      configs_parser
      --configs="${configs_dirpath}"
      --ip-addr="${ip_addr}"
      --index="${padded_index}"
      --matrix="${matrix_filename}"
      --reports="${reports_folder}"
      --file-ext="$(
        IFS=,; print "${file_extensions[*]}"
      )"
    );

    [[ "${classify_targets}" == true ]] && execute+=( --classify );
    [[ "${validate_address}" == true ]] && execute+=( --validate );
    [[ "${verbose}" == true ]] && execute+=( --verbose );
    [[ "${verbose}" == true ]] && execute+=( --debug );

    #### -----------------------------------------------------------------------
    ## Execute and propagate exit status
    if [[ "${verbose}" == true ]]; then
      {
        message "Parsing Configs: [ ${ip_addr} ]";
        # for item in "${execute[@]}"; do
        #   message "\t\t${item}";
        # done;
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;

    local status=0;
    mkdir -p "${logs_location}/jobs" 2>/dev/null || true;
    jobs_logfile="${logs_location}/jobs/${ip_addr}.job";
    $( which bash ) -x "${execute[@]}" 2>&1 > "${jobs_logfile}";

    if (( status != 0 )); then
            {
              warning "Failed to process IP [ ${ip_addr} ] configs :: exit ${status}";
            } >> "${target_logfile:-/dev/null}";
      else  {
              message "Parsed IP Address: [ ${ip_addr} ] configs :: exit ${status}";
            } >> "${target_logfile:-/dev/null}";
    fi;

    return 0;
}; alias parse-configs='parse_configs';

#------------------------------------------------------------------------------#
