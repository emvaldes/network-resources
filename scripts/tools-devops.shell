#!/usr/bin/env bash

## File: scripts/tools-devops.shell

## Purpose: Sharing common features across scripts.
##          Utility library of shared shell functions and environment exports
##    Note: Used by both parse-listings.shell and parse-configs.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__TOOLS_DEVOPS_SOURCED:-}" ]]; then return 0; fi;
readonly __TOOLS_DEVOPS_SOURCED=1;

## Require Bash 4.0+ for associative array support (only runs once)
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "Error: Bash 4.0 or newer is required. Current version: ${BASH_VERSINFO[*]}";
  exit 1;
fi;

#------------------------------------------------------------------------------#
## Output Utilities: Print N newlines (default: 1)
function newline () {
  local count="${1:-1}";
  for ((i = 0; i < count; i++)); do echo; done;
};

#------------------------------------------------------------------------------#
## Output Utilities: Print a message without newline unless specified
function print () {
  [[ -n ${1:-} ]] && echo -en "${1}" || return 0;
};

#------------------------------------------------------------------------------#
## Logging Utilities: Log Information (info)
function log_info () {
  [[ -n ${1:-} ]] || return 0;
  print "[INFO]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}"; newline;
}; alias log-info='log_info';

#------------------------------------------------------------------------------#
## Logging Utilities: Log Warnings
function log_warn () {
  [[ -n ${1:-} ]] || return 0;
  print "[WARN]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2; newline;
}; alias log-warn='log_warn';

#------------------------------------------------------------------------------#
## Logging Utilities: Log Errors
function log_error () {
  [[ -n ${1:-} ]] || return 0;
  print "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2; newline;
}; alias log-error='log_error';

#------------------------------------------------------------------------------#
## Output Utilities: Print an error message in consistent format
function error_message () {
  [[ -n ${1:-} ]] && local message="${1}" || return 0;
  print "\nError: ${message}"; newline;
}; alias error-message='error_message';

#------------------------------------------------------------------------------#
## Exit script with error message and exit code
function exit_error () {
  local msg="${1:-Unspecified fatal error}";
  local code="${2:-1}";
  log_error "${msg}";
  exit "${code}";
}; alias exit-error='exit_error';

#------------------------------------------------------------------------------#
## Package Installation: Detect Platform
function detect_platform () {
    if [[ "$OSTYPE" == "darwin"* ]]; then echo "macos";
      elif [[ -f /etc/alpine-release ]]; then echo "alpine";
      elif [[ -f /etc/debian_version ]]; then echo "debian";
      elif [[ -f /etc/redhat-release ]]; then echo "rhel";
      else echo "unknown";
    fi;
    return 0;
}; alias detect-platform='detect_platform';

#------------------------------------------------------------------------------#
## Package Installation: Install Packages
function install_packages () {
    local os="$1";
    case "$os" in
      macos)  echo "[+] Detected macOS (requires Homebrew)";
              brew install jq gnu-sed coreutils moreutils grep;
      ;;
      debian) echo "[+] Detected Debian/Ubuntu";
              sudo apt-get update -y;
              sudo apt-get install -y jq sed grep coreutils findutils util-linux moreutils less;
      ;;
      rhel)   echo "[+] Detected RHEL/CentOS/Fedora";
              sudo yum install -y epel-release;
              sudo yum install -y jq sed grep coreutils findutils util-linux moreutils less;
      ;;
      alpine) echo "[+] Detected Alpine Linux";
              sudo apk update;
              sudo apk add jq sed grep coreutils findutils util-linux moreutils less;
      ;;
      *)  echo "[-] Unsupported OS type: $os";
          exit 1;
      ;;
    esac;
    echo "Dependencies installed for ${os}";
    return 0;
}; alias install-packages='install_packages';

#------------------------------------------------------------------------------#
## Package Installation: Installed
function installed () {
  command -v "$1" &>/dev/null;
  return 0;
};

#------------------------------------------------------------------------------#
## Package Installation: Install Missing
function install_missing () {
    local os="$1";
    local pkg_cmd="";
    local -A pkg_map=(
      [jq]="jq"
      [sed]="sed"
      [grep]="grep"
      [find]="find"
      [column]="moreutils"  ## for Debian/Ubuntu
      [less]="less"
      [base64]="coreutils"
    );
    case "$os" in
      macos)   pkg_cmd="brew install";;
      debian)  pkg_cmd="sudo apt-get install -y";;
      rhel)    pkg_cmd="sudo yum install -y";;
      alpine)  pkg_cmd="sudo apk add";;
      *)       echo "[-] Unsupported OS"; exit 1;;
    esac;
    for bin in "${!pkg_map[@]}"; do
      if ! installed "${bin}"; then
        echo "[+] Installing ${pkg_map[$bin]} (for ${bin})";
        ${pkg_cmd} "${pkg_map[$bin]}";
      fi;
    done;
    return 0;
}; alias install-missing='install_missing';

#------------------------------------------------------------------------------#
## Displaying Built-In Help
function display_help () {
    local script_name="${1}";
    local mode="${2}";
    local -a help_lines=();
    local indent="    ";
    local padding="$( printf '%*s' ${#script_name} ' ' )";
    ## Header
    help_lines+=( "Usage: ${script_name} [OPTIONS]${nl}" );
    ## Shared Options
    help_lines+=( "Options:${nl}" );
    help_lines+=( "  -g, --classify     Provide classification based on matrix.json" );
    help_lines+=( "  -c, --configs      Path to configuration files ( default: ./configs )" );
    help_lines+=( "  -x, --file-ext     Comma-separated list of config file extensions ( e.g., cfg,conf,cnf )" );
    help_lines+=( "  -m, --matrix       Path to translation matrix ( matrix.json )" );
    help_lines+=( "  -r, --reports      Folder to store generated reports ( default: reports )" );
    help_lines+=( "  -v, --validate     Validating IP/CIDR Block addresses" );
    ## Script-Specific Options
    case "${mode}" in
      listings )
        help_lines+=( "  -l, --interval     Interval ( in seconds ) between job dispatch checks [default: 0.1]" );
        help_lines+=( "  -i, --ips-list     File containing list of target IP addresses" );
        help_lines+=( "  -j, --jobs         Count of concurrent jobs to run in parallel${nl}" );
        help_lines+=( "  -o, --logging      Enabling Logging-operations (files)${nl}" );
        ## Examples for listings
        help_lines+=( "Examples:${nl}" );
        help_lines+=( "${script_name} --interval=0.05 \\" );
        help_lines+=( "${padding} --ips-list=\"ips.list\" \\" );
        help_lines+=( "${padding} --jobs=10 \\" );
        ;;
      configs )
        help_lines+=( "  -n, --index        Padded job index ( provided by controlling script )" );
        help_lines+=( "  -i, --ip-addr      Target IP address to scan for in configurations${nl}" );
        ## Examples for configs
        help_lines+=( "Examples:${nl}" );
        help_lines+=( "${script_name} --index=\"  --> \" \\" );
        help_lines+=( "${padding} --ip-addr=\"10.0.0.1\" \\" );
        ;;
    esac;
    ## Flags
    help_lines+=( "${padding} --configs=\"configs\" \\" );
    help_lines+=( "${padding} --file-ext=\"cfg\" \\" );
    help_lines+=( "${padding} --matrix=\"matrix.json\" \\" );
    help_lines+=( "${padding} --reports=\"reports\" ;${nl}" );
    help_lines+=( "Flags:${nl}" );
    help_lines+=( "  --help             Show this help message and exit" );
    help_lines+=( "  --debug            Enable debug mode with trace output" );
    help_lines+=( "  --dry-run          Print actions without executing them" );
    help_lines+=( "  --verbose          Enable verbose output${nl}" );
    ## Output
    newline;
    for line in "${help_lines[@]}"; do
      print "${indent}${line}"; newline;
    done;
    return 0;
}; alias display-help='display_help_generic'

#------------------------------------------------------------------------------#
## Strips the base config path prefix from a full path to normalize output
function relative_configpath () {
    local full_path="${1}";
    local prefix="${configs_dirpath%/}/";
    print "$( sed "s|${prefix}||g" <<< "${full_path}" )";
    return 0;
}; alias relative-configpath='relative_configpath';

#------------------------------------------------------------------------------#
## Validating IPs & CIDR Block addresses
function validate_address () {
    ## IP Address (CIDR-aware) regex:
    local ip_cidr_regex='^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$';
    if [[ "${target_address}" =~ ${ip_cidr_regex} ]]; then
            ## Normalize each segment and validate
            local -a segments=(
              "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}" "${BASH_REMATCH[4]}"
            );
            local cidr="${BASH_REMATCH[6]:-}";
            ## Validate CIDR before building target_address
            if [[ -n "${cidr}" ]]; then
              if ! [[ "${cidr}" =~ ^[0-9]+$ ]] || (( cidr < 0 || cidr > 32 )); then
                [[ "${debug}" == true ]] && \
                   error_message "Invalid CIDR mask '/${cidr}' in ${target_address}";
                return 3;
              fi;
            fi;
            for i in "${!segments[@]}"; do
              segment="$(
                print "${segments[$i]}" | sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
              )";
              if ! [[ "${segment}" =~ ^[0-9]+$ ]] || (( segment < 0 || segment > 255 )); then
                [[ "${debug}" == true ]] && \
                   error_message "Invalid IP segment after normalization (${segment}) in ${target_address}";
                return 4;
              fi;
              segments[$i]="${segment}";
            done; local segments="${segments[*]}";
            ## Reconstruct normalized IP with CIDR (only if valid)
            ## local fixed_address="${segments[0]}.${segments[1]}.${segments[2]}.${segments[3]}";
            local fixed_address="${segments// /.}";
            [[ -n "${cidr}" ]] && fixed_address+="/${cidr}";
            if [[ "${target_address}" != "${fixed_address}" ]]; then
                [[ "${verbose}" == true ]] && \
                   error_message "IP address was corrected to '${fixed_address}'";
                target_address="${fixed_address}";
              # else  [[ "${verbose}" == true ]] && \
              #          print "${target_index:-}Valid IP Address: ${target_address}"; newline;
            fi;
            ## Prompt only if valid CIDR and not /32
            if [[ -n "${cidr}" && "${cidr}" -lt 32 ]]; then
              local confirmation='';
              read -t 3 -p "Proceed with CIDR block [ /${cidr} ]? (type 'n' to abort): " confirmation || true;
              newline;
              if [[ "${confirmation}" =~ ^(N|n)$ ]]; then
                      [[ "${verbose}" == true ]] && \
                         print "Skipping CIDR block: ${target_address}"; newline;
                      return 5;
                elif [[ -z "${confirmation}" ]]; then
                      [[ "${verbose}" == true ]] && \
                         print "Auto-continue with CIDR block: ${target_address}"; newline;
                else  [[ "${verbose}" == true ]] && \
                         print "Proceeding with CIDR block: ${target_address}"; newline;
              fi;
            fi;
      else  [[ "${debug}" == true ]] && \
               error_message "Invalid IP or CIDR format: ${target_address}";
            return 6;
    fi;
    return 0;
}; alias validate-address='validate_address';

#------------------------------------------------------------------------------#

## POSIX locale standard
export LC_ALL=C;
export nl="\n";

local_state_dir=".local";
mkdir -p ${local_state_dir}/{errors,jobs,stats};
export stats_folder="${local_state_dir}/stats/";

export reports_logsfile="${stats_folder}/reports.jobs";
export started_logsfile="${stats_folder}/started.jobs";
export success_logsfile="${stats_folder}/success.jobs";
export targets_logsfile="${stats_folder}/targets.jobs";

export divisor="$(
  date +%s%N | base64 | tr -dc 'a-zA-Z0-9'
)";
print "DEBUG: divisor = '${divisor}'";

#------------------------------------------------------------------------------#
