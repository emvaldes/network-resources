#!/usr/bin/env bash

## File: scripts/parse-configs.shell

## Purpose: Parse a single IP and output matched configurations to reports/<ip>.json
## Requirements: Bash v4+ and GNU utilities (jq, find, grep, sed, etc.)

## ./scripts/parse-configs.shell --configs="configs" \
##                               --ip-addr="10.0.0.1" \
##                               --index="1" \
##                               --matrix="matrix.json" \
##                               --reports="reports" \
##                               --file-ext="cfg,conf" ;

set -euo pipefail  # Strict mode: exit on error, undefined var use, and pipeline failure
# set -x;          # Enable for execution tracing/debugging

## POSIX locale standard
export LC_ALL=C   # Ensure consistent sorting and character handling (POSIX-compliant)

# Create a secure, temporary working directory (auto-cleaned at script exit)
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

#------------------------------------------------------------------------------#

# Load common utility functions (logging, platform detection, etc.)
source ./scripts/tools-devops.shell;
source ./scripts/tools-configs.shell;

#------------------------------------------------------------------------------#
# Function: main
# Entry point of this script

function main () {
    ## tracking_process ${FUNCNAME} "${@}";
    declare -a file_extensions=();
    oIFS="${IFS}";

    ## Process command-line arguments and map them to local variables
    for xitem in "${@}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";

      #### ---------------------------------------------------------------------
      ## Match accepted arguments
      [[ $key =~ ^(classify|g)$ ]] && export classify_targets=true;
      [[ $key =~ ^(file-ext|x)$ ]] && file_extensions+=(
        $( print "${value}" | tr ':,;\n ' '\n' )
      );
      [[ $key =~ ^(configs|c)$ ]] && export configs_dirpath="${value}";
      [[ $key =~ ^(index|n)$ ]] && local target_index="${value}";
      [[ $key =~ ^(ip-addr|i)$ ]] && local target_address="${value}";
      [[ $key =~ ^(logs|o)$ ]] && export enable_logging=true;
      [[ $key =~ ^(matrix|m)$ ]] && local matrix_filename="${value}";
      [[ $key =~ ^(reports|r)$ ]] && local reports_folder="${value}";
      [[ $key =~ ^(validate|v)$ ]] && local validate_address=true;

      #### ---------------------------------------------------------------------
      ## Special options
      [[ $key == "help" ]] && local script_helper=true;
      [[ $key == "debug" ]] && export debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && export verbose=true;
    done; IFS="${oIFS}";

    #### -----------------------------------------------------------------------
    ## Set default values if not supplied
    [[ -z ${debug:-} ]] && export debug=false;
    [[ -z ${verbose:-} ]] && export verbose=false;

    #### -----------------------------------------------------------------------
    ## Display usage help if requested
    if [[ ${script_helper:-} == true ]]; then
      display_help "${script_name}" "configs";
      exit 0;
    fi;

    #### -----------------------------------------------------------------------
    ## Enabling IP/CIDR Blocks Group Classification
    [[ -z ${classify_targets:-} ]] && export classify_targets=false;

    #### -----------------------------------------------------------------------
    ## Target Configurations (file-extensions):
    ## Set default file extensions if none provided
    if [[ -z ${file_extensions+x} || ${#file_extensions[@]} -eq 0 ]]; then
      declare -a file_extensions=( cfg conf cnf );
    fi;

    #### -----------------------------------------------------------------------
    ## Processing Target Configurations (from JSON input only)
    export configs_dirpath="${configs_dirpath:-configs}";
    declare -ga source_configs=();
    local target_configlist_json="targets/${target_address%%/*}.json";

    if [[ ! -f "${target_configlist_json}" ]]; then
      [[ "${verbose}" == true ]] && \
         error_message "Required config list not found: ${target_configlist_json}";
      return 3;
    fi;

    mapfile -t source_configs < <(
      jq -r '.configs[] | "\( .config.site )/\( .config.device )"' "${target_configlist_json}"
    );

    # Patch: Prepend configs_dirpath if not already absolute
    for i in "${!source_configs[@]}"; do
      [[ "${source_configs[$i]}" != "${configs_dirpath}/"* ]] && \
      source_configs[$i]="${configs_dirpath}/${source_configs[$i]}";
    done;
    # [[ "${verbose}" == true ]] && \
    #    print "Using precomputed config list: ${target_configlist_json}";
    if [[ "${verbose}" == true ]]; then
      print "Config JSON file used: ${target_configlist_json}";
      print "Extracted config paths from JSON:";
      for cfg in "${source_configs[@]}"; do
        print " - ${cfg}";
      done;
      newline;
    fi;

    #### -----------------------------------------------------------------------
    ## Processing Custom/Default the Translation-Matrix (source):
    ## Load and validate translation matrix (used for grouping logic)
    local matrix_filename="${matrix_filename:-matrix.json}";
    if [[ ! -f "${matrix_filename}" ]]; then
            [[ "${verbose}" == true ]] && \
               error_message "Project Source Matrix-Configs file not found: ${matrix_filename}";
            return 7;
      elif  ! jq -e 'length > 0' "${matrix_filename}" &>/dev/null; then
            [[ "${verbose}" == true ]] && \
               error_message "Matrix file is missing, invalid, or empty: ${matrix_filename}";
            return 8;
      else  export matrix_configs="$( cat "${matrix_filename}" )";
    fi;

    #### -----------------------------------------------------------------------
    ## Custom/Default reports folder:
    export reports_folder="${reports_folder:-reports}";
    mkdir -p ${reports_folder}/{json,objects};

    #### -----------------------------------------------------------------------
    ## Presetting Target-Index Marker
    [[ -z ${target_index:-} ]] && target_index='';

    #### -----------------------------------------------------------------------
    ## Validating IP Addresses (Skipping?)
    [[ -z ${validate_address:-} ]] && export validate_address=false;
    ## Target IP Address (required):
    if [[ -z "${target_address:-}" ]]; then
            [[ "${debug}" == true ]] && \
               error_message "No IP address provided.";
            return 2;
      else  target_address="$(
              print "${target_address}" | sed -E 's/[[:space:]]+//g' | tr -d '\r'
            )";
            ## Validating Target-Address (IP/CIDR):
            if [[ ${validate_address} == true ]]; then
              validate_address;
            fi;
    fi;

    #### -----------------------------------------------------------------------
    # export tmp_json="${TMP_DIR}/partial.json";
    export tmp_fragments="${TMP_DIR}/fragments.json";
    for cfg_file in "${source_configs[@]}"; do
      extract_configs "${cfg_file}" \
                      "${target_address}" \
                      "${target_configlist_json}" \
                      "${tmp_fragments}";
    done;

    #### -----------------------------------------------------------------------
    ## Ensure batch output subdirectory exists
    mkdir -p "${TMP_DIR}/json";

    ## Create a temporary batch-specific output file for this IP
    export json_outfile="${TMP_DIR}/json/${target_address}--${batch_id}.json";

    if [[ -s "${tmp_fragments}" ]]; then

      jq -s --arg target "${target_address}" \
             '{ target: $target, configs: . }' \
      "${tmp_fragments}" > "${json_outfile}";
      # print_file "${json_outfile}";

      #### ---------------------------------------------------------------------
      ## Merge batch result into persistent output for this IP
      tmp_merged="$( mktemp )";
      local final_outfile="${reports_folder}/json/${target_address}.json";
      local jq_merge_expr=$'{
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects += $cfg.objects
                else . end
              )
            else . + [ $cfg ] end
          ))
      }';
      if [[ -f "${final_outfile}" ]]; then
              jq -s "${jq_merge_expr}" \
                    "${final_outfile}" \
                    "${json_outfile}" > "${tmp_merged}";
        else  jq -s "${jq_merge_expr}" \
                    "${json_outfile}" > "${tmp_merged}";
      fi;
      mv "${tmp_merged}" "${final_outfile}" && \
      rm -f "${json_outfile}";

    fi;

    return 0;
}; alias parse-configs='main';

#------------------------------------------------------------------------------#

declare -gA matched_blocks_byfile=();
export script_name="${0}";

if [[ ${#@} -ge 1 && "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  main "${@}";
        # newline; print "Done."; newline 2;
fi;

unset verbose debug;

#------------------------------------------------------------------------------#
