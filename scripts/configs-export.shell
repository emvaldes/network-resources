#!/usr/bin/env bash

## File: scripts/configs-export.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__CONFIGS_EXPORT__:-}" ]]; then exit 0; fi;
readonly __CONFIGS_EXPORT__=1;

## -------------------------------------------------------------------------- ##
## Function: configs-export :: generate-csvoutput ()
##
## Purpose:
##   Converts structured per-IP JSON reports into a single unified CSV file.
##   Extracts all defined fields dynamically from each matching config object.
##
## Input:
##   None (operates on all *.json files under ${reports_location}/<ip>/<ip>.json)
##
## Output:
##   Generates sorted CSV at ${output_csv}, with columns in fixed order:
##     target, site, device, vendor, model, version, domain, hostname,
##     object, type, items_0, partner, description, group
##
## Method:
##   - Defines fieldâ†’expression mapping in a single array.
##   - Builds CSV header and jq transformation dynamically from mapping.
##   - Applies fallback values (e.g., "none") for missing fields.
##   - Sorts output by: target, site, device, object.
##
## Notes:
##   - Uses a temporary file to build unsorted content before final sort.
##   - Logs each processed JSON file to stderr for traceability.
## -------------------------------------------------------------------------- ##

function generate_csvoutput () {

    local temporary_output="$( mktemp )";  ## Temporary file for accumulating unsorted CSV rows

    ## Ensure JSON directory exists and contains files
    if [[ ! -d "${reports_location}" ]]; then
      warning "Missing ${reports_location}, cannot generate CSV.";
      return 10;
    fi;

    ## Define field mappings in fixed order (header=jq_expr)
    ## Each entry maps a CSV column name to a jq expression
    ## - All expressions are expanded with // fallback unless already specified
    ## - Preserves strict order in both CSV header and output

    local -a output_structure=(
      'target=$target'
      'site=.site'
      'device=.device'
      'vendor=.specs.vendor'
      'model=.specs.model'
      'version=.specs.version'
      'domain=.specs.domain'
      'hostname=.specs.hostname'
      'object=$obj.object'
      'type=$obj.type'
      'items_0=$obj.items[0]'
      'partner=$obj.partner'
      'description=$obj.description'
      'group=$obj.group'
    );

    ## Build CSV header and jq transformation dynamically
    local csv_header="";
    local parameters="";

    for item in "${output_structure[@]}"; do
      local index="${item%%=*}";
      local value="${item#*=}";
      csv_header+="${index},";
      [[ "$value" =~ '//' ]] || value="${value} // \"none\"";
      parameters+="${value}, ";
    done;

    ## Trim trailing delimiters from header and expression list
    csv_header="${csv_header%,}";
    parameters="${parameters%, }";

    ## Process all per-IP JSON files in ./reports/<ip>/<ip>.json
    find "${reports_location}" \
      -mindepth 2 -maxdepth 2 \
      -type f -name '*.json' | \
    sort | \
    while read -r json; do
      message "Processing ${json}" >&2;

      ## Generate jq transformation block per file
      ## - Binds .target into $target
      ## - Iterates over each config and object entry
      ## - Extracts only defined fields into a CSV row

      local json2csv_transformation="
        .target as \$target
        | .configs[]
        | select( .objects != null and ( .objects | type == \"array\" and length > 0 ) )
        | .objects[] as \$obj
        | [ ${parameters} ]
        | @csv
      ";

      ## Execute jq and append to CSV buffer
      jq --exit-status --raw-output "${json2csv_transformation}" "${json}" \
      >> "${temporary_output}" || \
      message "[WARN] Failed CSV append for ${json}" >&2;

    done;

    ## Finalize sorted CSV with header and ordered data rows
    {
      echo "${csv_header}";
      sort -t',' -k1,1 -k2,2 -k3,3 -k4,4 "${temporary_output}";
    } > "${output_csv}" && rm -f "${temporary_output}";

    return 0;
}; alias generate-csvoutput='generate_csvoutput';

#------------------------------------------------------------------------------#
