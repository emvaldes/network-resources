#!/usr/bin/env bash

## File: scripts/configs-extract.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__CONFIGS_EXTRACT__:-}" ]]; then exit 0; fi;
readonly __CONFIGS_EXTRACT__=1;

#------------------------------------------------------------------------------#

## Load configurations obj2json module
source ./scripts/configs-obj2json.shell

## -------------------------------------------------------------------------- ##
## Function: configs_extract ()
##
## Purpose:
##   Parses a given configuration file, extracts all objects containing a target IP,
##   and writes structured per-object metadata into a JSON fragments file.
##
## Inputs:
##   $1 = Full path to the configuration file
##   $2 = Target IP address (used as search pattern)
##   $3 = JSON fragments output file (collector for wrapped objects)
##   $4 = Unused (was originally a named array output; logic now internalized)
##
## Workflow:
##   - Reads and sanitizes the full config file (removes blank lines, comments, etc.)
##   - Splits config into logical blocks (using `${divisor}` as the delimiter)
##   - Restores the blocks into newline-separated format
##   - Filters blocks containing the target IP
##   - Writes matched config blocks to `${reports_location}/<ip-address>/<device_location>/<device-config>.<file-extension>`
##   - Processes each matched block with `configs_obj2json` to extract metadata
##   - Wraps extracted objects under `{ device_location, device_config, objects[] }` structure
##   - Appends each structured result to the final JSON fragment output file
##
## Output:
##   - Structured per-config JSON entries written to $3
##   - Raw matched blocks written to `${reports_location}/<ip-address>/<device-config>/<device-config>.<file-extension>`
##
## Notes:
##   - Duplicate blocks are skipped via flat-string comparison.
##   - Preserves traceability and grouping by device-location/device-config.
##   - Designed to run synchronously per config file, called from `parse-configs`.
## -------------------------------------------------------------------------- ##

function configs_extract () {

    ## tracking_process ${FUNCNAME} "${@}";
    oIFS="${IFS}";

    ## Process command-line arguments and map them to local variables
    for xitem in "${@}"; do

      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";

      #### ---------------------------------------------------------------------
      ## Match accepted arguments
      [[ $key =~ ^(config|c)$ ]] && export config_filename="${value}";
      [[ $key =~ ^(search|s)$ ]] && local target_pattern="${value}";
      [[ $key =~ ^(listing|g)$ ]] && local target_listing="${value}";
      [[ $key =~ ^(output|o)$ ]] && local json_output="${value}";
      [[ $key =~ ^(logger|l)$ ]] && local target_console="${value}";

      #### ---------------------------------------------------------------------
      ## Special options
      [[ $key == "debug" ]] && export debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && export verbose=true;

    done; IFS="${oIFS}";

    #### -----------------------------------------------------------------------
    ## Set default values if not supplied
    [[ -z ${debug:-} ]] && export debug=false;
    [[ -z ${dry_run:-} ]] && dry_run=false;
    [[ -z ${verbose:-} ]] && export verbose=false;

    #### -----------------------------------------------------------------------
    if [[ -z "${target_console:-}" ]]; then
      local target_console="${TMP_DIR:-/tmp}/configs_extract--${ip_addr}.log";
      touch "${target_console}";
    fi;
    # touch "${target_console}";  ## Clear the log file if it exists

    local target_console="${console_location}/configs-extract.console";
    # message "Configs-Obj2JSON (logger): ${target_console}" >> "${target_console}";

    #### -----------------------------------------------------------------------
    local target_object="${TMP_DIR}/$(
      basename "${config_filename}"
    ).objects";
    :> "${target_object}";

    #### -----------------------------------------------------------------------
    ## Full file ingestion and normalization

    # mapfile -t imported_content < <(
    #   sed '/^\s*$/d' "${reports_location}/${target_pattern}/${config_filename}"
    # );
    mapfile -t imported_content < <(
      sed '/^\s*$/d' "${config_filename}"
    );

    message "Divisor: [${divisor}]" | cat -vet;
    if [[ "${verbose}" == true ]]; then
      {
        message "Imported Configuration(s): ";
        newline;
        for object in "${imported_content[@]}"; do
          message "${object}";
        done | cat -n;
        # newline;
      } ## >> "${target_console:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    local configs_obj2json__script="configs-obj2json";

    local obj2json_location="${jobs_location}/${configs_obj2json__script}/${target_pattern}";
    mkdir -p "${obj2json_location}";

    local cfg_basename="$( basename "${config_filename}" )";
    local logging_filename="${cfg_basename%.*}";

    #### -----------------------------------------------------------------------
    ## Reconstruct Fortinet blocks: split each config...end block with multiple edits
    local -a expanded_content=();
    for block in "${imported_content[@]}"; do
      if [[
                  "${block}" =~ ^config[[:space:]] && \
                  "${block}" =~ $'\n'edit[[:space:]]
                ]]; then
              ## Preserve original header and footer
              local header="$(
                      sed -nE '/^config[[:space:]]/p' <<< "${block}"
                    )";
              local footer="$(
                      sed -nE '/^end[[:space:]]*$/p' <<< "${block}"
                    )";
              ## Split into sub-blocks per edit...next
              local IFS=;
              while read -r sub; do
                [[ -z "${sub//[[:space:]]/}" ]] && continue
                expanded_content+=( "${header}"$'\n'"${sub}"$'\n'"${footer}" );
              done < <(
                awk '/^[[:space:]]*edit /, /^[[:space:]]*next/ { print }' <<< "${block}" | \
                awk -v RS='next' '{ gsub(/\n+$/, "", $0); print $0 "\nnext" }'
              );
        else  expanded_content+=( "${block}" );
      fi;
    done;

    ## Replace imported_content with reconstructed array
    imported_content=("${expanded_content[@]}")

    #### -----------------------------------------------------------------------
    ## Deserializing imported_content:
    for serialized_object in "${imported_content[@]}"; do

      # #### -----------------------------------------------------------------------
      # if [[ "${verbose}" == true ]]; then
      #   {
      #     newline;
      #     message "Serialized Line: ${serialized_object}";
      #   } ## >> "${target_console:-/dev/null}";
      # fi;

      local rel_path="${config_filename#${reports_location}/${target_address}/}";  ## e.g., cisco/perimeter-fw1.cfg
      local device_location="${rel_path%%/*}";   ## -> location
      local device_filename="${rel_path##*/}";   ## -> device

      ## Construct output path: ${reports_location}/<ip-address>/<location>/<device>.<ext>
      local objects_dir="${reports_location}/${target_address}/${device_location}";
      local objects_file="${objects_dir}/${device_filename}";

      local configs_obj2json__console="${TMP_DIR}/${configs_obj2json__script}";
            configs_obj2json__console+="--${target_address}--${device_location}--${device_filename%.*}.console";

      local configs_obj2json__logger="${TMP_DIR}/${logging_filename}";

      configs_obj2json --search="${target_pattern}" \
                       --source="${serialized_object}" \
                       --target="${target_object}" \
                       --logger="${configs_obj2json__console}" \
      >> "${obj2json_location}/${logging_filename}.log" 2>&1 ;

      #### -----------------------------------------------------------------------
      ## Append structured config object to fragments file (now final collector)
      if [[ -s "${target_object}" ]]; then

        # wrapped_block="$(
        #   cat "${target_object}" | \
        #   jq --slurp \
        #     --arg site "${config_filename%%/*}" \
        #     --arg device "$( basename -s .list "${rel_path##*/}" )" \
        #     '{
        #       site: ( $site | gsub( "^.*/"; "" ) ),
        #       device: $device,
        #       objects: .
        #     }'
        # )";

        local companion_config=( "${reports_location}/${target_address}/${device_location}/${device_filename%.*}."* );
        ## Extract and validate embedded JSON header
        local specs_block="$(
          awk '
                BEGIN { in_json = 0 }
                /^[[:space:]]*{/ { in_json = 1 }
                in_json { print }
                /^[[:space:]]*}/ { exit }
              ' "${companion_config}" | jq '.'
        )"

        wrapped_block="$(
          jq --slurp \
            --arg site "${rel_path%%/*}" \
            --arg device "$(
                basename -s .list "${rel_path##*/}"
              )" \
            --argjson specs "${specs_block}" \
            '{
              site: ( $site | gsub("^.*/"; "") ),
              specs: $specs,
              device: $device,
              objects: .
            }' "${target_object}"
        )";

        #### -----------------------------------------------------------------------
        if [[ "${verbose}" == true ]]; then
          {
            if ! jq -e . <<< "${wrapped_block}" >/dev/null 2>&1; then
              warning "[configs_extract] Invalid JSON block â€” skipping:";
              print "${wrapped_block}" | jq . 2>&1 | head -n 10;
              continue;
            fi;
          } ## >> "${target_console:-/dev/null}";
        fi;

        mkdir -p "$( dirname "${json_output}" )";
        ## Append to collector file
        # print "${wrapped_block}" >> "${json_output}";
        printf '%s\n' "${wrapped_block}" >> "${json_output}";

      fi;

    done;

    #### -----------------------------------------------------------------------
    ## Merge per-object console logs into one unified log for this IP

    local configs_obj2json__console="${console_location}/configs-obj2json.console";
    local search_pattern="${TMP_DIR}/${configs_obj2json__script}--${target_address}"--*.console;
    :> "${configs_obj2json__console}";

    for obj_console in ${search_pattern}; do
      if [[ -f "${obj_console}" ]]; then
        cat "${obj_console}" >> "${configs_obj2json__console}";
      fi;
    done;

    cp -v "${configs_obj2json__console}" \
          "${console_location}/${configs_obj2json__script}.console";

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        print_file "${configs_obj2json__console:-/dev/null}";
      } ## >> "${target_console:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        print_file "${json_output}";
      } ## >> "${target_console:-/dev/null}";
    fi;

    return 0;
}; alias extract-configs='configs_extract';

#------------------------------------------------------------------------------#
