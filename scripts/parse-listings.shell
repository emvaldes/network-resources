#!/usr/bin/env bash

# File: scripts/parse-listings.shell
# Purpose: Parse a set of IPs listings and output to reports/<ip>.json

# Wwarning: Requires Bash version 4.0 or higher

set -euo pipefail;
# set -x;

## POSIX locale standard
export LC_ALL=C;

## Temp-dir and automatic clean-up on exit
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

#------------------------------------------------------------------------------#

source ./scripts/devops-tools.shell;

#------------------------------------------------------------------------------#
# Generate CSV output from reports/reports.json
function generate_csvoutput () {
    local input_json="${reports_folder}/reports.json";
    local output_csv="${reports_folder}/reports.csv";
    if [[ ! -f "${input_json}" ]]; then
      error_message "Missing ${input_json}, cannot generate CSV.";
      return 1;
    fi;
    {
      echo "target,config,object,entry,description,group";
      jq -r --arg configs_dirpath "${configs_dirpath}" '
        .[] as $entry
        | $entry.configs[]
        | .config as $cfg
        | .objects[]
        | [
            $entry.target,
            ($cfg | sub("^" + $configs_dirpath + "/"; "")),
            (.object // "none" | tostring | select(length > 0) // "none"),
            (.entry // "none" | tostring | select(length > 0) // "none"),
            (.description // "none" | tostring | select(length > 0) // "none"),
            (.group // "none" | tostring | select(length > 0) // "none")
          ]
        | @csv
      ' "${input_json}";
    } > "${output_csv}";
    if [[ "${verbose}" == true ]]; then
      if [[ -s "${output_csv}" ]]; then
        newline;
        print "CSV Report Summary (tabulated):";
        newline;
        column -t -s, "${output_csv}" | less -SFX;
      fi;
    fi;
    return 0;
}; alias generate-csvoutput='generate_csvoutput';

#------------------------------------------------------------------------------#

function main () {
    ## tracking_process ${FUNCNAME} "${@}";
    declare -a file_extensions=();
    oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";
      [[ $key =~ ^(configs|c)$ ]] && local configs_dirpath="${value}";
      [[ $key =~ ^(file-ext|x)$ ]] && file_extensions+=(
        $( print "${value}" | tr ':,;\n ' '\n' )
      );
      [[ $key =~ ^(classify|g)$ ]] && local classify_targets=true;
      [[ $key =~ ^(interval|l)$ ]] && local delaying_factor="${value}";
      [[ $key =~ ^(ips-list|i)$ ]] && local listing_filename="${value}";
      [[ $key =~ ^(validate|v)$ ]] && local validate_address=true;
      [[ $key =~ ^(jobs|j)$ ]] && local parallel_threads="${value}";
      [[ $key =~ ^(matrix|m)$ ]] && local matrix_filename="${value}";
      [[ $key =~ ^(reports|r)$ ]] && local reports_folder="${value}";
      #### ---------------------------------------------------------------------
      [[ $key == "help" ]] && local script_helper=true;
      [[ $key == "debug" ]] && local debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true;
    done; IFS="${oIFS}";
    #### -----------------------------------------------------------------------
    [[ -z ${delaying_factor:-} ]] && delaying_factor="0.05";
    [[ -z ${listing_filename:-} ]] && listing_filename="ips.list";
    [[ -z ${parallel_threads:-} ]] && parallel_threads=100;
    #### -----------------------------------------------------------------------
    [[ -z ${debug:-} ]] && debug=false;
    [[ -z ${verbose:-} ]] && verbose=false;

    #### -----------------------------------------------------------------------
    if [[ ${script_helper:-} == true ]]; then
      display_help "${script_name}"  "listings";
      exit 0;
    fi;

    #### -----------------------------------------------------------------------
    ## Target Configurations (file-extensions):
    if [[ -z ${file_extensions+x} || ${#file_extensions[@]} -eq 0 ]]; then
      declare -a file_extensions=( cfg conf cnf );
    fi;

    #### -----------------------------------------------------------------------
    ## Enabling IP/CIDR Blocks Group Classification
    [[ -z ${classify_targets:-} ]] && export classify_targets=false;

    #### -----------------------------------------------------------------------
    ## Processing Custom/Default the Translation-Matrix (source):
    [[ -z "${matrix_filename:-}" ]] && matrix_filename="matrix.json";
    if [[ ! -f "${matrix_filename}" ]]; then
            error_message "Project Source Matrix-Configs file not found: ${matrix_filename}";
            return 1;
      elif  ! jq -e 'length > 0' "${matrix_filename}" &>/dev/null; then
            error_message "Matrix file is missing, invalid, or empty: ${matrix_filename}";
            return 2;
      else  local matrix_configs="$(
              cat "${matrix_filename}"
            )";
    fi;

    #### -----------------------------------------------------------------------
    ## Custom/Default configs folder:
    local configs_dirpath="${configs_dirpath:-configs}";
    ## Custom/Default reports folder:
    local reports_folder="${reports_folder:-reports}";
    mkdir -p "${reports_folder}";
    ## Initializing the log file
    : > "${reports_folder}/reports.log";

    #### -----------------------------------------------------------------------
    ## Generate master list of config files only once
    local configs_list_cache=".cache/configs.list";
    mkdir -p .cache;
    if [[ ! -f "${configs_list_cache}" ]]; then
            local -a find_cmd=( find "${configs_dirpath}" -type f \( );
            for ext in "${file_extensions[@]}"; do
              find_cmd+=( -iname "*.${ext}" -o );
            done;
            unset 'find_cmd[-1]';  # Remove trailing -o
            find_cmd+=( \) );
            "${find_cmd[@]}" | sort > "${configs_list_cache}";
            [[ "${verbose}" == true ]] && print "Generated configs.list at ${configs_list_cache}";
      else  [[ "${verbose}" == true ]] && print "Using cached configs.list from ${configs_list_cache}";
    fi;

    #### -----------------------------------------------------------------------
    ## Validating IP Addresses (Skipping?)
    [[ -z ${validate_address:-} ]] && export validate_address=false;

    #### -----------------------------------------------------------------------
    ## Processing Target Addresses Listing (default: ips.list)
    if [[ ! -f "${listing_filename}" ]]; then
            error_message "Project Target IP-listing file not found: ${listing_filename}";
            return 3;
      else  ## Sort a list numerically, not lexicographically
            mapfile -t target_listing < <(
              grep -v '^\s*$' "${listing_filename}" | tr -d '\r' |
              sort -t . -k1,1n -k2,2n -k3,3n -k4,4n
            )
            if [[ ${#target_listing[@]} -eq 0 ]]; then
                    error_message "No IP addresses to process.\n";
                    return 4;
              else  if [[ "${verbose}" == true ]]; then
                      newline; print "IPS/CIDR Blocks: "; newline;
                      for target in "${target_listing[@]}"; do
                        print "  - ${target}"; newline;
                      done; newline;
                    fi;
            fi;
    fi;

    #### -----------------------------------------------------------------------
    ## Build mapping: which files reference which IP
    mkdir -p targets;
    if [[ "${verbose}" == true ]]; then
      newline; print "Mapping IPs to config files (pre-scan phase)..."; newline;
    fi;

    for ip_addr in "${target_listing[@]}"; do
      (
        ip_cleaned="$(
          print "${ip_addr}" | tr -d '\r'
        )";
        target_file="targets/${ip_cleaned}.list";
        matched_files="$(
          grep -lF "${ip_cleaned}" $(< "${configs_list_cache}") 2>/dev/null || true
        )";
        if [[ -n "${matched_files}" ]]; then
          printf "%s\n" ${matched_files} > "${target_file}";
        fi;
      ) &
    done; wait;

    #### -----------------------------------------------------------------------
    ## Filter target IPs that have a match file in targets/
    declare -a filtered_target_listing=();
    for ip_addr in "${target_listing[@]}"; do
      ip_cleaned="$( print "${ip_addr}" | tr -d '\r' )";
      if [[ -f "targets/${ip_cleaned}.list" ]]; then
        filtered_target_listing+=( "${ip_cleaned}" );
      fi;
    done;

    #### -----------------------------------------------------------------------
    ip_index=0;
    # total_ips=${#target_listing[@]};
    total_ips=${#filtered_target_listing[@]};

    while (( ip_index < total_ips )); do
      running_jobs=$(
        jobs -rp | wc -l
      );
      available_slots=$(( parallel_threads - running_jobs ));
      if (( available_slots > 0 )); then
        for (( i = 0; i < available_slots && ip_index < total_ips; i++ )); do
          # ip_addr="${target_listing[ip_index++]}";
          ip_addr="${filtered_target_listing[ip_index++]}";
          padded_index="$(
            printf "%0${#total_ips}d" "${ip_index}"
          )";
          [[ "${debug}" == true ]] && \
             print "[POOL] Launching job (${ip_addr})[$ip_index] ..."; newline;
          (
            #### ---------------------------------------------------------------
            execute=(
              ./scripts/parse-configs.shell
              --configs="${configs_dirpath}"
              --ip-addr="${ip_addr}"
              --index="${padded_index}"
              --matrix="${matrix_filename}"
              --reports="${reports_folder}"
              --file-ext="$(
                IFS=,; print "${file_extensions[*]}"
              )"
            );
            [[ "${classify_targets}" == true ]] && execute+=( --classify );
            [[ "${validate_address}" == true ]] && execute+=( --validate );
            #### ---------------------------------------------------------------
            [[ "${verbose}" == true ]] && execute+=( --verbose );
            [[ "${debug}" == true ]] && execute+=( --debug );
            #### ---------------------------------------------------------------
            if [[ "${debug}" == true ]]; then
                    output="$( bash -x "${execute[@]}" )";
              else  output="$( "${execute[@]}" )";
            fi;
            if [[ -n "${output//[[:space:]]/}" ]]; then
              printf "%s\n" "$output";
              printf "%s\n" "$output" >> "${reports_folder}/reports.log";
            fi;
            #### ---------------------------------------------------------------
          ) &
        done;
      fi;
      sleep ${delaying_factor};
    done; wait;

    #### -----------------------------------------------------------------------
    ## Aggregate all JSON outputs into one reports.json
    local json_dir="${reports_folder}/json";
    local master_json="${reports_folder}/reports.json";
    if [[ -d "${json_dir}" ]]; then
      mapfile -t json_files < <(
        find "${json_dir}" -type f -name '*.json' | sort
      );
      if (( ${#json_files[@]} > 0 )); then
        jq -s '.' "${json_files[@]}" > "${master_json}";
      fi;
    fi;
    ## Generating ./reports/reports.json into CSV output
    generate_csvoutput ;

    #### -----------------------------------------------------------------------
    return 0;
}; alias parse-listings='main';

#------------------------------------------------------------------------------#

local_state_dir=".local";
mkdir -p "${local_state_dir}";

# os="$( detect_platform )";
# install_missing "${os}";

export script_name="${0}";

if [[ ${#@} -ge 1 && "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  main "${@}";
        # newline; print "Done."; newline 2;
fi;

#------------------------------------------------------------------------------#
