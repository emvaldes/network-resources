#!/usr/bin/env bash

## File: scripts/tools-extraction.shell

## Purpose: Consolidated extraction function per official execution plan.

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__TOOLS_EXTRACTION_SOURCED:-}" ]]; then return 0; fi;
readonly __TOOLS_EXTRACTION_SOURCED=1;

#### ---------------------------------------------------------------------------
# Purpose:
#   Parses a given configuration file, extracts all objects containing a target IP,
#   and writes structured per-object metadata into a JSON fragments file.
#
# Inputs:
#   $1 = Full path to the configuration file
#   $2 = Target IP address (used as search pattern)
#   $3 = JSON fragments output file (collector for wrapped objects)
#   $4 = Unused (was originally a named array output; logic now internalized)
#
# Workflow:
#   - Reads and sanitizes the full config file (removes blank lines, comments, etc.)
#   - Splits config into logical blocks (using `${divisor}` as the delimiter)
#   - Restores the blocks into newline-separated format
#   - Filters blocks containing the target IP
#   - Writes matched config blocks to `./reports/<ip>/<site>/<device>.<ext>`
#   - Processes each matched block with `process_configs` to extract metadata
#   - Wraps extracted objects under `{ site, device, objects[] }` structure
#   - Appends each structured result to the final JSON fragment output file
#
# Output:
#   - Structured per-config JSON entries written to $3
#   - Raw matched blocks written to `./reports/<ip>/<site>/<device>.<ext>`
#
# Notes:
#   - Duplicate blocks are skipped via flat-string comparison.
#   - Preserves traceability and grouping by site/device.
#   - Designed to run synchronously per config file, called from `parse-configs`.

function extract_configs () {

    local config_file="${1}";
    local target_pattern="${2}";
    local target_listing="${3}";
    local json_output="${4}";

    ## Recording the generated_configslist actions
    local target_logfile="${5:-${TMP_DIR:-/tmp}/extract_configs--${ip_addr}.log}";

    # local target_object="${TMP_DIR}/$(basename "${config_file}").objects"

    #### -----------------------------------------------------------------------
    ## Validate file exists
    if [[ ! -f "${config_file}" ]]; then
      error "[extract_configs] Config file not found: ${config_file}";
      return 1;
    fi;

    # #### -----------------------------------------------------------------------
    # ## Check if config file exists or is empty
    # if [[ "${verbose}" == true ]]; then
    #   {
    #     # message "[extract_configs] Processing file:  ${config_file:-/dev/null}";
    #     # message "[extract_configs] Target Listing:   ${target_listing:-/dev/null}";
    #     if [[ ! -s "${config_file}" ]]; then
    #       message "Warning: Configuration file '${config_file}' is missing or empty!";
    #     fi;
    #     # newline;
    #   } >> "${target_logfile:-/dev/null}";
    # fi;

    # #### -----------------------------------------------------------------------
    # ## Read and sanitize config file into array
    # mapfile -t config_rawdata < <(
    #   sed '/^\s*$/d;/^\s*!.*$/d' < "${config_file}"
    # );

    # #### -----------------------------------------------------------------------
    # ## Extract first 6 lines as metadata
    # local metadata_header="$(
    #   printf '%s\n' "${config_rawdata[@]:0:7}"
    # )";

    # #### -----------------------------------------------------------------------
    # ## Remove metadata from config
    # sanitized_content=( "${config_rawdata[@]:7}" );

    # #### -----------------------------------------------------------------------
    # if [[ "${verbose}" == true ]]; then
    #   {
    #     message "[extract_configs] Metadata Header:";
    #     message "${metadata_header}";
    #     newline;
    #     message "Sanitized Content [${config_file}]:";
    #     for line in "${sanitized_content[@]}"; do
    #       message "${line}";
    #     done;
    #     newline;
    #   } >> "${target_logfile:-/dev/null}";
    # fi;

    # #### -----------------------------------------------------------------------
    # ## Derive site/device/ext from config path
    # local cfg_path="${config_file}";
    # message "[extract_configs] Config Path: ${cfg_path}";
    # local rel_path="${cfg_path#${configs_dirpath}/}";  ## e.g., cisco/fw1.cfg
    # message "[extract_configs] Relative Path: ${rel_path}";
    # local site="${rel_path%%/*}";                      ## -> cisco
    # message "[extract_configs] Site: ${site}";
    # local device_filename="${rel_path#*/}";            ## -> fw1.cfg
    # message "[extract_configs] Device Filename: ${device_filename}";
    # local extension="${device_filename##*.}";          ## -> cfg
    # message "[extract_configs] Extension: ${extension}";

    # ## Construct output path: ./reports/<ip>/<site>/<device>.<ext>
    # local objects_dir="${reports_folder}/${target_address}/${site}";
    # local objects_file="${objects_dir}/${device_filename}";

    # #### -----------------------------------------------------------------------
    # mkdir -p "${objects_dir}" 2>/dev/null || true;

    # $( which bash ) -x ./scripts/network-configs.shell \
    #                 --ips-list="${target_pattern}" \
    #                 --config="${config_file}" \
    #                 --output="${objects_file}" \
    # ;

    # #### -----------------------------------------------------------------------
    # if [[ "${verbose}" == true ]]; then
    #   {
    #     message "[extract_configs] Extracted config into: ${objects_file}";
    #     ls -al "${objects_file}" || true;
    #   } >> "${target_logfile:-/dev/null}";
    # fi;

    # # #### -----------------------------------------------------------------------
    # # ## Load extracted config from disk into matched_objects
    # # mapfile -t __matched_objects__ < "${objects_file}";

    # # if [[ "${#__matched_objects__[@]}" -eq 0 ]]; then
    # #   if [[ "${verbose}" == true ]]; then
    # #     {
    # #       message "[extract_configs] No configuration lines loaded from: ${objects_file}";
    # #     } >> "${target_logfile:-/dev/null}";
    # #   fi;
    # # fi;

    # # if [[ "${verbose}" == true ]]; then
    # #   {
    # #     message "[extract_configs] Loaded ${#__matched_objects__[@]} lines from: ${objects_file}";
    # #     for i in "${!__matched_objects__[@]}"; do
    # #       message "|---> Line [${i}]: ${__matched_objects__[$i]}";
    # #     done; newline;
    # #   } >> "${target_logfile:-/dev/null}";
    # # fi;

    #### -----------------------------------------------------------------------
    ## [INSERT HERE] Check if config is readable and has content
    message "[DEBUG] Checking if config file exists and is readable: ${config_file}";
    if [[ ! -s "${config_file}" ]]; then
            error_message "File '${config_file}' is missing or empty";
      else  message "[OK] File '${config_file}' is readable and size is $(
              stat -f "%m" "${config_file}"
            ) bytes";
    fi;

    #### -----------------------------------------------------------------------
    ## Full file ingestion and normalization
    local imported_content="$( < "${config_file}" )";
    if [[ "${verbose}" == true ]]; then
      message "Imported Content: ${imported_content[@]}";
    fi;

    #### -----------------------------------------------------------------------
    ## Remove multiple and/or empty blank lines plus "!"
    local sanitized_content="$(
      sed '/^\s*$/d;/^\s*!.*$/d' <<< "${imported_content}"
    )";
    if [[ "${verbose}" == true ]]; then
      message "Sanitized Content: ${sanitized_content[@]}";
    fi;

    #### -----------------------------------------------------------------------
    ## Replace newlines with date-base64 string (divisor)
    local serialized_objects="$(
      perl -pe 's/\n/'"${divisor}"'/g' <<< "${sanitized_content}"
    )";
    if [[ "${verbose}" == true ]]; then
      message "Serialized Objects: ${serialized_objects[@]}";
    fi;

    #### -----------------------------------------------------------------------
    ## Restoring configuration objects: inject real newlines after each object
    local restored_lines="$(
      sed -E "s/${divisor}([^[:space:]])/\n\1/g" <<< "${serialized_objects}"
    )";
    # Ensure each line ends with a literal newline (required for proper splitting)
    restored_lines+=$'\n';
    # Convert to array by splitting on real newlines between objects
    IFS=$'\n' read -r -d '' -a config_objects < <(
      printf '%s\0' "${restored_lines}"
    );

    if [[ "${verbose}" == true ]]; then
      message "Loaded ${#config_objects[@]} config blocks";
      # for i in "${!config_objects[@]}"; do
      #   message "|---> Block [${i}]\n${config_objects[$i]}";
      # done; newline;
    fi;

    #### -----------------------------------------------------------------------
    ## Match config-objects (blocks) containing search-pattern (e.g.: IP Address)
    oIFS="${IFS}"; IFS=$'\n';

    # declare -a matched_objects=($(
    #   printf "%s\n" "${config_objects[@]}" | \
    #   grep -E "(^|[^0-9.])${target_pattern//./\\.}([^0-9.]|$)"
    # ));

    declare -a matched_objects=();
    for block in "${config_objects[@]}"; do
      if grep -qE "(^|[^0-9.])${target_pattern//./\\.}([^0-9.]|$)" <<< "${block}"; then
        matched_objects+=( "${block}" );
      fi;
    done;

    IFS="${oIFS}";

    if [[ "${verbose}" == true ]]; then
      message "Loaded ${#matched_objects[@]} config blocks";
      # for i in "${!matched_objects[@]}"; do
      #   message "|---> Block [$i]\n${matched_objects[$i]}"
      # done; newline;
    fi;

#### Marked for removal (end-block)

    #### -----------------------------------------------------------------------
    local process_configs__logfile="${TMP_DIR}/process_configs.logs";
    :> "${process_configs__logfile}";

    #### -----------------------------------------------------------------------
    ## Deserializing matched_objects:
    for serialized_line in "${matched_objects[@]}"; do
      [[ "${verbose}" == true ]] && \
         message "Serialized Line: ${serialized_line[@]}";

      restored_block="$(
        perl -pe 's/'"${divisor}"'/\n/g' <<< "${serialized_line}"
      )"
      # restored_block="${restored_block}"$'\n';

      ## Derive site/device/ext from config path
      local cfg_path="${config_file}";
      local rel_path="${cfg_path#${configs_dirpath}/}";  ## e.g., cisco/fw1.cfg
      local site="${rel_path%%/*}";                      ## -> cisco
      local device_filename="${rel_path#*/}";            ## -> fw1.cfg
      local extension="${device_filename##*.}";          ## -> cfg

      ## Construct output path: ./reports/<ip>/<site>/<device>.<ext>
      local objects_dir="${reports_folder}/${target_address}/${site}";
      local objects_file="${objects_dir}/${device_filename}";

      ## Skip if this block already exists in the output file (match as single line)
      if [[ -s "${objects_file}" ]]; then
        local restored_flat="$( echo "${restored_block}" | tr '\n' '\r' )";
        local objects_flat="$( tr '\n' '\r' < "${objects_file}" )";

        if grep -Fq -- "${restored_flat}" <<< "${objects_flat}"; then
          [[ "${debug}" == true ]] && \
            message "Skipping duplicate block in ${objects_file}";
          continue;
        fi;
      fi;

      mkdir -p "${objects_dir}" 2>/dev/null || true;
      {
        message "${restored_block}";
        message "!";
        newline;
      } >> "${objects_file}";

      if [[ "${verbose}" == true ]]; then
        message "Restored Configuration:\n${restored_block[@]}";
      fi;

      process_configs "${target_pattern}" \
                      "${config_file}" \
                      "${restored_block}" \
                      "${process_configs__logfile}" \
      ;

      if [[ -n "${target_object:-}" ]]; then
        if [[ "${verbose}" == true ]]; then
          message "|-----> Target Objects: ${target_object}";
        fi;
      fi;

      #### -----------------------------------------------------------------------
      ## Append structured config object to fragments file (now final collector)
      if [[ -n "${target_object}" ]]; then
        wrapped_block="$(
          printf '%s\n' "${target_object}" | \
          jq --slurp \
            --arg site "${config_file%/*}" \
            --arg device "${config_file##*/}" \
            '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
        )";

        # Optionally inspect it
        [[ "${debug}" == true ]] && \
           message "|-----> Config Objects:\n${wrapped_block}";

        # Append to collector file
        print "${wrapped_block}" >> "${json_output}";
        # [[ "${debug}" == true ]] && \
        #    print_file "${json_output}";

      fi;

    done;

    return 0;
}; alias extract-configs='extract_configs';

#------------------------------------------------------------------------------#

#### ---------------------------------------------------------------------------
# Purpose:
#   Analyzes a single configuration block that matched a target IP.
#   Extracts structured metadata and builds a normalized JSON object
#   for inclusion in the per-config object set.
#
# Inputs:
#   $1 = Target IP (used as match pattern)
#   $2 = Full path to the source configuration file (for context only)
#   $3 = Restored configuration block (newline-separated)
#
# Output:
#   - Exports `target_object` as a JSON-formatted Bash variable for upstream collection
#     (usually by `extract_configs()`).
#
# Structure of output JSON:
#   {
#     "object": "<first keyword>",
#     "type": "<object type or false>",
#     "partner": "<non-IP name from 'type'>",
#     "description": "<first matched description or false>",
#     "items": [ "<lines matching target IP>" ],
#     "sets": { "<first-token>": count, ... },
#     "group": "<classification label or 'Unclassified'>"
#   }
#
# Behavior:
#   - Sanitizes and parses the block into components.
#   - Extracts lines relevant to the target IP (`items[]`).
#   - Counts command keywords for `sets{}` mapping.
#   - Parses descriptions, object names, and classifies the entry via matrix.
#   - Avoids duplication or incorrect grouping by delegating output to caller.
#
# Notes:
#   - Skips blocks with no IP match.
#   - If classification is enabled, assigns the best-fit group from matrix.json.
#   - Does not write to file directly — upstream function handles final wrapping.

function process_configs () {

    local target_pattern="$1";
    local config_path="$2";
    local restored_block="$3";

    ## Recording the generated_configslist actions
    local target_logfile="${4:-${TMP_DIR:-/tmp}/process_configs--${ip_addr}.log}";

    #### -----------------------------------------------------------------------
    ## Sanitize and validate non-empty block
    local cleaned_block;
    cleaned_block="$(
      sed '/^[[:space:]]*$/d' <<< "${restored_block}"
    )";
    [[ -z "${cleaned_block}" ]] && return;

    if [[ "${verbose}" == true ]]; then
      message "[process_configs] Raw Block:\n${restored_block}";
    fi;

    #### -----------------------------------------------------------------------
    ## Extract object line (first non-empty line)
    local object_line;
    object_line="$(
      head -n 1 <<< "${cleaned_block}" | \
      sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
    )";
    [[ -z "${object_line}" ]] && return;

    #### -----------------------------------------------------------------------
    ## Parse object keyword and type value
    local object_keyword type_value;
    object_keyword="$(
      awk '{print $1}' <<< "${object_line}"
    )";

    # Only extract type if the block is multiline (has more than one non-empty line)
    if (( $( wc -l <<< "${cleaned_block}" ) > 1 )); then
            type_value="$(
              sed -E 's/^[^[:space:]]+[[:space:]]+//' <<< "${object_line}"
            )";
            [[ -z "${type_value}" ]] && type_value="false";
      else  type_value="false";
    fi;

    if [[ "${verbose}" == true ]]; then
      print "[process_configs] object   : ${object_keyword}";
      print "[process_configs] type     : ${type_value}";
    fi;

    #### -----------------------------------------------------------------------
    ## Extract all lines (object memebers) except description
    local -a data_sets=();
    while IFS= read -r line; do
      local trimmed="$(
        sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//' <<< "${line}"
      )";
      [[ -z "${trimmed}" ]] && continue;
      [[ "${trimmed,,}" =~ ^description[[:space:]] ]] && continue;
      data_sets+=( "${trimmed}" );
    done <<< "${cleaned_block}";

    ## Remove object header line if multiple entries
    if (( ${#data_sets[@]} > 1 )); then
      data_sets=( "${data_sets[@]:1}" );
    fi;

    if [[ "${verbose}" == true ]]; then
      message "[process_configs] Object Sets:";
      for e in "${data_sets[@]}"; do
        print "  - ${e}";
      done;
    fi;

    #### -----------------------------------------------------------------------
    ## Extract first line containing target IP
    local matched_line="$(
      grep -E "(^|[^0-9.])${target_pattern//./\\.}([^0-9.]|$)" <<< "${cleaned_block}" | \
      head -n 1 | \
      sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
    )";
    [[ -z "${matched_line}" ]] && return;

    [[ "${verbose}" == true ]] && \
       message "[process_configs] Matched: ${matched_line}";

    #### -----------------------------------------------------------------------
    ## Extract only lines from the block that match the IP pattern
    local -a matched_items=();
    while IFS= read -r line; do
      if grep -Eq "(^|[^0-9.])${target_pattern//./\\.}([^0-9.]|$)" <<< "${line}"; then
        matched_items+=("$(
          sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//' \
          <<< "${line}"
        )");
      fi;
    done <<< "${cleaned_block}";

    local matched_items_json="$(
      printf '%s\n' "${matched_items[@]}" | \
      jq -R . | \
      jq --slurp .
    )";

    #### -----------------------------------------------------------------------
    ## Extract optional description (if present)
    local description_value="$(
      grep -i '^[[:space:]]*description' <<< "${cleaned_block}" | \
      head -n 1 | \
      sed -E 's/^[^"]*"?description"?[[:space:]]*//I; s/^[[:space:]]*//; s/[[:space:]]*$//'
    )";
    [[ -z "${description_value}" ]] && description_value="false";
    [[ "${description_value}" =~ $'\n' ]] && description_value="$( head -n 1 <<< "${description_value}" )";

    [[ "${verbose}" == true ]] && \
       message "[process_configs] Description: ${description_value}";

    #### -----------------------------------------------------------------------
    ## Determine group from matrix (if enabled)
    local group_value="Unclassified";
    if [[ "${classify_targets:-false}" == true ]]; then
      local object_key;
      object_key="$(
        awk '{print $NF}' <<< "${type_value}" | \
        sed -E 's/[[:punct:]]*$//'
      )";
      group_value="$(
        jq -r --arg key "${object_key}" \
                        'map( select( .match[]? | contains( $key ) ) ) | .[0].group' \
        <<< "${matrix_configs}" )";
      if [[ -z "${group_value}" || "${group_value}" == "null" ]]; then
        group_value="$(
          jq -r --arg desc "${description_value}" 'map( select( .match[]? == $desc ) ) | .[0].group' \
          <<< "${matrix_configs}"
        )";
      fi;
      [[ -z "${group_value}" || "${group_value}" == "null" ]] && group_value="Unclassified";
    fi;

    [[ "${verbose}" == true ]] && \
       message "[process_configs] Group: ${group_value}";

    ## -----------------------------------------------------------------------
    ## Convert Bash array data_sets[] to JSON-safe array string
    local items_2json="$(
      printf '%s\n' "${data_sets[@]}" | \
      jq -R . | \
      jq --slurp .
    )";

    #### -----------------------------------------------------------------------
    ## Build sets_json from data_sets[]: summarize first word frequency with debug
    declare -A sets_map;
    for line in "${data_sets[@]}"; do
      [[ -n "${line}" ]] || continue;
      key="$(
        awk '{print $1}' <<< "${line}"
      )";
      [[ -n "${key}" ]] || continue;
      if [[ -z "${sets_map["$key"]+x}" ]]; then
              sets_map["$key"]=1;
        else  (( sets_map["$key"]++ ));
      fi;
    done;

    ## Favoring a more robust JSON construction with jq
    local sets_json="$(
      for k in "${!sets_map[@]}"; do
        printf '{ "key": "%s", "val": %d }\n' "$k" "${sets_map[$k]}"
      done | jq --slurp 'map({(.key): .val}) | add'
    )";

    #### -----------------------------------------------------------------------
    partner_value="";
    case "${object_keyword}" in
      object-group|object ) if [[ "${type_value}" == network* ]]; then
                              extracted_name="${type_value##network }";
                              if ! [[ "${extracted_name}" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
                                partner_value="${extracted_name}";
                              fi;
                            fi;
                            ;;
      * ) partner_value="";
          ;;
    esac;

    #### -----------------------------------------------------------------------
    target_object="$(
      jq -n \
        --arg object "${object_keyword}" \
        --arg type "${type_value}" \
        --arg partner "${partner_value}" \
        --arg description "${description_value}" \
        --argjson items "${matched_items_json}" \
        --argjson sets "${sets_json}" \
        --arg group "${group_value}" \
        '{
          object: $object,
          type: ( $type // false ),
          partner: ( $partner | select(. != "" and . != "null" and . != "false") // false ),
          description: ( $description | select(. != "" and . != "null" and . != "false") // false ),
          items: $items,
          sets: $sets,
          group: $group
        }'
    )"


    #### -----------------------------------------------------------------------
    ## Purpose: `target_object` holds the final structured JSON representation
    ##          of a single matched configuration block.
    ##
    ## Notes:
    ## - It contains all extracted metadata: object type, description, items, sets, data, group.
    ## - It is intended to be collected by `extract_configs()`, NOT written here.
    ## - This variable must be exported only after it's been properly constructed.
    ## - Centralizing the output logic in `extract_configs()` enables proper
    ##   grouping per config file, preserves structure, and prevents flattening.
    ##
    ## Why this matters:
    ## - Writing here would prematurely dump output without associating it to
    ##   a config file — breaking the required `{ config, objects[] }` structure.
    ## - We need `extract_configs()` to be the only function writing grouped output.

    export target_object;

    # #### -----------------------------------------------------------------------
    ## Append final JSON object to object_store
    if [[ "${verbose:-false}" == true ]]; then
      message "[process_configs] JSON Object (output):";
      print "${target_object}" | jq .;
      newline;
    fi;

    return 0
}; alias process-configs='process_configs';

#------------------------------------------------------------------------------#
