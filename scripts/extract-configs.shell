#!/usr/bin/env bash

#!/usr/bin/env bash

## -------------------------------------------------------------------------- ##
## File: scripts/extract-configs.shell
##
## Purpose:
##   Unified pre-parsing engine to extract reduced configuration blocks
##   from vendor-native network configuration files (e.g., Cisco, Fortinet).
##
##   This wrapper detects or accepts a vendor platform, invokes the appropriate
##   vendor-specific AWK script, and writes a minimized output containing only
##   relevant configuration entries matched against a search pattern.
##
## Description:
##   - Automatically detects config vendor if not specified.
##   - Dispatches to ./scripts/extract/<vendor>-configs.awk
##   - Captures matched config blocks based on IPs, phrases, or identifiers.
##   - Supports clean JSON-oriented output production downstream.
##   - Serves as a bridge between `network-configs.shell` and vendor logic.
##
## Usage:
##   bash ./scripts/extract-configs.shell \
##     --ips-list=10.0.0.1 \
##     --config=configs/fw-1.cfg \
##     --output=./tmp/fw1-reduced.cfg \
##     [--platform=cisco|fortinet] \
##     [--verbose]
##
## Requirements:
##   - Bash v4+, GNU awk, grep, sed
##   - scripts/extract/<vendor>-configs.awk must exist
##
## Notes:
##   - This script should never contain vendor-specific logic internally.
##     All pattern logic resides in vendor-specific AWK scripts.
##   - Compatible with project-wide caching and pre-reduction workflows.
##
## -------------------------------------------------------------------------- ##

set -euo pipefail  ## Strict mode: exit on error, undefined var use, and pipeline failure
# set -x;          ## Enable for execution tracing/debugging

## POSIX locale standard
export LC_ALL=C   ## Ensure consistent sorting and character handling (POSIX-compliant)

# Create a secure, temporary working directory (auto-cleaned at script exit)
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

export nl="\n";

#------------------------------------------------------------------------------#
function display_help () {
    local -a help_lines=();
    local indent="    ";
    local padding="$( printf '%*s' ${#script_name} ' ' )";
    ## Header
    help_lines+=( "Usage: ${script_name} [OPTIONS]${nl}" );
    ## Shared Options
    help_lines+=( "Options:${nl}" );
    help_lines+=( "  -i, --ips-list     Custom Search Pattern: IP Address, etc." );
    help_lines+=( "  -c, --config       Source Configuration filepath to be parsed" );
    help_lines+=( "  -o, --output       Output Filepath for extracted datasets (*.cfg)" );
    help_lines+=( "  -p, --platform     Provide platform-specific config (cisco, fortinet)" );
    help_lines+=( "${nl}" );
    ## Flags
    help_lines+=( "Flags:${nl}" );
    help_lines+=( "  --help             Show this help message and exit" );
    # help_lines+=( "  --debug            Enable debug mode with trace output" );
    # help_lines+=( "  --dry-run          Print actions without executing them" );
    help_lines+=( "  --verbose          Enable verbose output${nl}" );
    ## Output
    newline;
    for line in "${help_lines[@]}"; do
      message "${indent}${line}";
    done;
    # return 0;
}; alias display-help='display_help';

#------------------------------------------------------------------------------#
## Output Utilities: Print N newlines (default: 1)
function newline () {
    local count="${1:-1}";
    for ((i = 0; i < count; i++)); do echo; done;
    # return 0;
}; alias new-line='newline';

#------------------------------------------------------------------------------#
## Output Utilities: Print an error message in consistent format
function message () {
    [[ -n ${1:-} ]] && local message="${1}" || return 0;
    echo -e "${message}";
    # return 0;
}; alias print-message='message';

#------------------------------------------------------------------------------#
function main () {
    ## tracking_process ${FUNCNAME} "${@}";
    oIFS="${IFS}";

    ## Process command-line arguments and map them to local variables
    for xitem in "${@}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";

      #### ---------------------------------------------------------------------
      ## Match accepted arguments
      [[ $key =~ ^(ips-list|i)$ ]] && local target_addresses="${value}";
      [[ $key =~ ^(config|c)$ ]] && local source_config="${value}";
      [[ $key =~ ^(output|o)$ ]] && local output_config="${value}";
      [[ $key =~ ^(platform|p)$ ]] && local target_platform="${value}";

      #### ---------------------------------------------------------------------
      ## Special options
      [[ $key == "help" ]] && local script_helper=true;
      [[ $key == "debug" ]] && local debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true;
    done; IFS="${oIFS}";

    #### -----------------------------------------------------------------------
    ## Set default values if not supplied
    [[ -z ${script_helper:-} ]] && script_helper=false;
    [[ -z ${debug:-} ]] && debug=false;
    [[ -z ${dry_run:-} ]] && dry_run=false;
    [[ -z ${verbose:-} ]] && verbose=false;

    #### -----------------------------------------------------------------------
    ## Display usage help if requested
    if [[ ${script_helper:-} == true ]]; then
      display_help;
      exit 0;
    fi;

    #### -----------------------------------------------------------------------
    while [[ -z ${target_addresses:-} ]]; do
      newline;
      read -e -p "Enter target search pattern: " target_addresses
      if [[ "${target_addresses:-}" =~ ^[[:space:]]*$ ]]; then
        message "Warning: Pattern cannot be empty!" >&2;
        newline;
        exit 1;
      fi;
    done;

    #### -----------------------------------------------------------------------
    while [[ -z ${source_config:-} || ! -f "${source_config}" ]]; do
      newline;
      read -e -p "Enter source configuration file: " source_config;
      if [[ ! -f "${source_config}" ]]; then
        message "Warning: File does not exist!" >&2;
        newline;
        exit 2;
      fi;
    done;

    #### -----------------------------------------------------------------------
    if [[ -z "${target_platform:-}" ]]; then
      if grep -qiE 'fortinet|fortigate' "${source_config}"; then
              vendor="fortinet"
        elif  grep -qiE '\basa\b|cisco ios|cisco adaptive|^interface\b|^object\b' "${source_config}" 2>/dev/null; then
              vendor="cisco"
        else  message "Unable to detect vendor platform." >&2;
              newline;
              exit 3;
      fi;
    fi;

    #### -----------------------------------------------------------------------
    ## Output path handling and validation
    if [[ -z "${output_config:-}" ]]; then
            if [[ "${verbose}" == true ]]; then
              message "Info: No --output specified. Displaying output inline.";
            fi;
            output_to_stdout=true;
      else  output_to_stdout=false;
            # Determine if output_config is a file (same extension as source)
            if [[ "${output_config##*.}" == "${source_config##*.}" ]]; then
                    final_output="${output_config}";
              else  # Always clone structure inside provided directory
                    base_output="${output_config%/}";
                    rel_path="$(
                      echo "${source_config}" | sed "s|^\./||"
                    )";
                    final_output="${base_output}/${rel_path}";
            fi;
            output_config="${final_output}";
            output_dir="$( dirname "${output_config}" )";
            if [[ ! -d "${output_dir}" ]]; then
              mkdir -p "${output_dir}" || {
                message "Warning: Failed to create output directory: ${output_dir}" >&2;
                newline;
                exit 4;
              };
            fi;
    fi;

    #### -----------------------------------------------------------------------
    local extracted_configuration="$(
      $( which awk ) -v targets="${target_addresses}" \
                     -f "./scripts/extract/${vendor}-configs.awk" \
                     "${source_config}"
    )";
    result=$?;
    # message "AWK exit code: ${result}";

    #### -----------------------------------------------------------------------
    # newline;
    if [[ -n "${extracted_configuration}" ]]; then
            # echo -n "${extracted_configuration}" > "${output_config}";
            echo -n "${extracted_configuration}" | \
            sed '1{/^[[:space:]]*$/d;}' \
            > "${output_config}";
            newline 2 >> "${output_config}";
            if [[ "${verbose}" == true ]]; then
              message "Configuration File [ ${output_config} ]";
              newline;
              cat -n "${output_config}";
            fi;
      else  message "Warning: No matching blocks found. Output file not written.";
            newline;
            return 1;
    fi;

    # return 0;
}; alias parse-cisco='main';

[[ -z "${script_name+x}" ]] && export script_name="${0}";

#------------------------------------------------------------------------------#

if [[ ${#@} -eq 0 || "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  main "${@}";
        result=${?}; exit ${result};
        ## newline; message "Done."; newline;
fi;

## -------------------------------------------------------------------------- ##
## Examples:
##
## 1. Extract from Cisco config using IP matches:
##    bash scripts/extract-configs.shell \
##         --ips-list="10.0.0.1,192.168.1.1" \
##         --config=./configs/core-fw.cfg \
##         --output=./reduced/core-fw.cfg \
##         --platform=cisco
##
## 2. Extract from Fortinet config using VPN object names:
##    bash scripts/extract-configs.shell \
##         --ips-list="edit VPN-PROFILE,edit BRANCH-ACCESS" \
##         --config=./configs/fg-dmz.cfg \
##         --output=./reduced/fg-dmz.cfg \
##         --platform=fortinet
##
## 3. Auto-detect platform from config content:
##    bash scripts/extract-configs.shell \
##         --ips-list="permit ip any" \
##         --config=./configs/asa-fw.cfg \
##         --output=./reduced/asa-fw.cfg
##
## 4. Use custom pipe delimiter:
##    bash scripts/extract-configs.shell \
##         --ips-list="object-group DMZ|object-group CORE" \
##         --config=./configs/fw-acl.cfg \
##         --output=./reduced/fw-acl.cfg \
##         --platform=cisco
##
## 5. Basic interactive mode (will prompt for missing values):
##    bash scripts/extract-configs.shell
##
## Notes:
##   - The --ips-list pattern string is passed to the AWK script as-is.
##   - Use --platform to bypass detection and force a specific parser.
## -------------------------------------------------------------------------- ##
