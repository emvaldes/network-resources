#!/usr/bin/env bash

## File: scripts/devops-resources.shell

## Purpose: Sharing common features across scripts.
##          Utility library of shared shell functions and environment exports
##    Note: Used by both parse-listings.shell and parse-configs.shell

## Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__DEVOPS_RESOURCES_SOURCED:-}" ]]; then return 0; fi;
declare -gr __DEVOPS_RESOURCES_SOURCED=1

## Require Bash 4.0+ for associative array support (only runs once)
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "Error: Bash 4.0 or newer is required. Current version: ${BASH_VERSINFO[*]}";
  exit 1;
fi;

#------------------------------------------------------------------------------#

function detect_vendor () {

    local config_file="${1}";
    local fortinet_pattern='fortinet|fortigate';
    local cisco_pattern='\basa\b|cisco ios|cisco adaptive|^interface\b|^object\b';
    if grep -qiE "${fortinet_pattern}" "${config_file}"; then
            return 1;
      elif  grep -qiE "${cisco_pattern}" "${config_file}" 2>/dev/null; then
            return 2;
      else  return 3;
    fi;

    # return 0;
}; alias detect-vendor='detect_vendor';

#------------------------------------------------------------------------------#

## Exit script with error message and exit code
function exit_error () {

    local msg="${1:-Unspecified fatal error}";
    local code="${2:-1}";
    log_error "${msg}";
    exit "${code}";

    # return 0;
}; alias exit-error='exit_error';

## -------------------------------------------------------------------------- ##
## Function: list_file ()
##
## Purpose:
##   Prints detailed file metadata in a human-readable format,
##   adapted to work across macOS, Linux, and WSL environments.
##
## Input:
##   $1 = Path to the file to inspect
##
## Behavior:
##   - Skips if input is empty or the file does not exist.
##   - Outputs:
##       - Name and parent directory
##       - Size, inode, block count
##       - File permissions (mode), owner UID/GID
##       - Timestamps: Access, Modify, Change
##   - Uses `stat -f` on macOS and `stat --format` on Linux/WSL.
##
## Notes:
##   - Only runs when `$debug` is set to true.
##   - Output is portable but may vary slightly by platform.
##   - Intended for internal diagnostics and trace logging.
## -------------------------------------------------------------------------- ##

function list_file () {

    [[ -n ${1:-} ]] || return 0;
    local target_file="${1}";
    local base="$(basename "${target_file}")";
    local parent="$(dirname "${target_file}")";
    if [[ "${debug:-false}" == true && -f "${target_file}" ]]; then
      local format_common="";
      local format_os="";
      local format="";
      # Common prefix
      format_common+=$'File: '"${base}"$'\n';
      format_common+=$'Parent: '"${parent}"$'\n';
      newline;
      # OS-specific body
      if [[ "$(uname)" == "Darwin" ]]; then
            format_os+=$'Size: %z bytes\n';
            format_os+=$'Blocks/Inode: %b / %i\n';
            format_os+=$'Mode: %Sp\n';
            format_os+=$'UID/GID: %u / %g\n';
            format_os+=$'Access: %Sa\n';
            format_os+=$'Modify: %Sm\n';
            format_os+=$'Change: %Sc\n';
            format="${format_common}${format_os}";
            stat -f "${format}" "${target_file}";
      else  format_os+=$'Size: %s bytes\n';
            format_os+=$'Blocks/Inode: %b / %i\n';
            format_os+=$'Mode: %A\n';
            format_os+=$'UID/GID: %u / %g\n';
            format_os+=$'Access: %x\n';
            format_os+=$'Modify: %y\n';
            format_os+=$'Change: %z\n';
            format="${format_common}${format_os}";
            stat --format="${format}" "${target_file}";
      fi;
    fi;

    # return 0;
}; alias list-file='list_file';

#------------------------------------------------------------------------------#

## Logging Utilities: Log Errors
function log_error () {

    [[ -n ${1:-} ]] || return 0;
    echo -e "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2;

    # return 0;
}; alias log-error='log_error';

#------------------------------------------------------------------------------#

## Logging Utilities: Log Information (info)
function log_info () {

    [[ -n ${1:-} ]] || return 0;
    echo -e "[INFO]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}";

    # return 0;
}; alias log-info='log_info';

#------------------------------------------------------------------------------#

## Logging Utilities: Log Warnings
function log_warn () {

    [[ -n ${1:-} ]] || return 0;
    echo -e "[WARN]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2;

    # return 0;
}; alias log-warn='log_warn';

#------------------------------------------------------------------------------#

## Output Utilities: Print an error message in consistent format
function message () {

    [[ -n ${1:-} ]] && local message="${1}" || return 0;
    echo -e "${message}";

    # return 0;
}; alias print-message='message';

#------------------------------------------------------------------------------#

## Output Utilities: Print N newlines (default: 1)
function newline () {

    local count="${1:-1}";
    for ((i = 0; i < count; i++)); do echo; done;

    # return 0;
}; alias print-newline='newline';

## -------------------------------------------------------------------------- ##
## Function: pause ()
##
## Purpose:
##   Pauses script execution for a given number of seconds,
##   with the ability to resume early by pressing the SPACE key.
##
## Input:
##   $1 = Number of seconds to pause
##
## Behavior:
##   - Displays a message indicating the sleep duration
##   - Monitors for keyboard input in raw mode
##   - If SPACE is pressed, resumes immediately
##   - Otherwise sleeps in 1-second increments until duration expires
##
## Notes:
##   - Uses `stty` to set non-blocking, silent terminal input
##   - Restores terminal settings after use
##   - Designed for use in interactive debug or staging modes
## -------------------------------------------------------------------------- ##

function pause () {

    local seconds="${1}";
    echo -e "\n[INFO] Sleeping for ${seconds} seconds... (press SPACE to continue early)\n";
    # Prepare terminal for raw input
    stty -echo -icanon time 0 min 0;
    local start_time=$( date +%s );
    local elapsed=0;
    while (( elapsed < seconds )); do
      key="$(dd bs=1 count=1 2>/dev/null)";
      if [[ "${key}" == " " ]]; then
        message "[INFO] Resuming on SPACE key.";
        break;
      fi;
      sleep 1;
      current_time=$( date +%s );
      elapsed=$(( current_time - start_time ));
    done;
    stty sane;

    # return 0;
}; alias pause='pause';

#------------------------------------------------------------------------------#

## Output Utilities: Print a message without newline unless specified
function print () {

    [[ -n ${1:-} ]] && echo -en "${1}" || return 0;

    # return 0;
}; alias print-line='print';

## -------------------------------------------------------------------------- ##
## Function: print_file ()
##
## Purpose:
##   Displays the contents of a given file with optional formatting based on file type.
##
## Input:
##   $1 = Path to the file to be printed
##
## Behavior:
##   - Skips execution if:
##       - No argument is provided
##       - The target file does not exist
##       - The `debug` flag is not enabled
##   - Uses syntax-aware formatting:
##       - For .json files → pretty-prints via `jq`
##       - For .yaml/.yml files → pretty-prints via `yq`
##       - For all others → raw `cat` output
##   - Gracefully falls back to `cat` if `jq` or `yq` fails
##
## Notes:
##   - Intended for debug visibility during execution
##   - Adds a trailing newline after content for readability
##   - Quietly handles errors if the file is malformed or the formatter fails
## -------------------------------------------------------------------------- ##

function print_file () {

    [[ -n ${1:-} ]] || return 0;
    local target_file="${1}";
    if [[ -f "${target_file}" ]]; then
      # list_file "${target_file}";
      case "${target_file}" in
        *.json)  jq . "${target_file}" 2>/dev/null || cat "${target_file}" ;;
        *.ya?ml) yq '.' "${target_file}" 2>/dev/null || cat "${target_file}" ;;
        *)       cat "${target_file}" ;;
      esac;
    fi;

    # return 0;
}; alias print-file='print_file';

## -------------------------------------------------------------------------- ##
## Function: relative_configpath ()
##
## Purpose:
##   Normalizes a full configuration file path by removing the configured base path prefix.
##
## Input:
##   $1 = Full absolute or relative path to a config file
##
## Behavior:
##   - Removes `${configs_dirpath}/` from the beginning of the path, if present
##   - Returns the relative portion (e.g., `cisco/fw1.cfg`)
##
## Output:
##   Prints the relative path to stdout
##
## Notes:
##   - Uses trailing slash normalization to avoid double-slash issues
##   - Used to extract `site` and `device` identifiers from matched config paths
## -------------------------------------------------------------------------- ##

function relative_configpath () {

    local full_path="${1}";
    local prefix="${configs_dirpath%/}/";
    echo -en "$( sed "s|${prefix}||g" <<< "${full_path}" )";

    # return 0;
}; alias relative-configpath='relative_configpath';

#------------------------------------------------------------------------------#

function system_metrics () {

    message "System Information Metrics:";
    newline;
    message "System Uptime:                        $(uptime | sed 's/^.*up //; s/,.*$//')";
    message "System Load (1/5/15 min):             $(uptime | awk -F'load averages*: ' '{print $2}')";
    message "CPU Cores (logical):                  $(getconf _NPROCESSORS_ONLN 2>/dev/null)";
    message "CPU Architecture:                     $(uname -m)";

    case "${OSTYPE}" in
      linux*)
        if [[ -f /proc/meminfo ]]; then
          mem_total=$(awk '/MemTotal/ {printf "%.2f GB", $2 / 1024 / 1024}' /proc/meminfo)
          mem_free=$(awk '/MemFree/ {printf "%.2f GB", $2 / 1024 / 1024}' /proc/meminfo)
          message "Memory - Total:                       ${mem_total}";
          message "Memory - Free:                        ${mem_free}";
        fi
        disk_root=$(df -h / | awk 'NR==2 {print $2 " total, " $4 " free"}')
        message "Disk - Root (/):                      ${disk_root}";
        ;;
      darwin*)
        mem_total=$(sysctl -n hw.memsize 2>/dev/null)
        mem_total_gb=$(awk -v mt="${mem_total}" 'BEGIN { printf "%.2f GB", mt / 1024 / 1024 / 1024 }')
        mem_free=$(vm_stat | awk '/Pages free/ {free=$3} END { printf "%.2f GB", (free * 4096) / 1024 / 1024 / 1024 }')
        disk_root=$(df -h / | awk 'NR==2 {print $2 " total, " $4 " free"}')
        message "Memory - Total:                       ${mem_total_gb}";
        message "Memory - Free:                        ${mem_free}";
        message "Disk - Root (/):                      ${disk_root}";
        ;;
      msys*|cygwin*|win*)
        message "Memory/Disk metrics not supported on Windows shell directly";
        ;;
    esac;

    # return 0;
}; alias system-metrics='system_metrics';

## -------------------------------------------------------------------------- ##
## Function: validate_address ()
##
## Purpose:
##   Validates and normalizes an IP address or CIDR block string stored in $target_address.
##
## Behavior:
##   - Accepts standard IPv4 addresses (e.g., 192.168.1.10) and CIDR notation (e.g., 10.0.0.0/24)
##   - Validates that each octet is within the range 0–255
##   - If a CIDR is present, ensures it's a valid netmask (0–32)
##   - Strips leading zeroes and whitespace from each segment
##   - Reconstructs and updates $target_address with a normalized format
##   - If CIDR is present and not /32, prompts user to confirm continuation
##
## Inputs:
##   - Uses global: `target_address`
##
## Output:
##   - Normalized IP is reassigned to `target_address` if valid
##   - Returns:
##       0 → valid IP or CIDR
##       3 → invalid CIDR format
##       4 → invalid IP segment
##       5 → user aborted due to CIDR confirmation
##       6 → invalid IP format
##
## Notes:
##   - Silent on success unless `verbose` or `debug` is true
##   - Uses `BASH_REMATCH` from regex to extract IP segments
##   - Designed for use in scripts parsing and classifying network blocks
## -------------------------------------------------------------------------- ##

function validate_address () {

    ## IP Address (CIDR-aware) regex:
    local ip_cidr_regex='^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/([0-9]{1,2}))?$';
    if [[ "${target_address}" =~ ${ip_cidr_regex} ]]; then
            ## Normalize each segment and validate
            local -a segments=(
              "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}" "${BASH_REMATCH[4]}"
            );
            local cidr="${BASH_REMATCH[6]:-}";
            ## Validate CIDR before building target_address
            if [[ -n "${cidr}" ]]; then
              if ! [[ "${cidr}" =~ ^[0-9]+$ ]] || (( cidr < 0 || cidr > 32 )); then
                [[ "${debug}" == true ]] && \
                   warning "Invalid CIDR mask '/${cidr}' in ${target_address}";
                return 3;
              fi;
            fi;
            for i in "${!segments[@]}"; do
              segment="$(
                echo -en "${segments[$i]}" | sed -E 's/^[[:space:]]*0*([0-9]+)[[:space:]]*$/\1/'
              )";
              if ! [[ "${segment}" =~ ^[0-9]+$ ]] || (( segment < 0 || segment > 255 )); then
                [[ "${debug}" == true ]] && \
                   warning "Invalid IP segment after normalization (${segment}) in ${target_address}";
                return 4;
              fi;
              segments[$i]="${segment}";
            done; local segments="${segments[*]}";
            ## Reconstruct normalized IP with CIDR (only if valid)
            ## local fixed_address="${segments[0]}.${segments[1]}.${segments[2]}.${segments[3]}";
            local fixed_address="${segments// /.}";
            [[ -n "${cidr}" ]] && fixed_address+="/${cidr}";
            if [[ "${target_address}" != "${fixed_address}" ]]; then
                [[ "${verbose}" == true ]] && \
                   warning "IP address was corrected to '${fixed_address}'";
                target_address="${fixed_address}";
              # else  [[ "${verbose}" == true ]] && \
              #          echo -en "${target_index:-}Valid IP Address: ${target_address}"; newline;
            fi;
            ## Prompt only if valid CIDR and not /32
            if [[ -n "${cidr}" && "${cidr}" -lt 32 ]]; then
              local confirmation='';
              read -t 3 -p "Proceed with CIDR block [ /${cidr} ]? (type 'n' to abort): " confirmation || true;
              newline;
              if [[ "${confirmation}" =~ ^(N|n)$ ]]; then
                      [[ "${verbose}" == true ]] && \
                         echo -en "Skipping CIDR block: ${target_address}"; newline;
                      return 5;
                elif [[ -z "${confirmation}" ]]; then
                      [[ "${verbose}" == true ]] && \
                         echo -en "Auto-continue with CIDR block: ${target_address}"; newline;
                else  [[ "${verbose}" == true ]] && \
                         echo -en "Proceeding with CIDR block: ${target_address}"; newline;
              fi;
            fi;
      else  [[ "${debug}" == true ]] && \
               warning "Invalid IP or CIDR format: ${target_address}";
            return 6;
    fi;

    # return 0;
}; alias validate-address='validate_address';

#------------------------------------------------------------------------------#

## Output Utilities: Print an error message in consistent format
function warning () {

    [[ -n ${1:-} ]] && local message="${1}" || return 0;
    echo -e "\nError: ${message}";

    # return 0;
}; alias warning-message='warning';

#------------------------------------------------------------------------------#

## POSIX locale standard
export LC_ALL=C;
export nl="\n";

export default_addresses="ips.list";
export default_devices="devices.list";
export default_matrix="matrix.json";

export cache_location=".cache";

export logs_location="logs";
mkdir -p ${logs_location} 2>/dev/null || true;

export jobs_location="jobs";
mkdir -p ${jobs_location} 2>/dev/null || true;

export console_location="console";
mkdir -p ${console_location} 2>/dev/null || true;

export actions_logfile="${console_location}/run.console";
touch "${actions_logfile}" 2>/dev/null || true;

export targets_location="targets";
export targets_logfile="${cache_location}/targets.jobs";

export divisor="--$(
  echo -n "$( basename "${BASH_SOURCE[0]}" )" | \
  base64 | \
  tr -dc 'a-zA-Z0-9'
)--";  ## message "DEBUG: divisor = '${divisor}'";

#------------------------------------------------------------------------------#
