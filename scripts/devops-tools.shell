#!/usr/bin/env bash

# File: scripts/devops-tools.shell
# Purpose: Sharing common features across scripts.

# Prevent re-sourcing and ensure one-time initialization
if [[ -n "${__DEVOPS_TOOLS_SOURCED:-}" ]]; then return 0; fi;
readonly __DEVOPS_TOOLS_SOURCED=1;

# Require Bash 4.0+ for associative array support (only runs once)
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "Error: Bash 4.0 or newer is required. Current version: ${BASH_VERSINFO[*]}";
  exit 1;
fi;

# POSIX locale standard
export LC_ALL=C;

#------------------------------------------------------------------------------#
# Output Utilities

# Print a message without newline unless specified
function print () {
  [[ -n ${1:-} ]] && echo -en "${1}" || return 0;
};

# Print N newlines (default: 1)
function newline () {
  local count="${1:-1}";
  for ((i = 0; i < count; i++)); do echo; done;
};

# Print an error message in consistent format
function error_message () {
  [[ -n ${1:-} ]] && local message="${1}" || return 0;
  print "\nError: ${message}"; newline;
}; alias error-message='error_message'

#------------------------------------------------------------------------------#
# Timestamped Logging Utilities

function log_info () {
  [[ -n ${1:-} ]] || return 0;
  print "[INFO]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}"; newline;
}; alias log-info='log_info';

function log_warn () {
  [[ -n ${1:-} ]] || return 0;
  print "[WARN]  $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2; newline;
}; alias log-warn='log_warn';

function log_error () {
  [[ -n ${1:-} ]] || return 0;
  print "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - ${1}" >&2; newline;
}; alias log-error='log_error';

# Exit script with error message and exit code
function exit_error () {
  local msg="${1:-Unspecified fatal error}";
  local code="${2:-1}";
  log_error "${msg}";
  exit "${code}";
}; alias exit-error='exit_error';

#------------------------------------------------------------------------------#

function display_help () {
    local script_name="${1}";
    local mode="${2}";
    local -a help_lines=();
    local nl="\n";
    local indent="    ";
    local padding="$( printf '%*s' ${#script_name} ' ' )";
    ## Header
    help_lines+=( "Usage: ${script_name} [OPTIONS]${nl}" );
    ## Shared Options
    help_lines+=( "Options:${nl}" );
    help_lines+=( "  -c, --configs      Path to configuration files ( default: ./configs )" );
    help_lines+=( "  -x, --file-ext     Comma-separated list of config file extensions ( e.g., cfg,conf,cnf )" );
    help_lines+=( "  -m, --matrix       Path to translation matrix ( matrix.json )" );
    help_lines+=( "  -r, --reports      Folder to store generated reports ( default: reports )" );
    ## Script-Specific Options
    case "${mode}" in
      listings )
        help_lines+=( "  -l, --interval     Interval ( in seconds ) between job dispatch checks [default: 0.1]" );
        help_lines+=( "  -i, --ips-list     File containing list of target IP addresses" );
        help_lines+=( "  -j, --jobs         Count of concurrent jobs to run in parallel${nl}" );
        ## Examples for listings
        help_lines+=( "Examples:${nl}" );
        help_lines+=( "${script_name} --interval=0.05 \\" );
        help_lines+=( "${padding} --ips-list=\"ips.list\" \\" );
        help_lines+=( "${padding} --jobs=10 \\" );
        ;;
      configs )
        help_lines+=( "  -n, --index        Padded job index ( provided by controlling script )" );
        help_lines+=( "  -i, --ip-addr      Target IP address to scan for in configurations${nl}" );
        ## Examples for configs
        help_lines+=( "Examples:${nl}" );
        help_lines+=( "${script_name} --index=\"  --> \" \\" );
        help_lines+=( "${padding} --ip-addr=\"10.0.0.1\" \\" );
        ;;
    esac;
    ## Flags
    help_lines+=( "${padding} --configs=\"configs\" \\" );
    help_lines+=( "${padding} --file-ext=\"cfg\" \\" );
    help_lines+=( "${padding} --matrix=\"matrix.json\" \\" );
    help_lines+=( "${padding} --reports=\"reports\" ;${nl}" );
    help_lines+=( "Flags:${nl}" );
    help_lines+=( "  --help             Show this help message and exit" );
    help_lines+=( "  --debug            Enable debug mode with trace output" );
    help_lines+=( "  --dry-run          Print actions without executing them" );
    help_lines+=( "  --verbose          Enable verbose output${nl}" );
    ## Output
    newline;
    for line in "${help_lines[@]}"; do
      print "${indent}${line}"; newline;
    done;
    return 0;
}; alias display-help='display_help_generic'
