#!/usr/bin/env bash

## -------------------------------------------------------------------------- ##
## File: scripts/network-extract.shell
##
## Purpose:
##   Extracts targeted configuration blocks from vendor-native network
##   configuration files (e.g., Cisco, Fortinet) using platform-specific
##   AWK reducers. Designed for use as a high-speed preprocessing engine.
##
## Overview:
##   - Accepts a config file and a search pattern (IPs, names, etc).
##   - Detects platform automatically (or accepts it via --platform).
##   - Dispatches to: ./scripts/extract/<vendor>-configs.awk
##   - Outputs reduced config to file (--extract) or to console (--console).
##   - Fully traceable via verbose logs.
##
## Usage:
##   bash ./scripts/network-extract.shell \
##     --search=10.0.0.1 \
##     --config=configs/fw-1.cfg \
##     --extract=./tmp/fw1-reduced.cfg \
##     [--platform=cisco|fortinet] \
##     [--console] \
##     [--verbose]
##
## Requirements:
##   - Bash v4+, GNU awk, grep, sed
##   - ./scripts/extract/<vendor>-configs.awk must exist
##
## Notes:
##   - Never embed vendor-specific parsing logic in this script.
##   - This script is called by network-configs.shell as a subroutine.
##   - Designed for compatibility with JSON-ready parsing workflows.
##
## -------------------------------------------------------------------------- ##

set -euo pipefail  ## Strict mode: exit on error, undefined var use, and pipeline failure
# set -x;          ## Enable for execution tracing/debugging

## POSIX locale standard
export LC_ALL=C   ## Ensure consistent sorting and character handling (POSIX-compliant)

# Create a secure, temporary working directory (auto-cleaned at script exit)
export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

export nl="\n";

#------------------------------------------------------------------------------#

## Load common utility functions (logging, platform detection, etc.)
source ./scripts/devops-resources.shell;

## Load common or function-based helping modules
source ./scripts/devops-helpers.shell;

#------------------------------------------------------------------------------#

function main () {

    ## tracking_process ${FUNCNAME} "${@}";
    oIFS="${IFS}";

    ## Process command-line arguments and map them to local variables
    for xitem in "${@}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";

      #### ---------------------------------------------------------------------
      ## Match accepted arguments
      [[ $key =~ ^(config|c)$ ]] && local target_config="${value}";
      [[ $key =~ ^(console|o)$ ]] && local console_output=true;
      [[ $key =~ ^(extract|x)$ ]] && local extract_location="${value}";
      [[ $key =~ ^(logger|l)$ ]] && local target_logfile="${value}";
      [[ $key =~ ^(platform|p)$ ]] && local target_platform="${value}";
      [[ $key =~ ^(search|s)$ ]] && local search_pattern="${value}";

      #### ---------------------------------------------------------------------
      ## Special options
      [[ $key == "help" ]] && local script_helper=true;
      [[ $key == "debug" ]] && local debug=true;
      [[ $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true;

    done; IFS="${oIFS}";

    #### -----------------------------------------------------------------------
    ## Set default values if not supplied
    [[ -z ${debug:-} ]] && debug=false;
    [[ -z ${dry_run:-} ]] && dry_run=false;
    [[ -z ${verbose:-} ]] && verbose=false;

    #### -----------------------------------------------------------------------
    [[ -z "${console_output:-}" ]] && export console_output=false;

    if [[ -z "${target_logfile:-}" ]]; then
      local target_logfile="${logs_location}/console/${script_filename}.console";
      touch "${target_logfile}";
    fi;
    # touchh "${target_logfile}";  ## Clear the log file if it exists

    #### -----------------------------------------------------------------------
    ## Display usage help if requested
    [[ -z ${script_helper:-} ]] && script_helper=false;
    if [[ ${script_helper:-} == true ]]; then
      network_extract__helper;
      exit 0;
    fi;

    #### -----------------------------------------------------------------------
    ## Prompt for search pattern if not provided
    local prompt_message="Enter search pattern (IP address, CIDR, etc.): ";
    while [[ -z "${search_pattern}" ]]; do
      newline;
      read -e -p "${prompt_message}" search_pattern;
      if [[ "${search_pattern// /}" == "" ]]; then
        warning "Search pattern is required.";
        search_pattern=false;
        return 1;
      fi;
    done;

    #### -----------------------------------------------------------------------
    ## Normalize search pattern input into search_terms[]
    declare -a search_terms=();

    if [[ -f "${search_pattern}" && "${search_pattern}" != *,* ]]; then
            ## Read IPs from file
            mapfile -t search_terms < <(
              tr -d '\r' < "${search_pattern}" | \
              grep -v '^\s*$' | grep -v '^#'
            );
      else  ## Inline string â€” preserve full IPs and split only on clear delimiters
            IFS=$'\n' read -r -d '' -a search_terms <<< "$(
              echo "${search_pattern}" | \
              sed 's/[][|;:]/ /g' | tr ', ' '\n\n' | \
              grep -v '^\s*$'
            )" || true;
            ## Write to temp file
            search_pattern="${TMP_DIR}/ips.list";
            printf "%s\n" "${search_terms[@]}" > "${search_pattern}";
    fi;

    #### -----------------------------------------------------------------------
    ## Compact form of targets for logging (first and last elements only)
    local first_search_entry="${search_terms[0]}"
    local last_search_entry="${search_terms[-1]}"
    local target_search_range="${first_search_entry}, ... ,${last_search_entry}"

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        message "Search Pattern: [ ${search_pattern} ]";
        local count=${#search_terms[@]};
        if (( count == 0 )); then
                warning "No search terms provided or extracted.";
          else  print "Search Listing: [ ${target_search_range} ] (${count})";
        fi;
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Prompt for source configuration file if not provided
    local prompt_message="Enter configuration file to be parsed: ";
    while [[ -z "${target_config:-}" ]]; do
      newline;
      read -e -p "${prompt_message}" target_config;
      if [[ -z "${target_config}" || ! -f "${target_config}" || ! -r "${target_config}" ]]; then
        warning "Provided file [ ${target_config:-} ] does not exist or is not readable.";
        target_config="";
        continue;
      fi;
    done;

    #### -----------------------------------------------------------------------
    if [[ -z "${target_platform:-}" ]]; then
      set +e;
      detect_vendor "${target_config}";
      local vendor_code=${?};
      set -e;
      case "${vendor_code}" in
        1)  target_platform="fortinet";
            ;;
        2)  target_platform="cisco";
            ;;
        3)  target_platform="unknown";
            {
              warning "Unsupported configuration type: ${target_config}";
              newline 2;
            } >> "${target_logfile:-/dev/null}";
            return 1;
            ;;
        *)  target_platform="unknown";
            {
              warning "Unknown configuration type: ${target_config}";
              newline 2;
            } >> "${target_logfile:-/dev/null}";
            return 1;
            ;;
      esac;

    fi;

    #### -------------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        newline;
        message "Target Config: [ ${target_config} ] ( ${target_platform} )";
        ls -al --color=auto "${target_config}" 2>/dev/null;
      } >> "${target_logfile:-/dev/null}";
    fi;

    #### -------------------------------------------------------------------------
    ## Extraction path resolution (optional, silent if unset)
    if [[ -n "${extract_location:-}" ]]; then
            if [[ "${extract_location##*.}" == "${target_config##*.}" ]]; then
                    ## If same extension as source, treat as direct file path
                    final_output="${extract_location}";
              else  ## Otherwise treat as a base directory and replicate source path inside
                    base_output="${extract_location%/}";
                    rel_path="$( echo "${target_config}" | sed 's|^\./||' )";
                    final_output="${base_output}/${rel_path}";
            fi;
            extract_location="${final_output}";
            output_dir="$( dirname "${extract_location}" )";
            if [[ ! -d "${output_dir}" ]]; then
              mkdir -p "${output_dir}" || {
                  message "Warning: Failed to create output directory: ${output_dir}" >&2
                  newline;
              };
            fi;
      else  {
              warning "Skipping step to export the extracted configuration.";
            } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Resolve the real path of this script
    local SCRIPT_PATH="$(
      command -v -- "${BASH_SOURCE[0]}"
    )";
    local SCRIPT_DIR="$(
      dirname -- "${SCRIPT_PATH}"
    )";

    ## Locate vendor-specific AWK parser
    local script_filename="${target_platform}-configs.awk";
    local script_filepath="${SCRIPT_DIR}/extract/${script_filename}";

    ## Validate presence of the AWK script
    if [[ ! -f "${script_filepath}" ]]; then
      {
        warning "AWK script '${script_filename}' was not found [ ${target_platform} ]";
        message "Expected path: ${script_filepath}";
        newline;
      } >> "${target_logfile:-/dev/null}";
      return 1;
    fi;

    #### -----------------------------------------------------------------------
    ## Prepare AWK command
    declare -a execute=(
      $(which awk)
      -v "targets=$( IFS=','; echo "${search_terms[*]}" )"
      -f "${script_filepath}"
      "${target_config}"
    );

    local awk_bin="$( which awk )";
    local awk_args="-v targets=\"${target_search_range}\"";
    local base_cmd="${awk_bin} ${awk_args}";

    # Calculate indent based on the length of base_cmd
    local indent=$( printf '%*s' "${#awk_bin}" '' );

    #### -----------------------------------------------------------------------
    ## Log execution if verbose
    if [[ "${verbose}" == true ]]; then
      {
        newline;
        message "Executing AWK script [ ${script_filepath} ]";
        message "${base_cmd} \\";
        message "${indent} -f ${script_filepath} \\";
        message "${indent}    ${target_config}";
        newline;
      } >> "${target_logfile:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    ## Execute and capture output
    local extracted_configuration="$( "${execute[@]}" 2>&1 )";
    result=$?;

    #### -----------------------------------------------------------------------
    if [[ -n "${extracted_configuration}" ]]; then

            # print "${extracted_configuration}" > "${extract_location}";
            print "${extracted_configuration}" | \
            sed '1{/^[[:space:]]*$/d;}' \
            > "${extract_location}";
            newline 2 >> "${extract_location}";

            if [[ "${verbose}" == true ]]; then
              {
                message "Configuration File [ ${extract_location} ]";
                newline;
                cat -n "${extract_location}";
                newline;
              } >> "${target_logfile:-/dev/null}";
            fi;

            if [[ "${console_output}" == true ]]; then
              {
                message "Extracted Configuration:";
                newline;
                print "${extracted_configuration}" | \
                sed '1{/^[[:space:]]*$/d;}';
                newline;
              };
            fi;

      else  {
              warning "No matching blocks were found. Output to file was not written.";
              newline;
            } >> "${target_logfile:-/dev/null}";
            return 1;

    fi;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        print_file "${target_logfile:-/dev/null}";
      } >> "${network_extract__console:-/dev/null}";
    fi;

    #### -----------------------------------------------------------------------
    if [[ "${verbose}" == true ]]; then
      {
        print_file "${target_logfile:-/dev/null}";
      } >> "${network_configs__console:-/dev/null}";
    fi;

    # return 0;
}; alias parse-cisco='main';

#------------------------------------------------------------------------------#

[[ -z "${script_name+x}" ]] && export script_name="${0}";

export logs_location="logs";
mkdir -p ${logs_location}/console 2>/dev/null || true;

script_filename="${BASH_SOURCE[0]##*/}";
script_filename="${script_filename%.*}";

export network_extract__console="${logs_location}/console/${script_filename}.console";
touch "${network_extract__console}" || {
  warning "Failed to create console log file: ${network_extract__console}";
  network_extract__console="/dev/null";
};

#------------------------------------------------------------------------------#

if [[ ${#@} -eq 0 || "${1,,}" =~ ^-*(h|help)$ ]]; then
        main --help ;
  else  main "${@}";
        result=${?}; exit ${result};
        ## newline; message "Done."; newline;
fi;

#------------------------------------------------------------------------------#
