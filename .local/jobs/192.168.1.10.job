+ set -euo pipefail
+ export LC_ALL=C
+ LC_ALL=C
++ mktemp -d
+ export TMP_DIR=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw
+ TMP_DIR=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw
+ trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT
+ source ./scripts/tools-devops.shell
++ [[ -n '' ]]
++ readonly __TOOLS_DEVOPS_SOURCED=1
++ __TOOLS_DEVOPS_SOURCED=1
++ [[ 5 -lt 4 ]]
++ alias log-info=log_info
++ alias log-warn=log_warn
++ alias log-error=log_error
++ alias error-message=error_message
++ alias exit-error=exit_error
++ alias list-file=list_file
++ alias print-file=print_file
++ alias detect-platform=detect_platform
++ alias install-packages=install_packages
++ alias install-missing=install_missing
++ alias display-help=display_help_generic
++ alias relative-configpath=relative_configpath
++ alias validate-address=validate_address
++ export LC_ALL=C
++ LC_ALL=C
++ export 'nl=\n'
++ nl='\n'
++ local_state_dir=.local
++ mkdir -p .local/errors .local/jobs .local/stats
++ export stats_folder=.local/stats/
++ stats_folder=.local/stats/
++ export reports_logsfile=.local/stats//reports.jobs
++ reports_logsfile=.local/stats//reports.jobs
++ export started_logsfile=.local/stats//started.jobs
++ started_logsfile=.local/stats//started.jobs
++ export success_logsfile=.local/stats//success.jobs
++ success_logsfile=.local/stats//success.jobs
++ export targets_logsfile=.local/stats//targets.jobs
++ targets_logsfile=.local/stats//targets.jobs
+++ base64
+++ date +%s%N
+++ tr -dc a-zA-Z0-9
++ export divisor=MTc0NzQ0Mzg4MDAzODQwNTAwMAo
++ divisor=MTc0NzQ0Mzg4MDAzODQwNTAwMAo
+ source ./scripts/tools-configs.shell
++ [[ -n '' ]]
++ readonly __TOOLS_EXTRACTION_SOURCED=1
++ __TOOLS_EXTRACTION_SOURCED=1
++ alias extract-configs=extract_configs
++ alias process-configs=process_configs
+ alias parse-configs=main
+ matched_blocks_byfile=()
+ declare -gA matched_blocks_byfile
+ export script_name=./scripts/parse-configs.shell
+ script_name=./scripts/parse-configs.shell
+ [[ 9 -ge 1 ]]
+ [[ --configs=configs =~ ^-*(h|help)$ ]]
+ main --configs=configs --ip-addr=192.168.1.10 --index=04 --matrix=matrix.json --reports=reports --file-ext=cfg,conf,cnf --classify --verbose --debug
+ file_extensions=()
+ declare -a file_extensions
+ oIFS=' 	
'
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --configs=configs
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ configs =~ ^(classify|g)$ ]]
+ [[ configs =~ ^(file-ext|x)$ ]]
+ [[ configs =~ ^(configs|c)$ ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ [[ configs =~ ^(index|n)$ ]]
+ [[ configs =~ ^(ip-addr|i)$ ]]
+ [[ configs =~ ^(logs|o)$ ]]
+ [[ configs =~ ^(matrix|m)$ ]]
+ [[ configs =~ ^(reports|r)$ ]]
+ [[ configs =~ ^(validate|v)$ ]]
+ [[ configs == \h\e\l\p ]]
+ [[ configs == \d\e\b\u\g ]]
+ [[ configs == \d\r\y\-\r\u\n ]]
+ [[ configs == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --ip-addr=192.168.1.10
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ ip-addr =~ ^(classify|g)$ ]]
+ [[ ip-addr =~ ^(file-ext|x)$ ]]
+ [[ ip-addr =~ ^(configs|c)$ ]]
+ [[ ip-addr =~ ^(index|n)$ ]]
+ [[ ip-addr =~ ^(ip-addr|i)$ ]]
+ local target_address=192.168.1.10
+ [[ ip-addr =~ ^(logs|o)$ ]]
+ [[ ip-addr =~ ^(matrix|m)$ ]]
+ [[ ip-addr =~ ^(reports|r)$ ]]
+ [[ ip-addr =~ ^(validate|v)$ ]]
+ [[ ip-addr == \h\e\l\p ]]
+ [[ ip-addr == \d\e\b\u\g ]]
+ [[ ip-addr == \d\r\y\-\r\u\n ]]
+ [[ ip-addr == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --index=04
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ index =~ ^(classify|g)$ ]]
+ [[ index =~ ^(file-ext|x)$ ]]
+ [[ index =~ ^(configs|c)$ ]]
+ [[ index =~ ^(index|n)$ ]]
+ local target_index=04
+ [[ index =~ ^(ip-addr|i)$ ]]
+ [[ index =~ ^(logs|o)$ ]]
+ [[ index =~ ^(matrix|m)$ ]]
+ [[ index =~ ^(reports|r)$ ]]
+ [[ index =~ ^(validate|v)$ ]]
+ [[ index == \h\e\l\p ]]
+ [[ index == \d\e\b\u\g ]]
+ [[ index == \d\r\y\-\r\u\n ]]
+ [[ index == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --matrix=matrix.json
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ matrix =~ ^(classify|g)$ ]]
+ [[ matrix =~ ^(file-ext|x)$ ]]
+ [[ matrix =~ ^(configs|c)$ ]]
+ [[ matrix =~ ^(index|n)$ ]]
+ [[ matrix =~ ^(ip-addr|i)$ ]]
+ [[ matrix =~ ^(logs|o)$ ]]
+ [[ matrix =~ ^(matrix|m)$ ]]
+ local matrix_filename=matrix.json
+ [[ matrix =~ ^(reports|r)$ ]]
+ [[ matrix =~ ^(validate|v)$ ]]
+ [[ matrix == \h\e\l\p ]]
+ [[ matrix == \d\e\b\u\g ]]
+ [[ matrix == \d\r\y\-\r\u\n ]]
+ [[ matrix == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --reports=reports
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ reports =~ ^(classify|g)$ ]]
+ [[ reports =~ ^(file-ext|x)$ ]]
+ [[ reports =~ ^(configs|c)$ ]]
+ [[ reports =~ ^(index|n)$ ]]
+ [[ reports =~ ^(ip-addr|i)$ ]]
+ [[ reports =~ ^(logs|o)$ ]]
+ [[ reports =~ ^(matrix|m)$ ]]
+ [[ reports =~ ^(reports|r)$ ]]
+ local reports_folder=reports
+ [[ reports =~ ^(validate|v)$ ]]
+ [[ reports == \h\e\l\p ]]
+ [[ reports == \d\e\b\u\g ]]
+ [[ reports == \d\r\y\-\r\u\n ]]
+ [[ reports == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --file-ext=cfg,conf,cnf
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ file-ext =~ ^(classify|g)$ ]]
+ [[ file-ext =~ ^(file-ext|x)$ ]]
+ file_extensions+=($(print "${value}" | tr ':,;\n ' '\n'))
++ print cfg,conf,cnf
++ [[ -n cfg,conf,cnf ]]
++ echo -en cfg,conf,cnf
++ tr ':,;\n ' '\n'
+ [[ file-ext =~ ^(configs|c)$ ]]
+ [[ file-ext =~ ^(index|n)$ ]]
+ [[ file-ext =~ ^(ip-addr|i)$ ]]
+ [[ file-ext =~ ^(logs|o)$ ]]
+ [[ file-ext =~ ^(matrix|m)$ ]]
+ [[ file-ext =~ ^(reports|r)$ ]]
+ [[ file-ext =~ ^(validate|v)$ ]]
+ [[ file-ext == \h\e\l\p ]]
+ [[ file-ext == \d\e\b\u\g ]]
+ [[ file-ext == \d\r\y\-\r\u\n ]]
+ [[ file-ext == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --classify
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ classify =~ ^(classify|g)$ ]]
+ export classify_targets=true
+ classify_targets=true
+ [[ classify =~ ^(file-ext|x)$ ]]
+ [[ classify =~ ^(configs|c)$ ]]
+ [[ classify =~ ^(index|n)$ ]]
+ [[ classify =~ ^(ip-addr|i)$ ]]
+ [[ classify =~ ^(logs|o)$ ]]
+ [[ classify =~ ^(matrix|m)$ ]]
+ [[ classify =~ ^(reports|r)$ ]]
+ [[ classify =~ ^(validate|v)$ ]]
+ [[ classify == \h\e\l\p ]]
+ [[ classify == \d\e\b\u\g ]]
+ [[ classify == \d\r\y\-\r\u\n ]]
+ [[ classify == \v\e\r\b\o\s\e ]]
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --verbose
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ verbose =~ ^(classify|g)$ ]]
+ [[ verbose =~ ^(file-ext|x)$ ]]
+ [[ verbose =~ ^(configs|c)$ ]]
+ [[ verbose =~ ^(index|n)$ ]]
+ [[ verbose =~ ^(ip-addr|i)$ ]]
+ [[ verbose =~ ^(logs|o)$ ]]
+ [[ verbose =~ ^(matrix|m)$ ]]
+ [[ verbose =~ ^(reports|r)$ ]]
+ [[ verbose =~ ^(validate|v)$ ]]
+ [[ verbose == \h\e\l\p ]]
+ [[ verbose == \d\e\b\u\g ]]
+ [[ verbose == \d\r\y\-\r\u\n ]]
+ [[ verbose == \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ for xitem in "${@}"
+ IFS==
+ read -r key value
++ echo -e --debug
++ sed -e '1s|^\(-\)\{1,\}||'
+ [[ debug =~ ^(classify|g)$ ]]
+ [[ debug =~ ^(file-ext|x)$ ]]
+ [[ debug =~ ^(configs|c)$ ]]
+ [[ debug =~ ^(index|n)$ ]]
+ [[ debug =~ ^(ip-addr|i)$ ]]
+ [[ debug =~ ^(logs|o)$ ]]
+ [[ debug =~ ^(matrix|m)$ ]]
+ [[ debug =~ ^(reports|r)$ ]]
+ [[ debug =~ ^(validate|v)$ ]]
+ [[ debug == \h\e\l\p ]]
+ [[ debug == \d\e\b\u\g ]]
+ export debug=true
+ debug=true
+ [[ debug == \d\r\y\-\r\u\n ]]
+ [[ debug == \v\e\r\b\o\s\e ]]
+ IFS=' 	
'
+ [[ -z true ]]
+ [[ -z true ]]
+ [[ '' == true ]]
+ [[ -z true ]]
+ [[ -z x ]]
+ [[ 3 -eq 0 ]]
+ export configs_dirpath=configs
+ configs_dirpath=configs
+ source_configs=()
+ declare -ga source_configs
+ local target_configlist_json=targets/192.168.1.10.json
+ [[ ! -f targets/192.168.1.10.json ]]
+ mapfile -t source_configs
++ jq -r '.configs[] | "\( .config.site )/\( .config.device )"' targets/192.168.1.10.json
+ for i in "${!source_configs[@]}"
+ [[ misc/switch1.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch1.conf
+ for i in "${!source_configs[@]}"
+ [[ misc/switch4.conf != \c\o\n\f\i\g\s\/* ]]
+ source_configs[$i]=configs/misc/switch4.conf
+ [[ true == true ]]
+ print 'Config JSON file used: targets/192.168.1.10.json'
+ [[ -n Config JSON file used: targets/192.168.1.10.json ]]
+ echo -en 'Config JSON file used: targets/192.168.1.10.json'
Config JSON file used: targets/192.168.1.10.json+ print 'Extracted config paths from JSON:'
+ [[ -n Extracted config paths from JSON: ]]
+ echo -en 'Extracted config paths from JSON:'
Extracted config paths from JSON:+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch1.conf'
+ [[ -n  - configs/misc/switch1.conf ]]
+ echo -en ' - configs/misc/switch1.conf'
 - configs/misc/switch1.conf+ for cfg in "${source_configs[@]}"
+ print ' - configs/misc/switch4.conf'
+ [[ -n  - configs/misc/switch4.conf ]]
+ echo -en ' - configs/misc/switch4.conf'
 - configs/misc/switch4.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local matrix_filename=matrix.json
+ [[ ! -f matrix.json ]]
+ jq -e 'length > 0' matrix.json
++ cat matrix.json
+ export 'matrix_configs=[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ matrix_configs='[
  {
    "match": ["BU1-NETWORK", "SOME-THING"],
    "group": "Identified Matching Entries"
  },
  {
    "match": ["Corporate HQ Subnets", "Server-192-168-1-10"],
    "group": "Business-Unit-HQ"
  },
  {
    "match": ["Remote-Site-Office", "All-Offices", "Branch-Office"],
    "group": "Business-Unit-Remote"
  },
  {
    "match": ["HQ-Server", "Production-Servers"],
    "group": "Business-Unit-Production"
  },
  {
    "match": ["Web-Server", "Data-Backup"],
    "group": "Business-Unit-Backup"
  },
  {
    "match": ["web_pool", "db_pool"],
    "group": "Business-Unit-Apps"
  },
  {
    "match": ["Vlan1", "Vlan2"],
    "group": "Business-Unit-Networks"
  },
  {
    "match": ["External-203-0-113-25"],
    "group": "Business-Unit-External"
  },
  {
    "match": ["Unused-Host"],
    "group": "Business-Unit-Orphan"
  }
]'
+ export reports_folder=reports
+ reports_folder=reports
+ mkdir -p reports/json reports/objects
+ [[ -z 04 ]]
+ [[ -z false ]]
+ [[ -z 192.168.1.10 ]]
++ print 192.168.1.10
++ [[ -n 192.168.1.10 ]]
++ echo -en 192.168.1.10
++ sed -E 's/[[:space:]]+//g'
++ tr -d '\r'
+ target_address=192.168.1.10
+ [[ false == true ]]
+ export tmp_fragments=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ tmp_fragments=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch1.conf 192.168.1.10 targets/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ local config_file=configs/misc/switch1.conf
+ local target_pattern=192.168.1.10
+ local target_listing=targets/192.168.1.10.json
+ local json_output=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ [[ ! -f configs/misc/switch1.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch1.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch1.conf ]]
++ stat -c%s configs/misc/switch1.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch1.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch1.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch1.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0

interface Vlan10
 ip address 10.0.1.2 255.255.255.0

interface Vlan20
 ip address 192.168.1.10 255.255.255.0

object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 172.31.255.254 255.255.255.0
interface Vlan10
 ip address 10.0.1.2 255.255.255.0
interface Vlan20
 ip address 192.168.1.10 255.255.255.0
object-group network Avengers-Office
 description VLAN access layer
 network-object host 10.0.0.1
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzQ0Mzg4MDAzODQwNTAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzQ0Mzg4MDAzODQwNTAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0
interface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0
interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0
object-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ local 'message=Loaded 4 config blocks'
+ print 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ echo -en 'Loaded 4 config blocks'
Loaded 4 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS=' 	
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.31.255.254 255.255.255.0' 'interface Vlan10MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 10.0.1.2 255.255.255.0' 'interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0' 'object-group network Avengers-OfficeMTc0NzQ0Mzg4MDAzODQwNTAwMAo description VLAN access layerMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.0.1MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
++ grep -E '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)'
+ matched_objects=('interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0')
+ declare -a matched_objects
+ IFS=' 	
'
+ [[ true == true ]]
+ message 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ local 'message=Loaded 1 config blocks'
+ print 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ echo -en 'Loaded 1 config blocks'
Loaded 1 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ restored_block=()
+ declare -a restored_block
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ print 'Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en 'Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
Serialized Line: interface Vlan20MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzQ0Mzg4MDAzODQwNTAwMAo/\n/g'
+ restored_block='interface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ true == true ]]
+ message 'Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ print 'Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
Restored Configuration:
interface Vlan20
 ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 192.168.1.10 configs/misc/switch1.conf 'interface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ local target_pattern=192.168.1.10
+ local config_path=configs/misc/switch1.conf
+ local 'restored_block=interface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='interface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ -z interface Vlan20
 ip address 192.168.1.10 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ print '[process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\ninterface Vlan20
 ip address 192.168.1.10 255.255.255.0'
[process_configs] Raw Block:
interface Vlan20
 ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ object_line='interface Vlan20'
+ [[ -z interface Vlan20 ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=interface
++ awk '{$1=""; print substr($0,2)}'
+ type_value=Vlan20
+ [[ true == true ]]
+ print '[process_configs] object   : interface'
+ [[ -n [process_configs] object   : interface ]]
+ echo -en '[process_configs] object   : interface'
[process_configs] object   : interface+ print '[process_configs] type     : Vlan20'
+ [[ -n [process_configs] type     : Vlan20 ]]
+ echo -en '[process_configs] type     : Vlan20'
[process_configs] type     : Vlan20+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='interface Vlan20'
+ [[ -z interface Vlan20 ]]
+ [[ interface vlan20 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='ip address 192.168.1.10 255.255.255.0'
+ [[ -z ip address 192.168.1.10 255.255.255.0 ]]
+ [[ ip address 192.168.1.10 255.255.255.0 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  2 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - ip address 192.168.1.10 255.255.255.0'
+ [[ -n   - ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '  - ip address 192.168.1.10 255.255.255.0'
  - ip address 192.168.1.10 255.255.255.0+ local matched_line
++ grep -E '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='ip address 192.168.1.10 255.255.255.0'
+ [[ -z ip address 192.168.1.10 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ print '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
[process_configs] Matched: ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Vlan20
++ jq -r --arg key Vlan20 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
++ jq -r --arg desc false 'map( select( .match[]? == $desc ) ) | .[0].group'
+ group_val=null
+ [[ -z null ]]
+ [[ null == \n\u\l\l ]]
+ group_val=Unclassified
+ [[ true == true ]]
+ message '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ local 'message=[process_configs] Group: Unclassified'
+ print '[process_configs] Group: Unclassified'
+ [[ -n [process_configs] Group: Unclassified ]]
+ echo -en '[process_configs] Group: Unclassified'
[process_configs] Group: Unclassified+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'ip address 192.168.1.10 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "ip address 192.168.1.10 255.255.255.0"
]'
+ [[ 1 -eq 1 ]]
++ jq -n --arg object interface --arg description false --argjson entries '[
  "ip address 192.168.1.10 255.255.255.0"
]' --arg group Unclassified '{
                  object: $object,
                  type: false,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ jq .
{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ print '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
} ]]
++ printf '%s\n' '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Unclassified"
}'
++ jq -s --arg site configs/misc --arg device switch1.conf '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ [[ -n {
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
} ]]
+ echo -en '{
  "site": "misc",
  "device": "switch1.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Unclassified"
    }
  ]
}'
+ return 0
+ for cfg_file in "${source_configs[@]}"
+ extract_configs configs/misc/switch4.conf 192.168.1.10 targets/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ local config_file=configs/misc/switch4.conf
+ local target_pattern=192.168.1.10
+ local target_listing=targets/192.168.1.10.json
+ local json_output=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
+ [[ ! -f configs/misc/switch4.conf ]]
+ message '[DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf ]]
+ local 'message=[DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf'
+ print '[DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf'
+ [[ -n [DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf ]]
+ echo -en '[DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf'
[DEBUG] Checking if config file exists and is readable: configs/misc/switch4.conf+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ ! -s configs/misc/switch4.conf ]]
++ stat -c%s configs/misc/switch4.conf
stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
+ message '[OK] File '\''configs/misc/switch4.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch4.conf' is readable and size is  bytes ]]
+ local 'message=[OK] File '\''configs/misc/switch4.conf'\'' is readable and size is  bytes'
+ print '[OK] File '\''configs/misc/switch4.conf'\'' is readable and size is  bytes'
+ [[ -n [OK] File 'configs/misc/switch4.conf' is readable and size is  bytes ]]
+ echo -en '[OK] File '\''configs/misc/switch4.conf'\'' is readable and size is  bytes'
[OK] File 'configs/misc/switch4.conf' is readable and size is  bytes+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local 'imported_content=interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ true == true ]]
+ message 'Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
! ]]
+ local 'message=Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!'
+ print 'Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!'
+ [[ -n Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
! ]]
+ echo -en 'Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!'
Imported Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0

interface Vlan2
 ip address 172.18.1.20 255.255.255.0

interface Vlan3
 ip address 172.16.0.5 255.255.255.0

object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0
!+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed '/^\s*$/d;/^\s*!.*$/d'
+ local 'sanitized_content=interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0'
+ [[ true == true ]]
+ message 'Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0 ]]
+ local 'message=Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0'
+ print 'Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0'
+ [[ -n Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0 ]]
+ echo -en 'Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0'
Sanitized Content: interface Vlan1
 ip address 192.168.1.10 255.255.255.0
interface Vlan2
 ip address 172.18.1.20 255.255.255.0
interface Vlan3
 ip address 172.16.0.5 255.255.255.0
object-group network Guardians-Zone
 description Multinetwork convergence
 network-object host 10.0.1.2
 network-object 192.168.12.0 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/\n/MTc0NzQ0Mzg4MDAzODQwNTAwMAo/g'
+ local 'serialized_objects=interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ true == true ]]
+ message 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo ]]
+ local 'message=Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ print 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ [[ -n Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo ]]
+ echo -en 'Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
Serialized Objects: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAointerface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAoobject-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ sed -E 's/MTc0NzQ0Mzg4MDAzODQwNTAwMAo([^[:space:]])/\n\1/g'
+ local 'restored_lines=interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0
interface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0
interface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0
object-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
+ restored_lines+='
'
+ IFS='
'
+ read -r -d '' -a config_objects
++ printf '%s\0' 'interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0
interface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0
interface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0
object-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo
'
+ [[ true == true ]]
+ message 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ local 'message=Loaded 4 config blocks'
+ print 'Loaded 4 config blocks'
+ [[ -n Loaded 4 config blocks ]]
+ echo -en 'Loaded 4 config blocks'
Loaded 4 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ oIFS=' 	
'
+ IFS='
'
++ printf '%s\n' 'interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0' 'interface Vlan2MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.18.1.20 255.255.255.0' 'interface Vlan3MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 172.16.0.5 255.255.255.0' 'object-group network Guardians-ZoneMTc0NzQ0Mzg4MDAzODQwNTAwMAo description Multinetwork convergenceMTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object host 10.0.1.2MTc0NzQ0Mzg4MDAzODQwNTAwMAo network-object 192.168.12.0 255.255.255.0MTc0NzQ0Mzg4MDAzODQwNTAwMAo'
++ grep -E '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)'
+ matched_objects=('interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0')
+ declare -a matched_objects
+ IFS=' 	
'
+ [[ true == true ]]
+ message 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ local 'message=Loaded 1 config blocks'
+ print 'Loaded 1 config blocks'
+ [[ -n Loaded 1 config blocks ]]
+ echo -en 'Loaded 1 config blocks'
Loaded 1 config blocks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ restored_block=()
+ declare -a restored_block
+ for serialized_line in "${matched_objects[@]}"
+ [[ true == true ]]
+ message 'Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ print 'Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
+ [[ -n Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en 'Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0'
Serialized Line: interface Vlan1MTc0NzQ0Mzg4MDAzODQwNTAwMAo ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ perl -pe 's/MTc0NzQ0Mzg4MDAzODQwNTAwMAo/\n/g'
+ restored_block='interface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ true == true ]]
+ message 'Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ print 'Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en 'Restored Configuration:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
Restored Configuration:
interface Vlan1
 ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ process_configs 192.168.1.10 configs/misc/switch4.conf 'interface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ local target_pattern=192.168.1.10
+ local config_path=configs/misc/switch4.conf
+ local 'restored_block=interface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ local cleaned_block
++ sed '/^[[:space:]]*$/d'
+ cleaned_block='interface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ -z interface Vlan1
 ip address 192.168.1.10 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=[process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ print '[process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '[process_configs] Raw Block:\ninterface Vlan1
 ip address 192.168.1.10 255.255.255.0'
[process_configs] Raw Block:
interface Vlan1
 ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local object_line
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
++ head -n 1
+ object_line='interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ local object_keyword type_value
++ awk '{print $1}'
+ object_keyword=interface
++ awk '{$1=""; print substr($0,2)}'
+ type_value=Vlan1
+ [[ true == true ]]
+ print '[process_configs] object   : interface'
+ [[ -n [process_configs] object   : interface ]]
+ echo -en '[process_configs] object   : interface'
[process_configs] object   : interface+ print '[process_configs] type     : Vlan1'
+ [[ -n [process_configs] type     : Vlan1 ]]
+ echo -en '[process_configs] type     : Vlan1'
[process_configs] type     : Vlan1+ entries=()
+ local -a entries
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='interface Vlan1'
+ [[ -z interface Vlan1 ]]
+ [[ interface vlan1 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ local trimmed
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ trimmed='ip address 192.168.1.10 255.255.255.0'
+ [[ -z ip address 192.168.1.10 255.255.255.0 ]]
+ [[ ip address 192.168.1.10 255.255.255.0 =~ ^description[[:space:]] ]]
+ entries+=("${trimmed}")
+ IFS=
+ read -r line
+ ((  2 > 1  ))
+ entries=("${entries[@]:1}")
+ [[ true == true ]]
+ message '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ local 'message=[process_configs] Entries:'
+ print '[process_configs] Entries:'
+ [[ -n [process_configs] Entries: ]]
+ echo -en '[process_configs] Entries:'
[process_configs] Entries:+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ for e in "${entries[@]}"
+ print '  - ip address 192.168.1.10 255.255.255.0'
+ [[ -n   - ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '  - ip address 192.168.1.10 255.255.255.0'
  - ip address 192.168.1.10 255.255.255.0+ local matched_line
++ grep -E '(^|[^0-9.])192\.168\.1\.10([^0-9.]|$)'
++ head -n 1
++ sed -E 's/^[[:space:]]*//;s/[[:space:]]*$//'
+ matched_line='ip address 192.168.1.10 255.255.255.0'
+ [[ -z ip address 192.168.1.10 255.255.255.0 ]]
+ [[ true == true ]]
+ message '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 192.168.1.10 255.255.255.0 ]]
+ local 'message=[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ print '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
+ [[ -n [process_configs] Matched: ip address 192.168.1.10 255.255.255.0 ]]
+ echo -en '[process_configs] Matched: ip address 192.168.1.10 255.255.255.0'
[process_configs] Matched: ip address 192.168.1.10 255.255.255.0+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local desc_val=false
+ [[ -z false ]]
+ [[ true == true ]]
+ message '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ local 'message=[process_configs] Description: false'
+ print '[process_configs] Description: false'
+ [[ -n [process_configs] Description: false ]]
+ echo -en '[process_configs] Description: false'
[process_configs] Description: false+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ local group_val=Unclassified
+ [[ true == true ]]
+ local object_key
++ awk '{print $NF}'
++ sed -E 's/[[:punct:]]*$//'
+ object_key=Vlan1
++ jq -r --arg key Vlan1 'map( select( .match[]? | contains( $key ) ) ) | .[0].group'
+ group_val=Business-Unit-Networks
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ -z Business-Unit-Networks ]]
+ [[ Business-Unit-Networks == \n\u\l\l ]]
+ [[ true == true ]]
+ message '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ local 'message=[process_configs] Group: Business-Unit-Networks'
+ print '[process_configs] Group: Business-Unit-Networks'
+ [[ -n [process_configs] Group: Business-Unit-Networks ]]
+ echo -en '[process_configs] Group: Business-Unit-Networks'
[process_configs] Group: Business-Unit-Networks+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
++ printf '%s\n' 'ip address 192.168.1.10 255.255.255.0'
++ jq -R .
++ jq -s .
+ local 'entries_2json=[
  "ip address 192.168.1.10 255.255.255.0"
]'
+ [[ 1 -eq 1 ]]
++ jq -n --arg object interface --arg description false --argjson entries '[
  "ip address 192.168.1.10 255.255.255.0"
]' --arg group Business-Unit-Networks '{
                  object: $object,
                  type: false,
                  description: ($description | select(. != "" and . != "null") // false),
                  entries: $entries,
                  group: $group
                }'
+ target_object='{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ export target_object
+ [[ true == true ]]
+ message '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ local 'message=[process_configs] JSON Object (output):'
+ print '[process_configs] JSON Object (output):'
+ [[ -n [process_configs] JSON Object (output): ]]
+ echo -en '[process_configs] JSON Object (output):'
[process_configs] JSON Object (output):+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ echo -en '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ jq .
{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}
+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ return 0
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ [[ true == true ]]
+ message '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ local 'message=|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ print '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
+ [[ -n |-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
+ echo -en '|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
|-----> Target Objects: {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ [[ -n {
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
} ]]
++ printf '%s\n' '{
  "object": "interface",
  "type": false,
  "description": "false",
  "entries": [
    "ip address 192.168.1.10 255.255.255.0"
  ],
  "group": "Business-Unit-Networks"
}'
++ jq -s --arg site configs/misc --arg device switch4.conf '{
              site: ( $site | gsub( "^.*/"; "" ) ),
              device: $device,
              objects: .
            }'
+ wrapped_block='{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ true == true ]]
+ message '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ local 'message=|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ print '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n |-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ echo -en '|-----> Config Objects:\n{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
|-----> Config Objects:
{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}+ newline
+ local count=1
+ (( i = 0 ))
+ (( i < count ))
+ echo

+ (( i++ ))
+ (( i < count ))
+ print '{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ [[ -n {
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
} ]]
+ echo -en '{
  "site": "misc",
  "device": "switch4.conf",
  "objects": [
    {
      "object": "interface",
      "type": false,
      "description": "false",
      "entries": [
        "ip address 192.168.1.10 255.255.255.0"
      ],
      "group": "Business-Unit-Networks"
    }
  ]
}'
+ return 0
+ mkdir -p /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/json
+ export json_outfile=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/json/192.168.1.10--MTc0NzQ0Mzg3.json
+ json_outfile=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/json/192.168.1.10--MTc0NzQ0Mzg3.json
+ [[ -s /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json ]]
+ jq -s --arg target 192.168.1.10 '{ target: $target, configs: . }' /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/fragments.json
++ mktemp
+ tmp_merged=/var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.S1I6AbVTYT
+ local final_outfile=reports/json/192.168.1.10.json
+ local 'jq_merge_expr={
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .entries | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }'
+ [[ -f reports/json/192.168.1.10.json ]]
+ jq -s '{
        target: .[0].target,
        configs:
          ( reduce .[].configs[] as $cfg (
            [];
            if any( .[]; .site == $cfg.site and .device == $cfg.device )
              then map(
                if .site == $cfg.site and .device == $cfg.device
                  then .objects = (
                    ( .objects + $cfg.objects )
                    | unique_by( .type, .name, .object, ( .entries | tostring ) )
                  )
                else . end
              )
            else . + [ $cfg ] end
          ))
      }' reports/json/192.168.1.10.json /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/json/192.168.1.10--MTc0NzQ0Mzg3.json
+ mv /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.S1I6AbVTYT reports/json/192.168.1.10.json
+ rm -f /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw/json/192.168.1.10--MTc0NzQ0Mzg3.json
+ return 0
+ unset verbose debug
+ [[ -d /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw ]]
+ rm -rf /var/folders/c8/432hrczx7zdbrwp9ypjq5sf80000gn/T/tmp.3vWvz0zsYw
